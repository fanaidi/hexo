<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS父级边框塌陷问题</title>
    <url>/2021/09/01/CSS%E7%88%B6%E7%BA%A7%E8%BE%B9%E6%A1%86%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><img src="https://fanaidi.gitee.io/blogimgs/CSS%E7%88%B6%E7%BA%A7%E8%BE%B9%E6%A1%86%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/%E9%97%AE%E9%A2%98.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-id">#div</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="number">#009F95</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="number">#2E2D3C</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#div3</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="number">#AC2925</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li><p><strong>增加父元素高度</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div</span>&#123;</span><br><span class="line">				<span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000000</span>;</span><br><span class="line">				<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/CSS%E7%88%B6%E7%BA%A7%E8%BE%B9%E6%A1%86%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/%E8%A7%A3%E5%86%B31.png"></p>
<p>**优点:**简单</p>
<p>**缺点:**元素假设有了固定高度,就会被限制</p>
</li>
<li><p><strong>增加一个空的div标签,清除浮动</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.clear&#123;</span><br><span class="line">				clear: both;</span><br><span class="line">				margin: 0;</span><br><span class="line">				padding: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/CSS%E7%88%B6%E7%BA%A7%E8%BE%B9%E6%A1%86%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/%E8%A7%A3%E5%86%B32.png"></p>
<p>**优点:**简单</p>
<p>**缺点:**代码中尽量避免空div</p>
</li>
<li><p><strong>在父级元素中增加一个 overflow:hidden</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div</span>&#123;</span><br><span class="line">				<span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000000</span>;</span><br><span class="line">				<span class="comment">/* height: 300px; */</span></span><br><span class="line">				<span class="attribute">overflow</span>: hidden;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/CSS%E7%88%B6%E7%BA%A7%E8%BE%B9%E6%A1%86%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/%E8%A7%A3%E5%86%B32.png"></p>
<p>**优点:**简单</p>
<p>**缺点:**下拉的一些场景避免使用</p>
</li>
<li><p><strong>父类添加一个伪类 :after</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#div</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">				<span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">				<span class="attribute">display</span>: block;</span><br><span class="line">				<span class="attribute">clear</span>: both;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/CSS%E7%88%B6%E7%BA%A7%E8%BE%B9%E6%A1%86%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/%E8%A7%A3%E5%86%B32.png"></p>
<p>**优点:**没有副作用</p>
<p>**缺点:**写法复杂</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择器</title>
    <url>/2021/08/31/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="四种基本选择器"><a href="#四种基本选择器" class="headerlink" title="四种基本选择器"></a>四种基本选择器</h1><ul>
<li>标签选择器</li>
<li>ID选择器</li>
<li>类选择器</li>
<li>通用选择器</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="comment">/*通用选择器*/</span></span></span><br><span class="line"><span class="css">			*&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="comment">/*标签选择器*/</span></span></span><br><span class="line"><span class="css">			<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="number">#008000</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="comment">/*ID选择器*/</span></span></span><br><span class="line"><span class="css">			<span class="selector-id">#first</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="number">#4bfff0</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-id">#last</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="number">#5fff57</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="comment">/*类选择器*/</span></span></span><br><span class="line"><span class="css">			<span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="number">#ff60ba</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;last&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>优先级</strong></p>
<blockquote>
<p>行内样式&gt;ID选择器大&gt;类选择器&gt;标签选择器&gt;通用选择器</p>
</blockquote>
<h1 id="四个层次选择器"><a href="#四个层次选择器" class="headerlink" title="四个层次选择器"></a>四个层次选择器</h1><ul>
<li>后代选择器   </li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选中parent元素内部后代所有 n 元素。*/</span></span><br><span class="line">parent n&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>子代选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选中 parent 元素内部的子元素 n */</span></span><br><span class="line">parent&gt;n&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>兄弟选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选中 brother 元素后面的所有某一类兄弟元素 n。*/</span></span><br><span class="line">brother~n&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>相邻选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选中brother元素后面的某一个相邻的兄弟元素n。*/</span></span><br><span class="line">brother+n&#123;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h1><blockquote>
<p>结构伪类选择器，可以根据元素在文档中所处的位置，来动态选择元素，从而减少HTML文档对ID或类的依赖，有助于保持代码干净整洁。</p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/CSS%E9%80%89%E6%8B%A9%E5%99%A8/%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="结构伪类选择器"></p>
<h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1><p><img src="" alt="属性选择器"><img src="https://fanaidi.gitee.io/blogimgs/CSS%E9%80%89%E6%8B%A9%E5%99%A8/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="属性选择器"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2021/04/12/JDBC/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h3 id="一-实现步骤"><a href="#一-实现步骤" class="headerlink" title="一.实现步骤"></a>一.实现步骤</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.导入驱动jar包</span><br><span class="line">2.注册驱动</span><br><span class="line">3.获取数据库连接对象</span><br><span class="line">4.定义sql语句</span><br><span class="line">5.获取执行sql的对象Statement</span><br><span class="line">6.执行sql</span><br><span class="line">7.处理结果</span><br><span class="line">8.释放资源</span><br></pre></td></tr></table></figure>

<h3 id="二-详解各个对象"><a href="#二-详解各个对象" class="headerlink" title="二.详解各个对象"></a>二.详解各个对象</h3><h4 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="1.DriverManager"></a>1.DriverManager</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">驱动管理对象</span><br><span class="line">public class DriverManager extends Object 用于管理一组JDBC驱动程序的基本服务。</span><br></pre></td></tr></table></figure>

<h5 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.注册驱动:告诉程序该使用哪一个数据库驱动jar</span><br><span class="line">static void registerDriver(Driver driver) 注册与给定的驱动程序 DriverManager.</span><br><span class="line">写代码使用Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">注意:mysql5之后的驱动jar包可以省略注册驱动的步骤</span><br><span class="line">2.获取数据库连接</span><br><span class="line">static Connection getConnection(String url, String user, String password) 尝试建立与给定数据库URL的连接。  </span><br><span class="line">参数:</span><br><span class="line">url:指定连接路径</span><br><span class="line">	语法:jdbc:mysql://ip地址(域名):端口号/数据库名称</span><br><span class="line">	例子:jdbc:mysql://localhost:3306/db  //(mysql5.0)</span><br><span class="line">	--------------------------mysql8.0写法-----------------------------</span><br><span class="line">		jdbc:mysql://localhost:3306/db</span><br><span class="line">		?useUnicode=true</span><br><span class="line">		&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=Hongkong</span><br><span class="line">		&amp;allowPublicKeyRetrieval=true   //(mysql8.0)</span><br><span class="line">user:用户名</span><br><span class="line">password:密码</span><br></pre></td></tr></table></figure>

<h4 id="2-Connection"><a href="#2-Connection" class="headerlink" title="2.Connection"></a>2.Connection</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库连接对象</span><br><span class="line">1.获取执行sql的对象</span><br><span class="line">Statement createStatement() //创建一个 Statement对象，用于将SQL语句发送到数据库。  </span><br><span class="line">PreparedStatement prepareStatement(String sql) //创建一个 PreparedStatement对象，用于将参数化的SQL语句发送到数据库。 </span><br><span class="line">2.管理事务</span><br><span class="line">开启事务:void setAutoCommit(boolean autoCommit) //将此连接的自动提交模式设置为给定状态。true启用自动提交模式; false禁用它   </span><br><span class="line">提交事务:commit()</span><br><span class="line">回滚事务:rollback()</span><br></pre></td></tr></table></figure>

<h4 id="3-Statement"><a href="#3-Statement" class="headerlink" title="3.Statement"></a>3.Statement</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行sql的对象</span><br><span class="line">boolean execute(String sql) //执行给定的 SQL 语句，该语句可能返回多个结果。 </span><br><span class="line">int executeUpdate(String sql) //执行给定 SQL 语句，该语句可能为 INSERT、UPDATE 或 DELETE 语句，或者不返回任何内容的 	SQL 语句（如 SQL DDL(create,alter,drop) 语句）。 </span><br><span class="line">	返回值:影响的行数	</span><br><span class="line">ResultSet executeQuery(String sql) //执行给定的 SQL 语句，该语句返回单个 ResultSet 对象。 </span><br></pre></td></tr></table></figure>

<h4 id="4-ResultSet"><a href="#4-ResultSet" class="headerlink" title="4.ResultSet"></a>4.ResultSet</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结果集对象</span><br><span class="line">boolean next() //将光标从当前位置向前移一行。 </span><br></pre></td></tr></table></figure>

<h4 id="5-PreparedStatement"><a href="#5-PreparedStatement" class="headerlink" title="5.PreparedStatement"></a>5.PreparedStatement</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行sql的对象</span><br><span class="line">1.解决sql注入问题:使用PreparedStatement对象来解决</span><br><span class="line">2.预编译的sql:参数使用?作为占位符</span><br></pre></td></tr></table></figure>

<h3 id="三-JDBC管理事务"><a href="#三-JDBC管理事务" class="headerlink" title="三.JDBC管理事务"></a>三.JDBC管理事务</h3><h4 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务:"></a>1.事务:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个包含多个步骤的业务操作.如果这个业务操作被事务管理,则这个步骤要么同时成功,要么同时失败</span><br></pre></td></tr></table></figure>

<h4 id="2-操作"><a href="#2-操作" class="headerlink" title="2.操作:"></a>2.操作:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.开启事务.</span><br><span class="line">2.提交事务.</span><br><span class="line">3.回滚事务</span><br></pre></td></tr></table></figure>

<h4 id="3-使用Connection对象来管理事务"><a href="#3-使用Connection对象来管理事务" class="headerlink" title="3.使用Connection对象来管理事务"></a>3.使用Connection对象来管理事务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启事务:void setAutoCommit(boolean autoCommit) //将此连接的自动提交模式设置为给定状态。true启用自动提交模式; false禁用它   </span><br><span class="line">提交事务:commit()</span><br><span class="line">回滚事务:rollback()</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery</title>
    <url>/2021/09/06/JQuery/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h1><h2 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="JQuery入口函数和window-onload入口函数的区别"><a href="#JQuery入口函数和window-onload入口函数的区别" class="headerlink" title="JQuery入口函数和window.onload入口函数的区别"></a>JQuery入口函数和window.onload入口函数的区别</h2><blockquote>
<ol>
<li><p>window.onload入口函数不能写多个,但是JQuery的入口函数可以写多个</p>
</li>
<li><p>执行时机不同:JQuery入口函数要快于window.onload.</p>
<p>JQuery入口函数要等待页面上dom树加载完后执行</p>
<p>window.onload要等待页面上所有的资源(dom树/外部css/js/图片)都加载完毕后执行</p>
</li>
</ol>
</blockquote>
<h1 id=""><a href="#" class="headerlink" title="$"></a>$</h1><blockquote>
<p>-引入一个js文件,是会执行js文件中的代码的</p>
<p>-JQuery文件是一个自执行函数,执行这个JQuery文件中的代码,其实就是执行这个自执行函数</p>
<p>-这个自执行文件就是给window对象添加JQuery属性和$属性</p>
<p>-$其实和JQuery是等价的</p>
<p>-$是一个函数,参数不同,传递效果不同</p>
<p>​    如果参数传递的是一个匿名函数,就是入口函数</p>
<p>​    如果参数传递的是一个字符串,就是选择器/会创建一个标签</p>
<p>​    如果参数是一个dom对象,那他就会把dom对象转换为JQuery对象</p>
<p>​    </p>
</blockquote>
<h2 id="JQuery文件结构"><a href="#JQuery文件结构" class="headerlink" title="JQuery文件结构"></a>JQuery文件结构</h2><blockquote>
<p>其实是一个自执行函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>

<h1 id="dom对象和JQuery对象"><a href="#dom对象和JQuery对象" class="headerlink" title="dom对象和JQuery对象"></a>dom对象和JQuery对象</h1><h2 id="dom对象"><a href="#dom对象" class="headerlink" title="dom对象"></a>dom对象</h2><blockquote>
<p>-dom对象就是原生js选择器获取到的对象</p>
<p>-特点: 只能调用dom属性或方法,不能调用JQuery的属性或者方法.</p>
</blockquote>
<h2 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h2><blockquote>
<p>利用JQuery选择器获取到的对象</p>
<p>特点: 只能调用JQuery的方法或属性,不能调用原生js dom对象的属性或者方法</p>
<p>JQuery对象是一个伪数组.JQuery对象其实就是dom对象的包装集.</p>
</blockquote>
<h2 id="dom对象转换为JQuery对象"><a href="#dom对象转换为JQuery对象" class="headerlink" title="dom对象转换为JQuery对象"></a>dom对象转换为JQuery对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> $d1 = $(d1);</span><br><span class="line"><span class="built_in">console</span>.log($d1);</span><br></pre></td></tr></table></figure>

<h2 id="JQuery对象转换为dom对象"><a href="#JQuery对象转换为dom对象" class="headerlink" title="JQuery对象转换为dom对象"></a>JQuery对象转换为dom对象</h2><h3 id="1-使用下标来取"><a href="#1-使用下标来取" class="headerlink" title="1.使用下标来取"></a>1.使用下标来取</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $divs = $(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div = $divs[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br></pre></td></tr></table></figure>

<h3 id="2-使用JQuery的方法get"><a href="#2-使用JQuery的方法get" class="headerlink" title="2.使用JQuery的方法get()"></a>2.使用JQuery的方法get()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> $divs = $(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div = $divs.get(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br></pre></td></tr></table></figure>

<h1 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h1><blockquote>
<p>text()获取和设置文本</p>
<p>1.获取文本: text()不给参数</p>
<p>2.设置文本:text()给参数,参数就是要设置的文本</p>
<p>​    会覆盖他原来的内容,如果设置的文本中包含标签,是不会把这个标签解析出来的</p>
</blockquote>
<h1 id="css"><a href="#css" class="headerlink" title="css()"></a>css()</h1><blockquote>
<p>1.获取样式:css()设置参数为要获取值的样式名</p>
<p>​    注意:获取样式操作只会返回第一个元素对应的样式值</p>
<p>2.设置样式:css(样式名,样式值)</p>
<p>隐式迭代:</p>
<p>​    1.设置操作的时候,如果是多个元素,那么给所有的元素设置相同的值</p>
<p>​    2.获取操作的时候,如果是多个元素,那么只返回第一个元素的值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置单样式</span></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).css(<span class="string">&quot;width&quot;</span>,<span class="number">300</span>);</span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).css(<span class="string">&quot;height&quot;</span>,<span class="string">&quot;300px&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;5px solid black&quot;</span>);</span><br><span class="line"><span class="comment">//设置多样式</span></span><br><span class="line"><span class="comment">//设置多样式</span></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).css(&#123;</span><br><span class="line">    <span class="string">&quot;width&quot;</span>:<span class="string">&quot;300px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>:<span class="string">&quot;300px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundColor&quot;</span>:<span class="string">&quot;blue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border&quot;</span>:<span class="string">&quot;5px solid green&quot;</span></span><br><span class="line">&#125;)	</span><br></pre></td></tr></table></figure>

<h1 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//id选择器</span></span><br><span class="line">$(<span class="string">&quot;#d1&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;5px solid black&quot;</span>);</span><br><span class="line"><span class="comment">//类选择器</span></span><br><span class="line">$(<span class="string">&quot;.d2&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;5px solid black&quot;</span>);</span><br><span class="line"><span class="comment">//标签选择器</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;5px solid green&quot;</span>);</span><br><span class="line"><span class="comment">//并集选择器 格式:$(s1,s2,s3)</span></span><br><span class="line">$(<span class="string">&quot;#d1,.d2&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;5px solid red&quot;</span>);</span><br><span class="line"><span class="comment">//交集选择器  格式:$(s1.s2)</span></span><br><span class="line">$(<span class="string">&quot;li.p1&quot;</span>).text(<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h1><h2 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h2><blockquote>
<p>用法: $(“ul&gt;li”)</p>
<p>不会获取孙子级的元素</p>
</blockquote>
<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><blockquote>
<p>$(“ul li”)</p>
<p>可以获取到孙子级元素</p>
</blockquote>
<h1 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h1><h2 id="eq-index"><a href="#eq-index" class="headerlink" title=":eq(index)"></a>:eq(index)</h2><blockquote>
<p>用法: $(“li:eq(2)”)   获取到的li的元素中,选择索引号为2的元素,索引号index从0开始</p>
</blockquote>
<h2 id="odd"><a href="#odd" class="headerlink" title=":odd"></a>:odd</h2><blockquote>
<p>用法:$(“li:odd”)   获取到的li的元素中,选择索引号为奇数的元素</p>
</blockquote>
<h2 id="even"><a href="#even" class="headerlink" title=":even"></a>:even</h2><blockquote>
<p>用法:$(“li:even”)   获取到的li的元素中,选择索引号为偶数的元素</p>
</blockquote>
<h1 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h1><h2 id="children-selector"><a href="#children-selector" class="headerlink" title="children(selector)"></a>children(selector)</h2><blockquote>
<p>用法:        $(“ul”).children(“li”)     相当于   (“ul&gt;li”),子类选择器</p>
</blockquote>
<h2 id="find-selector"><a href="#find-selector" class="headerlink" title="find(selector)"></a>find(selector)</h2><blockquote>
<p>用法:        $(“ul”).find(“li”)       相当于后代选择器</p>
</blockquote>
<h2 id="siblings-selector"><a href="#siblings-selector" class="headerlink" title="siblings(selector)"></a>siblings(selector)</h2><blockquote>
<p>用法:        $(“#first”).siblings(“li”)    查找兄弟节点,不包括自己本身</p>
</blockquote>
<h2 id="parent"><a href="#parent" class="headerlink" title="parent()"></a>parent()</h2><blockquote>
<p>用法:        $(“#first”).parent()        查找父亲</p>
</blockquote>
<h2 id="eq-index-1"><a href="#eq-index-1" class="headerlink" title="eq(index)"></a>eq(index)</h2><blockquote>
<p>用法:        $(“li”).eq(1)   在li中,查找索引为1的元素</p>
</blockquote>
<h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><blockquote>
<p>用法:        $(“li”).next()  查找下一个兄弟</p>
</blockquote>
<h2 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h2><blockquote>
<p>用法:        $(“li”).prev()         查找上一个兄弟</p>
</blockquote>
<h1 id="mouseenter事件和mouseleave事件"><a href="#mouseenter事件和mouseleave事件" class="headerlink" title="mouseenter事件和mouseleave事件"></a>mouseenter事件和mouseleave事件</h1><blockquote>
<p>mouseover        事件在鼠标移动到选取的元素及其子元素上时触发</p>
<p>mouseenter        事件只在鼠标移动到选取元素上时触发</p>
<p>注意:</p>
<p>以后如果有鼠标移入事件,请使用mouseenter,而不是mouseover</p>
<p>鼠标移开事件使用mouseleave,不要使用mouseout</p>
</blockquote>
<h1 id="类操作"><a href="#类操作" class="headerlink" title="类操作"></a>类操作</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.添加类 addClass(类名)</span></span><br><span class="line"><span class="comment">//添加单个类</span></span><br><span class="line">$(<span class="string">&quot;#div&quot;</span>).addClass(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line"><span class="comment">//添加多个类</span></span><br><span class="line">$(<span class="string">&quot;#div&quot;</span>).addClass(<span class="string">&quot;c1 c2&quot;</span>);</span><br><span class="line"><span class="comment">//2.移除类 removeClass(类名)</span></span><br><span class="line"><span class="comment">//移除单个类</span></span><br><span class="line">$(<span class="string">&quot;#div&quot;</span>).removeClass(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line"><span class="comment">//移除多个类</span></span><br><span class="line">$(<span class="string">&quot;#div&quot;</span>).removeClass(<span class="string">&quot;c1 c2&quot;</span>);</span><br><span class="line"><span class="comment">//3.判断类 判断一个元素有没有某个类,如果有返回true,没有返回false     hasClass(类名)</span></span><br><span class="line"><span class="comment">//4.切换类 如果元素有某个类就移除这个类,如果元素没有这个类就添加这个类  toggleClass(类名)</span></span><br></pre></td></tr></table></figure>

<h1 id="animate"><a href="#animate" class="headerlink" title="animate()"></a>animate()</h1><blockquote>
<p>参数1:必选的    对象    代表的是需要做动画的属性</p>
<p>参数2:可选的    代表执行动画的时长</p>
<p>参数3:可选的    easing    代表的是缓动还是匀速    linear(匀速)    swing(缓动)    默认是缓动</p>
<p>参数4:回调函数 </p>
</blockquote>
<h1 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h1><blockquote>
<p>参数1:是否清除队列</p>
<p>参数2:是否跳转到最终效果</p>
<p>如果stop()不写参数,默认stop(false,false)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-id">#div1</span>,<span class="selector-id">#div2</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background</span>: red;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">top</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">left</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-id">#div2</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">background</span>: red;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">top</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">left</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&quot;#div1&quot;</span>).stop(<span class="literal">true</span>,<span class="literal">false</span>).animate(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    <span class="attr">left</span>:<span class="number">500</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;,<span class="number">2000</span>,<span class="string">&quot;linear&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    $(<span class="string">&quot;#div1&quot;</span>).animate(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">left</span>:<span class="number">10</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;,<span class="number">2000</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&quot;#btn2&quot;</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&quot;#div2&quot;</span>).stop(<span class="literal">true</span>,<span class="literal">false</span>).slideDown(<span class="number">300</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            $(<span class="string">&quot;#btn2&quot;</span>).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                $(<span class="string">&quot;#div2&quot;</span>).stop(<span class="literal">true</span>,<span class="literal">false</span>).slideUp(<span class="number">300</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>移动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>下拉<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="动态创建元素"><a href="#动态创建元素" class="headerlink" title="动态创建元素"></a>动态创建元素</h1><h2 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h2><blockquote>
<p>设置或获取内容</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取内容</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).html());</span><br><span class="line"><span class="comment">//设置内容</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).html(<span class="string">&quot;&lt;a href=&#x27;www.baidu.com&#x27;&gt;百度&lt;/a&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="-1"><a href="#-1" class="headerlink" title="$()"></a>$()</h2><blockquote>
<p>确实能创建元素,但是创建的元素只存在于内容中,如果要在页面上显示,就要追加</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$link = $(<span class="string">&quot;&lt;a href=&#x27;www.baidu.com&#x27;&gt;百度&lt;/a&gt;&quot;</span>);</span><br><span class="line"><span class="comment">//追加</span></span><br><span class="line">$(<span class="string">&quot;#div1&quot;</span>).append($link);</span><br></pre></td></tr></table></figure>

<h1 id="添加节点的几种方式"><a href="#添加节点的几种方式" class="headerlink" title="添加节点的几种方式"></a>添加节点的几种方式</h1><h2 id="1-append"><a href="#1-append" class="headerlink" title="1.append()"></a>1.append()</h2><blockquote>
<p>用法:    父元素.append(子元素)        //作为最后一个子元素添加</p>
</blockquote>
<h2 id="2-prepend"><a href="#2-prepend" class="headerlink" title="2.prepend()"></a>2.prepend()</h2><blockquote>
<p>用法:    父元素.prepend(子元素)        //作为第一个子元素添加</p>
</blockquote>
<h2 id="3-before"><a href="#3-before" class="headerlink" title="3.before()"></a>3.before()</h2><blockquote>
<p>用法:    元素A.before(元素B)    把元素B插入到元素A的前面,作为兄弟元素添加</p>
</blockquote>
<h2 id="4-after"><a href="#4-after" class="headerlink" title="4.after()"></a>4.after()</h2><blockquote>
<p>用法:    元素A.after(元素B)    把元素B插入到元素A的后面,作为兄弟元素添加</p>
</blockquote>
<h2 id="5-appendTo"><a href="#5-appendTo" class="headerlink" title="5.appendTo()"></a>5.appendTo()</h2><blockquote>
<p>用法:    子元素.appendTo(父元素)    把子元素作为父元素的最后一个子元素添加</p>
</blockquote>
<h1 id="清空节点empty"><a href="#清空节点empty" class="headerlink" title="清空节点empty()"></a>清空节点empty()</h1><blockquote>
<p>不推荐使用html(“”)    有可能会造成内存泄露,不安全</p>
<p>推荐使用empty()</p>
</blockquote>
<h1 id="移除节点remove"><a href="#移除节点remove" class="headerlink" title="移除节点remove()"></a>移除节点remove()</h1><blockquote>
<p>$(“#li3”).remove()</p>
</blockquote>
<h1 id="克隆节点clone"><a href="#克隆节点clone" class="headerlink" title="克隆节点clone()"></a>克隆节点clone()</h1><blockquote>
<p>只存在于内存中,如果要在页面上显示,就应该追加到页面上</p>
<p>参数:    true表示会把事件一起克隆到</p>
<p>​            false不会克隆事件</p>
<p>​            不给参数,默认是false</p>
</blockquote>
<h1 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h1><blockquote>
<p>获取或设置表单元素</p>
</blockquote>
<h1 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h1><h2 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置单个属性</span></span><br><span class="line">$(<span class="string">&quot;#img1&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;a.jpg&quot;</span>);</span><br><span class="line"><span class="comment">//设置多个属性</span></span><br><span class="line">$(<span class="string">&quot;#img1&quot;</span>).attr(&#123;</span><br><span class="line">    <span class="string">&quot;src&quot;</span>:<span class="string">&quot;b.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alt&quot;</span>:<span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line">$(<span class="string">&quot;#img1&quot;</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line"><span class="comment">//移除属性</span></span><br><span class="line">$(<span class="string">&quot;#img1&quot;</span>).removeAttr(<span class="string">&quot;alt&quot;</span>);</span><br><span class="line"><span class="comment">//移除多个属性</span></span><br><span class="line">$(<span class="string">&quot;#img1&quot;</span>).removeAttr(<span class="string">&quot;alt src&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="prop"><a href="#prop" class="headerlink" title="prop()"></a>prop()</h2><blockquote>
<p>操作布尔类型的属性</p>
</blockquote>
<h1 id="on"><a href="#on" class="headerlink" title="on"></a>on</h1><h2 id="on简单注册事件"><a href="#on简单注册事件" class="headerlink" title="on简单注册事件"></a>on简单注册事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不支持动态注册</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;单击事件&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="on委托事件"><a href="#on委托事件" class="headerlink" title="on委托事件"></a>on委托事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//支持动态注册</span></span><br><span class="line">$(<span class="string">&quot;body&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;div span&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;单击事件&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="off"><a href="#off" class="headerlink" title="off"></a>off</h1><blockquote>
<p>解绑事件</p>
<p>off()不给参数就是解绑所有事件</p>
<p>off(“click”)解绑指定事件</p>
</blockquote>
<h1 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h1><blockquote>
<p>回到最近的一个”破坏性”操作之前。即，将匹配的元素列表变为前一次的状态。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC高并发编程</title>
    <url>/2021/11/20/JUC%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="JUC概述"><a href="#JUC概述" class="headerlink" title="JUC概述"></a>JUC概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>JUC全称：java.util.concurrent，是JDK提供的一个处理并发的工具包。</p>
</blockquote>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><blockquote>
<p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p>
</blockquote>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote>
<p><strong>线程</strong>（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
</blockquote>
<h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><h3 id="线程状态枚举类"><a href="#线程状态枚举类" class="headerlink" title="线程状态枚举类"></a>线程状态枚举类</h3><p>Thread.State </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">     * 新建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class="line"><span class="comment">     * state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">     * be waiting for other resources from the operating system</span></span><br><span class="line"><span class="comment">     * such as processor.</span></span><br><span class="line"><span class="comment">     * 准备就绪</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class="line"><span class="comment">     * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class="line"><span class="comment">     * to enter a synchronized block/method or</span></span><br><span class="line"><span class="comment">     * reenter a synchronized block/method after calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class="line"><span class="comment">     * 阻塞</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread.</span></span><br><span class="line"><span class="comment">     * A thread is in the waiting state due to calling one of the</span></span><br><span class="line"><span class="comment">     * following methods:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class="line"><span class="comment">     * perform a particular action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class="line"><span class="comment">     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">     * 不见不散</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class="line"><span class="comment">     * A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">     * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&#123;<span class="doctag">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     * 过时不候</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a terminated thread.</span></span><br><span class="line"><span class="comment">     * The thread has completed execution.</span></span><br><span class="line"><span class="comment">     * 终结</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wait和sleep的区别"><a href="#wait和sleep的区别" class="headerlink" title="wait和sleep的区别"></a>wait和sleep的区别</h3><ol>
<li>sleep是Thread的静态方法,wait是Object的方法,任何对象实例都可以调用</li>
<li>sleep不会释放锁,它也不需要占用锁.wait会释放锁,但调用它的前提是当前线程占有锁(即代码要在synchronized中).</li>
<li>他们都可以被interrupted方法中断.</li>
</ol>
<h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><h3 id="串行模式"><a href="#串行模式" class="headerlink" title="串行模式"></a>串行模式</h3><blockquote>
<p>串行是一次只能取得一个任务,并执行这个任务</p>
</blockquote>
<h3 id="并行模式"><a href="#并行模式" class="headerlink" title="并行模式"></a>并行模式</h3><blockquote>
<p>多项工作一起执行,之后再汇总</p>
</blockquote>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><blockquote>
<p>同一时刻多个线程在访问同一个资源,多个线程对一个点</p>
</blockquote>
<h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><blockquote>
<p>是一种同步机制,保证同一个时间,只有一个线程访问被保护数据或者代码</p>
</blockquote>
<h2 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h2><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><blockquote>
<p>自定义线程</p>
<p>主线程结束了,用户线程还在运行,jvm存活</p>
</blockquote>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><blockquote>
<p>比如垃圾回收</p>
<p>没有用户线程,都是守护线程,jvm结束</p>
</blockquote>
<h1 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h1><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h2><h3 id="多线程编程步骤"><a href="#多线程编程步骤" class="headerlink" title="多线程编程步骤"></a>多线程编程步骤</h3><ol>
<li>创建资源类,在资源类创建属性和操作方法</li>
<li>创建多个线程,调用资源类的操作方法</li>
</ol>
<h3 id="卖票案例"><a href="#卖票案例" class="headerlink" title="卖票案例"></a>卖票案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 创建资源类,在资源类创建属性和操作方法</span></span><br><span class="line"><span class="comment"> * 2. 创建多个线程,调用资源类的操作方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaleTicket</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2.创建多个线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Ticket对象</span></span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="comment">//创建三个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;AA&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;BB&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;CC&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.创建资源类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span></span>&#123;</span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">30</span>;</span><br><span class="line">    <span class="comment">//操作方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; : 卖出: &quot;</span>+number--+<span class="string">&quot;剩下: &quot;</span>+number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lock接口-1"><a href="#Lock接口-1" class="headerlink" title="Lock接口"></a>Lock接口</h2><blockquote>
<p><code>Lock</code>实现提供比使用<code>synchronized</code>方法和语句可以获得的更广泛的锁定操作。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Kafka</title>
    <url>/2021/10/30/Kafka/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>Kafka是一个分布式的基于发布/订阅模式的消息队列（MessageQueue），主要应用于大数据实时处理领域。</p>
</blockquote>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><blockquote>
<p>是在消息的传输过程中保存消息的容器。</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><img src="/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png"></p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li><p>解耦 </p>
<p>允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p>
</li>
<li><p>可恢复性 </p>
<p>系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</p>
</li>
<li><p>缓冲</p>
<p>有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</p>
</li>
<li><p>灵活性 &amp; 峰值处理能力</p>
<p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。 如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列 能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p>
</li>
<li><p>异步通信</p>
<p>很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户 把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要 的时候再去处理它们。</p>
</li>
</ol>
<h2 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h2><ol>
<li><p><strong>点对点模式</strong>(<strong>一对一</strong>，消费者主动拉取数据，消息收到后消息清除)</p>
<p>消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。 消息被消费以后，Queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。 Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</p>
</li>
<li><p><strong>发布/订阅模式</strong>（<strong>一对多</strong>，消费者消费数据之后不会清除消息）</p>
<p>消息生产者（发布）将消息发布到 topic 中，同时有多个消息消费者（订阅）消费该消 息。和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/05/02/Linux/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Linux，全称GNU/Linux，是一种免费使用和自由传播的类UNIX操作系统，其内核由林纳斯·本纳第克特·托瓦兹于1991年10月5日首次发布，它主要受到Minix和Unix思想的启发，是一个基于POSIX的多用户、多任务、支持多线程和多CPU的操作系统。</p>
</blockquote>
<h3 id="发行版"><a href="#发行版" class="headerlink" title="发行版"></a>发行版</h3><p><img src="https://fanaidi.gitee.io/blogimgs/Linux/Linux%E5%8F%91%E8%A1%8C%E7%89%88.png" alt="linux发行版"></p>
<h2 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h2><p>下载地址：<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html</a></p>
<h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><p>下载地址：<a href="https://www.centos.org/download">https://www.centos.org/download</a></p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>先创建一个虚拟机，选择自定义-&gt;安装的VMware版本-&gt;稍后安装操作系统-&gt;Linux CentOS7 64位-&gt;选择安装位置，接下来全部默认选择即可。</p>
<ol>
<li>点击CD/DVD配置centos镜像</li>
</ol>
<p><img src="https://fanaidi.gitee.io/blogimgs/Linux/centos1.jpg"></p>
<p>选择使用ISO镜像文件</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Linux/centos2.jpg"></p>
<ol start="2">
<li><p>开启此虚拟机</p>
</li>
<li><p>点击软件选择</p>
</li>
</ol>
<p><img src="https://fanaidi.gitee.io/blogimgs/Linux/%E8%BD%AF%E4%BB%B6%E9%80%89%E6%8B%A9.png"></p>
<p>选择GNOME桌面</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Linux/%E6%A1%8C%E9%9D%A2.png"></p>
<ol start="4">
<li>点击安装位置</li>
</ol>
<p><img src="https://fanaidi.gitee.io/blogimgs/Linux/%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE.png"></p>
<p>选择我要配置分区</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Linux/%E9%85%8D%E7%BD%AE%E5%88%86%E5%8C%BA.png"></p>
<p>分区信息如下</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Linux/%E6%89%8B%E5%8A%A8%E5%88%86%E5%8C%BA.png"></p>
<ol start="5">
<li><p>点击开始安装</p>
</li>
<li><p>配置root账户的密码</p>
</li>
</ol>
<p><img src="https://fanaidi.gitee.io/blogimgs/Linux/root%E7%94%A8%E6%88%B7.png"></p>
<ol start="7">
<li>重启</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2021/03/30/Maven/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="Maven的核心概念"><a href="#Maven的核心概念" class="headerlink" title="Maven的核心概念"></a>Maven的核心概念</h1><ol>
<li>约定的目录结构</li>
<li>POM</li>
<li>坐标</li>
<li>依赖</li>
<li>仓库</li>
<li>生命周期</li>
<li>继承</li>
<li>聚合</li>
</ol>
<h1 id="1-约定的目录结构"><a href="#1-约定的目录结构" class="headerlink" title="1.约定的目录结构"></a>1.约定的目录结构</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://fanaidi.gitee.io/blogimgs/Maven/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="image-20210930104040854"></p>
<blockquote>
<p>根目录:工程名</p>
<p>src目录:源码</p>
<p>pom.xml:Maven工程的核心配置文件</p>
<p>main目录:存放主程序</p>
<p>test目录:存放测试程序</p>
<p>java目录:存放java源文件</p>
<p>resources:存放框架或其他工具的配置文件</p>
</blockquote>
<h2 id="为什么要遵守约定的目录结构"><a href="#为什么要遵守约定的目录结构" class="headerlink" title="为什么要遵守约定的目录结构?"></a>为什么要遵守约定的目录结构?</h2><blockquote>
<p>1.Maven要负责我们这个项目的自动化构建,以编译为例,Maven要想自动进行编译,那么它必须知道Java源文件保存在哪里</p>
<p>2.自定义文件想要让框架或工具知道,有两种方法.</p>
<p>​    (1)以配置的方式明确告诉框架</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    (2)遵守框架内部已经存在的约定</p>
<p>​        例:log4j.properties或log4j.xml</p>
<p>3.约定&gt;配置&gt;编码</p>
</blockquote>
<h1 id="常用Maven命令"><a href="#常用Maven命令" class="headerlink" title="常用Maven命令"></a>常用Maven命令</h1><blockquote>
<p>注意:执行与构建过程相关的Maven命令,必须进入pom.xml所在的目录.</p>
<p>与构建过程相关:编译 测试 打包…</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>mvn clean:清理</p>
<p>mvn compile:编译主程序</p>
<p>mvn test-compile:编译测试程序</p>
<p>mvn test:执行测试</p>
<p>mvn package:打包</p>
</blockquote>
<h1 id="2-POM"><a href="#2-POM" class="headerlink" title="2.POM"></a>2.POM</h1><blockquote>
<p>含义:Project Object Model项目对象模型</p>
<p>pom.xml对应Maven工程是核心配置文件,与构建过程相关的一切设置都在这个文件中进行配置.</p>
</blockquote>
<h1 id="3-坐标gav"><a href="#3-坐标gav" class="headerlink" title="3.坐标gav"></a>3.坐标gav</h1><blockquote>
<p>1.Maven中的坐标使用下面三个向量在仓库中唯一定位一个Maven工程</p>
<p>​    1.<strong>g</strong>roupid: 公司或组织域名倒序+项目名</p>
<p>​    2.<strong>a</strong>rtifactid:模块名</p>
<p>​    3.<strong>v</strong>ersion:版本</p>
<p>2.Maven工程的坐标与仓库中路径的对应关系</p>
<p>​    坐标:</p>
<pre><code>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
       
  &lt;artifactId&gt;spring-core&lt;/artifactId&gt;  
       
  &lt;version&gt;5.3.1&lt;/version&gt;
</code></pre>
<p>​    路径: org\springframework\spring-core\5.3.1</p>
</blockquote>
<h1 id="4-依赖"><a href="#4-依赖" class="headerlink" title="4.依赖"></a>4.依赖</h1><blockquote>
<p>1.Maven解析依赖信息时会到本地仓库中查找被依赖的jar包</p>
<p>​    对于我们自己开发的Maven工程,使用<strong>mvn install</strong>命令安装后就可以进入仓库.</p>
</blockquote>
<h2 id="1-compile范围依赖"><a href="#1-compile范围依赖" class="headerlink" title="1.compile范围依赖"></a>1.compile范围依赖</h2><p><img src="https://fanaidi.gitee.io/blogimgs/Maven/compile%E5%92%8Ctest%E4%BE%9D%E8%B5%96.png" alt="image-20210930145949011"></p>
<blockquote>
<p>对主程序是否有效:    有效</p>
<p>对测试程序是否有效:有效</p>
<p>是否参与打包:参与</p>
</blockquote>
<h2 id="2-test范围依赖"><a href="#2-test范围依赖" class="headerlink" title="2.test范围依赖"></a>2.test范围依赖</h2><blockquote>
<p>对主程序是否有效:无效</p>
<p>对测试程序是否有效:有效</p>
<p>是否参与打包:不参与</p>
<p>典型的例子:junit</p>
</blockquote>
<h2 id="3-provide范围依赖"><a href="#3-provide范围依赖" class="headerlink" title="3.provide范围依赖"></a>3.provide范围依赖</h2><p><img src="https://fanaidi.gitee.io/blogimgs/Maven/provided%E8%8C%83%E5%9B%B4%E7%9A%84%E4%BE%9D%E8%B5%96.png"></p>
<blockquote>
<p>对主程序是否有效:有效</p>
<p>对测试程序是否有效:有效</p>
<p>是否参与打包:不参与</p>
<p>是否参与部署:不参与</p>
<p>典型的例子:servlet-api </p>
</blockquote>
<h2 id="4-依赖的传递性"><a href="#4-依赖的传递性" class="headerlink" title="4.依赖的传递性"></a>4.依赖的传递性</h2><blockquote>
<p>好处:可以传递的依赖不必在每个模块工程中都重复声明,在”最下面”的工程中依赖-次即可。</p>
<p>注意:非compile范围的依赖不能传递。所以在各个工程模块中,如果有需要就得重复声明依赖。</p>
</blockquote>
<h2 id="5-依赖的排除"><a href="#5-依赖的排除" class="headerlink" title="5.依赖的排除"></a>5.依赖的排除</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-依赖的原则"><a href="#6-依赖的原则" class="headerlink" title="6.依赖的原则"></a>6.依赖的原则</h2><blockquote>
<p>作用：解决模块工程之间的jar包冲突问题</p>
<p>遵循路径最短者原则</p>
<p>路径相同时,先声明者优先</p>
</blockquote>
<h2 id="7-统一管理依赖的版本"><a href="#7-统一管理依赖的版本" class="headerlink" title="7.统一管理依赖的版本"></a>7.统一管理依赖的版本</h2><p>配置方式:使用properties标签内使用自定义标签统一声明版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	 	<span class="tag">&lt;<span class="name">aa.bb.cc</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">aa.bb.cc</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在需要统一版本的位置,使用${自定义标签名}引用声明的版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aa.bb.cc&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实properties标签配合自定义标签声明数据的配置并不是只能用于声明依赖的版本号。凡是需要统一声明后再弓|用的场合都可以使用</p>
<h1 id="5-仓库"><a href="#5-仓库" class="headerlink" title="5.仓库"></a>5.仓库</h1><blockquote>
<p>仓库的分类</p>
<ul>
<li><p>本地仓库：当前电脑上部署的仓库目录，为当前电脑上多有Maven工程服务</p>
</li>
<li><p>远程仓库</p>
<ul>
<li>私服：搭建在局域网环境中,为局域网范围内的所有Maven工程服务</li>
<li>中央仓库：架设在Internet上,为全世界所有Maven工程服务</li>
<li>中央仓库镜像：为了分担中央仓库的流量,提升用户访问速度</li>
</ul>
<p>仓库中保存的内容：Maven工程</p>
<ul>
<li>Maven自身所需的插件</li>
<li>第三方框架或工具的jar包</li>
<li>自己开发的Maven工程</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="6-生命周期"><a href="#6-生命周期" class="headerlink" title="6.生命周期"></a>6.生命周期</h1><blockquote>
<p>1.各个构建环节执行的顺序:不能打乱顺序,必须按照既定的正确顺序来执行</p>
<p>2.Maven的核心程序中定义了抽象的生命周期,生命周期中各个阶段的具体任务是由插件来完成的.</p>
<p>3.Maven的核心程序为了更好的实现自动化构建,按照这一特点执行生命周期中的各个阶段:不论现在要执行生命周期中的哪一个阶段,都是从这个生命周期最初的位置开始执行</p>
<p>4.插件和目标</p>
<p>​    生命周期的各个阶段仅仅定义了要执行的任务是什么.</p>
<p>​    各个阶段和插件的目标是对应的.</p>
<p>​    相似的目标由特定的插件完成</p>
</blockquote>
<h3 id="构建过程的各个环节"><a href="#构建过程的各个环节" class="headerlink" title="构建过程的各个环节"></a>构建过程的各个环节</h3><ol>
<li>清理:将以前编译得到的旧的class字节码文件删除,为下一-次编译做准备</li>
<li>编译:将Java源程序编程成class字节码文件</li>
<li>测试:自动测试，自动调用junit程序</li>
<li>报告:测试程序执行的结果</li>
<li>打包:动态Web_ I程打war包, Java工程打jar包</li>
<li>安装: Maven特定的概念一将打包得到的文件复制到 “仓库”中的指定位置</li>
<li>部署:将动态Web.工程生成的war包复制到Servlet容器的指定目录下,使其可以运行</li>
</ol>
<h1 id="7-继承"><a href="#7-继承" class="headerlink" title="7.继承"></a>7.继承</h1><blockquote>
<p>目的:统一管理各个模块工程中对junit依赖的版本</p>
</blockquote>
<h1 id="8-聚合"><a href="#8-聚合" class="headerlink" title="8.聚合"></a>8.聚合</h1><blockquote>
<p>作用：一键安装各个模块工程</p>
<p>配置方式：在一个”总的聚合工程“中配置各个参与聚合的模块</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置聚合 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 指定各个子工程的相对路径 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">module</span>&gt;</span>../HelloFriend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">module</span>&gt;</span>../MakeFriends<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">module</span>&gt;</span>../Hello<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2021/04/16/MyBatis/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="一-MyBatis的入门案例"><a href="#一-MyBatis的入门案例" class="headerlink" title="一.MyBatis的入门案例"></a>一.MyBatis的入门案例</h1><h2 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1.步骤"></a>1.步骤</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">步骤:</span><br><span class="line">	1.读取配置文件: InputStream inputStream = Resources.getResourceAsStream(&quot;sqlMapperConfig.xml&quot;);</span><br><span class="line">		读取配置文件的时候,一般不用绝对路径和相对路径.</span><br><span class="line">		采用:</span><br><span class="line">			1.使用类加载器.它只能读取类路径的配置文件</span><br><span class="line">			2.使用ServletContext对象的getRealPath()</span><br><span class="line">	2.创建SqlSessionFactory工厂:</span><br><span class="line">		SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">		创建工厂mybatis使用了构建者模式</span><br><span class="line">		构建者模式的优势:</span><br><span class="line">			把对象的创建细节隐藏,使使用者直接调用方法即可拿到对象</span><br><span class="line">	3.创建SqlSession</span><br><span class="line">		生产SqlSession使用了工厂模式</span><br><span class="line">			工厂模式的优势:</span><br><span class="line">				解耦(降低类之间的依赖关系)</span><br><span class="line">	4.创建Dao接口的代理对象</span><br><span class="line">		创建Dao接口实现类使用了代理模式</span><br><span class="line">			代理模式的优势:</span><br><span class="line">				不修改源码的基础上对已有方法增强</span><br><span class="line">	5.执行dao中的方法</span><br><span class="line">	6.释放资源</span><br><span class="line">注意事项:</span><br><span class="line">	不要忘记在映射配置中告知mybatis要封装到哪个实体类中</span><br><span class="line">	配置的方式:指定实体类的全限定类名</span><br></pre></td></tr></table></figure>

<h2 id="2-MyBatis的一些重要对象"><a href="#2-MyBatis的一些重要对象" class="headerlink" title="2.MyBatis的一些重要对象"></a>2.MyBatis的一些重要对象</h2><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><blockquote>
<p>作用:读取主配置信息</p>
</blockquote>
<h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><blockquote>
<p>作用:负责创建SqlSessionFactory对象</p>
</blockquote>
<h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><blockquote>
<p>是接口，创建此对象需要使用更多的资源和时间。</p>
<p>​    作用是创建SqlSession的工厂，就是创建SqlSession对象。</p>
<p>​    DefaultSqlSessionFactory是SqlSessionFactory的实现类</p>
<p>​    SqlSessionFactory中的方法：</p>
<p>​        openSession():获取一个默认的SqlSession对象，默认是需要手动提交事务的</p>
<p>​        openSession(boolean):参数表示是否自动提交事务</p>
<p>​            true:创建一个自动提交事务的SqlSession</p>
<p>​            false:等同于没有参数的openSession()</p>
</blockquote>
<h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><blockquote>
<p>SqlSession是接口</p>
<p>​    作用:提供了大量的执行sql语句的方法</p>
<p>​    DefaultSqlSession是SqlSession的实现类 </p>
</blockquote>
<h1 id="2-OGNL表达式"><a href="#2-OGNL表达式" class="headerlink" title="2.OGNL表达式"></a>2.OGNL表达式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object Graphic Navigation Language</span><br><span class="line">对象     图       导航       语言</span><br><span class="line">他是通过对象的取值方法来获取数据.在写法上把get给省略了</span><br><span class="line">	比如:我们获取用户的名称</span><br><span class="line">		类中的写法:user.getUsername();</span><br><span class="line">		OGNL表达式的写法:user.username</span><br><span class="line">mybatis中为什么能直接写username,而不用user.呢?</span><br><span class="line">	因为在parameterType中已经提供了属性所属的类,所以此时不需要写对象名</span><br></pre></td></tr></table></figure>



<h1 id="3-URL和URI"><a href="#3-URL和URI" class="headerlink" title="3.URL和URI"></a>3.URL和URI</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL:Uniform Resource Locator 统一资源定位符.他是可以唯一定位一个资源的.</span><br><span class="line">	写法:</span><br><span class="line">	http://localhost:8080/maybatis/demo</span><br><span class="line">	协议    主机      端口    URI</span><br><span class="line">URI:Uniform Resource Identifier 统一资源标识符.它是在应用中可以唯一定位一个资源的</span><br></pre></td></tr></table></figure>

<h1 id="4-mybatis中的连接池使用及分析"><a href="#4-mybatis中的连接池使用及分析" class="headerlink" title="4.mybatis中的连接池使用及分析"></a>4.mybatis中的连接池使用及分析</h1><h2 id="1-连接池"><a href="#1-连接池" class="headerlink" title="1.连接池:"></a>1.连接池:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">连接池:</span><br><span class="line">	我们在实际开发中都会使用连接池</span><br><span class="line">	因为它可以减少我们获取连接所消耗的时间</span><br><span class="line">连接池就是用于存储连接的一个容器</span><br><span class="line">	容器其实就是一个集合对象,该集合必须是线程安全的,不能两个线程拿到统一连接</span><br><span class="line">	该集合还必须实现队列的特性:先进先出</span><br></pre></td></tr></table></figure>

<h2 id="2-mybatis中的连接池"><a href="#2-mybatis中的连接池" class="headerlink" title="2.mybatis中的连接池"></a>2.mybatis中的连接池</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis连接池提供了3种方式的配置:</span><br><span class="line">	配置的位置:</span><br><span class="line">		主配置文件SqlMapConfig.xml中的dataSource标签,type属性就是表示采用何种连接池方式.</span><br><span class="line">	type属性的取值:</span><br><span class="line">		POOLED:采用传统的javax.sql.DataSource规范中的连接池,mybatis中有针对规范的实现</span><br><span class="line">		UNPOOLED:采用传统的获取连接的方式,虽然也实现了javax.sql.DataSource接口,但是并没有使用池的思想.</span><br><span class="line">		JNDI:采用服务器提供的JNDI技术实现,来获取DataSource对象,不同的服务器所能拿到DataSource是不一样的</span><br><span class="line">			注意:如果不是web或者maven的war工程,是不能使用的</span><br><span class="line">			</span><br></pre></td></tr></table></figure>

<h1 id="5-mybatis中的事务"><a href="#5-mybatis中的事务" class="headerlink" title="5.mybatis中的事务"></a>5.mybatis中的事务</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.什么是事务?</span><br><span class="line">2.事务的四大特性ACID</span><br><span class="line">3.不考虑隔离性会产生的3个问题</span><br><span class="line">4.解决办法:四种隔离级别</span><br><span class="line"></span><br><span class="line">mybatis是通过Sqlsession对象的commit方法和rollback方法实现事务的提交和回滚</span><br></pre></td></tr></table></figure>

<h1 id="6-mybatis中的延迟加载"><a href="#6-mybatis中的延迟加载" class="headerlink" title="6.mybatis中的延迟加载"></a>6.mybatis中的延迟加载</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是延迟加载?</span><br><span class="line">	在真正使用数据时才发起查询,不用的时候不查询.按需加载</span><br><span class="line">什么是立即加载?</span><br><span class="line">	不管用不用,只要一调用方法,马上发起查询</span><br><span class="line">在对应的四种表关系中:一对多,多对一,一对一,多对多</span><br><span class="line">	一对多,多对多:通常情况下我们都是采用延迟加载</span><br><span class="line">	多对一,一对一: 通常情况下我们都是采用立即加载</span><br></pre></td></tr></table></figure>

<h1 id="7-mybatis中的缓存"><a href="#7-mybatis中的缓存" class="headerlink" title="7.mybatis中的缓存"></a>7.mybatis中的缓存</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">什么是缓存?</span><br><span class="line">	存在于内存中的临时数据</span><br><span class="line">为什么使用缓存</span><br><span class="line">	减少和数据库的交互次数,提高执行效率</span><br><span class="line">什么样的数据使用缓存,什么样的数据不能使用缓存</span><br><span class="line">	适用于缓存:</span><br><span class="line">		经常查询并且不经常改变的</span><br><span class="line">		数据的正确与否对最终结果影响不大的</span><br><span class="line">	不适用于缓存:</span><br><span class="line">		经常改变的数据</span><br><span class="line">		数据的正确与否对最终结果影响很大的</span><br><span class="line">		例如:商品的库存,银行的汇率,股市的牌价</span><br></pre></td></tr></table></figure>

<h2 id="1-mybatis中的一级缓存和二级缓存"><a href="#1-mybatis中的一级缓存和二级缓存" class="headerlink" title="1.mybatis中的一级缓存和二级缓存"></a>1.mybatis中的一级缓存和二级缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">它指的是mybatis中sqlsession对象的缓存</span><br><span class="line">当我们执行查询之后,查询的结果会同时存入到sqlsession为我们提供的一块区域中</span><br><span class="line">该区域的结构是一个Map,当我们再次查询同样的数据,mybatis会先去sqlsession中查询是否有,有的话,直接拿出来用</span><br><span class="line">当sqlsession对象消失时,mybatis的一级缓存也消失了</span><br><span class="line"></span><br><span class="line">清空缓存的方法:</span><br><span class="line">sqlSession.clearCache()</span><br><span class="line"></span><br><span class="line">一级缓存的分析:</span><br><span class="line">	一级缓存SqlSession范围的缓存,当调用SqlSession的修改,添加,删除,commit(),close()等方法时,就会清空一级缓存</span><br></pre></td></tr></table></figure>

<h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">它是指Mybatis中SqlSessionFactory对象的缓存.由同一个SqlSessionFactory对象创建的SqlSession共享其缓存</span><br><span class="line">二级缓存的步骤:</span><br><span class="line">	第一步:让mybatis框架支持二级缓存(在SqlMapConfig.xml中配置)</span><br><span class="line">	第二步:让当前映射文件支持二级缓存(在当前xml中配置)</span><br><span class="line">	第三步:让当前的操作支持二级缓存(在select标签中配置)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2021/04/16/MySQL/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="DBMS-SQL-DB"><a href="#DBMS-SQL-DB" class="headerlink" title="DBMS SQL DB"></a>DBMS SQL DB</h1><h2 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h2><blockquote>
<p>DataBase Management System(数据库管理系统)</p>
<p>常见的有:MySQL Oracle</p>
</blockquote>
<h2 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h2><blockquote>
<p>DataBase(数据库,数据库实际上在硬盘上以文件的形式存在)</p>
</blockquote>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><blockquote>
<p>Structured Query Language(结构化查询语言)</p>
<p>SQL语句在执行的时候,实际上内部会先进行编译,然后再执行</p>
</blockquote>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><blockquote>
<p>DBMS-(执行)-&gt;SQL-(操作)-&gt;DB</p>
</blockquote>
<h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><blockquote>
<p>表:table</p>
<p>table是数据库的基本组成单元,所有的数据都以表格的形式组织,目的是可读性强</p>
<p>一个表包含行和列:</p>
<p>​    行:被称为数据/记录(data)</p>
<p>​    列:被称为字段(column)</p>
<p>每一个字段应该包含哪些属性?</p>
<p>​    字段名、数据类型、相关的约束</p>
</blockquote>
<h1 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="SQL语句的分类"></a>SQL语句的分类</h1><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><blockquote>
<p>Data QueryLanguage(数据查询语言)</p>
<p>查询语句,凡是select语句都是DQL</p>
</blockquote>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><blockquote>
<p>Data Manipulation Language(数据操纵语言)</p>
<p>insert delete update,对表当中的数据进行增删改</p>
</blockquote>
<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><blockquote>
<p>Data Definition Language(数据定义语言)</p>
<p>create drop alter,对表结构的增删改</p>
</blockquote>
<h2 id="TCL"><a href="#TCL" class="headerlink" title="TCL"></a>TCL</h2><blockquote>
<p>Transaction control language（事务控制语言）</p>
<p>commit提交事务 rollback回滚事务</p>
</blockquote>
<h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><blockquote>
<p>数据控制语言</p>
<p>grant授权、revoke撤销权限等</p>
</blockquote>
<h1 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h1><h2 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h2><h3 id="1-连接到本机的MySQL"><a href="#1-连接到本机的MySQL" class="headerlink" title="1.连接到本机的MySQL"></a>1.连接到本机的MySQL</h3><blockquote>
<p>mysql -u root -p 密码</p>
</blockquote>
<h3 id="2-连接到远程主机上的MySQL"><a href="#2-连接到远程主机上的MySQL" class="headerlink" title="2.连接到远程主机上的MySQL"></a>2.连接到远程主机上的MySQL</h3><blockquote>
<p>mysql -h 主机ip地址 -u root -p 密码 </p>
</blockquote>
<h3 id="3-退出MySQL命令"><a href="#3-退出MySQL命令" class="headerlink" title="3.退出MySQL命令"></a>3.退出MySQL命令</h3><blockquote>
<p>exit</p>
</blockquote>
<h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><blockquote>
<p>show databases;</p>
</blockquote>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><blockquote>
<p>create database 数据库名</p>
</blockquote>
<h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><blockquote>
<p>user 数据库名</p>
</blockquote>
<h2 id="查看当前数据库下的表"><a href="#查看当前数据库下的表" class="headerlink" title="查看当前数据库下的表"></a>查看当前数据库下的表</h2><blockquote>
<p>show tables</p>
</blockquote>
<h2 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h2><blockquote>
<p>source sql文件路径</p>
<p>注意：</p>
<p>​    sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。</p>
</blockquote>
<h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><blockquote>
<p>desc 表名;</p>
</blockquote>
<h2 id="查看当前使用的是哪个数据库"><a href="#查看当前使用的是哪个数据库" class="headerlink" title="查看当前使用的是哪个数据库"></a>查看当前使用的是哪个数据库</h2><blockquote>
<p>select database();</p>
</blockquote>
<h2 id="查看mysql的版本号"><a href="#查看mysql的版本号" class="headerlink" title="查看mysql的版本号"></a>查看mysql的版本号</h2><blockquote>
<p>select version();</p>
</blockquote>
<h2 id="结束一条语句"><a href="#结束一条语句" class="headerlink" title="结束一条语句"></a>结束一条语句</h2><blockquote>
<p>\c</p>
</blockquote>
<h2 id="查看创建表的语句"><a href="#查看创建表的语句" class="headerlink" title="查看创建表的语句"></a>查看创建表的语句</h2><blockquote>
<p>show create table 表名</p>
</blockquote>
<h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><h2 id="简单的查询语句（DQL）"><a href="#简单的查询语句（DQL）" class="headerlink" title="简单的查询语句（DQL）"></a>简单的查询语句（DQL）</h2><blockquote>
<p>语法格式:</p>
<p>​    select 字段名1，字段名2，字段名3，字段名4，… from 表名；</p>
<p>注意：</p>
<p>​    1.任何一条sql语句以’;’结尾</p>
<p>​    2.sql语句不区分大小写</p>
</blockquote>
<h3 id="查询员工的年薪"><a href="#查询员工的年薪" class="headerlink" title="查询员工的年薪"></a>查询员工的年薪</h3><blockquote>
<p>select ename,sal * 12 from emp;</p>
<p><strong>注意:</strong></p>
<p>​    字段可以参与数学运算</p>
</blockquote>
<h3 id="给查询结果的列重命名"><a href="#给查询结果的列重命名" class="headerlink" title="给查询结果的列重命名"></a>给查询结果的列重命名</h3><blockquote>
<p>select ename,sal * 12 as yearsal from emp;</p>
<p>别名中有中文:</p>
<p>​    select ename,sal * 12 as ‘年薪’ from emp;</p>
<p><strong>注意：</strong></p>
<p>​    标准sql语句中要求字符串使用单引号括起来。虽然mysql支持双引号，尽量别用。</p>
<p>​    as关键字可以省略</p>
</blockquote>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><blockquote>
<p>语法格式:</p>
<p>​    select 字段1,字段2… from 表名 where 条件;</p>
<p>执行顺序:</p>
<p>​    先from,然后where,最后select</p>
</blockquote>
<h3 id="is-null-和-is-not-null"><a href="#is-null-和-is-not-null" class="headerlink" title="is null 和 is not null"></a>is null 和 is not null</h3><blockquote>
<p>在数据库中，NULL不是一个值，代表什么也没有，为空。</p>
<p>空不是一个值，不能用等号衡量。</p>
<p>必须使用is null或者is not null </p>
</blockquote>
<h3 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h3><blockquote>
<p>%代表任意多个字符，_代表任意一个字符</p>
</blockquote>
<h2 id="排序order-by"><a href="#排序order-by" class="headerlink" title="排序order by"></a>排序order by</h2><blockquote>
<p>默认是升序</p>
<p>asc表示升序</p>
<p>desc表示降序</p>
<p><strong>注意：</strong></p>
<p>​    越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。</p>
</blockquote>
<p>按照工资的降序排列，当工资相同的时候再按照名字的升序排列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> , ename <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><blockquote>
<p>count  计数</p>
<p>sum    求和</p>
<p>avg    平均值</p>
<p>max    最大值</p>
<p>min    最小值</p>
<p><strong>注意：</strong></p>
<p>​    所有的分组函数都是对<strong>某一组</strong>数据进行操作的</p>
<p>​    分组函数自动忽略NULL。</p>
<p>​    只要有NULL参与的运算结果一定是NULL</p>
<p>​    sum函数自动忽略NULL</p>
<p><strong>分组函数不可以直接使用在where子句中</strong></p>
<p>​    因为group by 是在where执行之后执行    </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*找出工资总和？*/</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">/*找出最高工资？*/</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">max</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">/*找出最低工资？*/</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">min</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">/*找出平均工资？*/</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">/*找出总人数？*/</span></span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp;</span><br><span class="line">	<span class="keyword">select</span> <span class="built_in">count</span>(ename) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="ifnull（）"><a href="#ifnull（）" class="headerlink" title="ifnull（）"></a>ifnull（）</h3><blockquote>
<p>ifnull（可能为NULL的数据，被当做什么计算）</p>
<p>属于单行处理函数</p>
</blockquote>
<h3 id="count（-）和count（字段）的区别"><a href="#count（-）和count（字段）的区别" class="headerlink" title="count（*）和count（字段）的区别"></a>count（*）和count（字段）的区别</h3><blockquote>
<p>count(*):统计总记录条数，和字段无关</p>
<p>count（字段）：表示统计字段中不为NULL的数据总数</p>
</blockquote>
<h2 id="group-by和having"><a href="#group-by和having" class="headerlink" title="group by和having"></a>group by和having</h2><blockquote>
<p>group by：按照某个字段或者某些字段进行分组</p>
<p>having：having是对分组之后的数据进行再次过滤</p>
<p><strong>注意：</strong></p>
<p>​    分组函数一般都会和group by联合使用</p>
<p>​    并且任何一个分组函数都是在group by语句执行结束之后才会执行。</p>
<p>​    当一条sql语句没有group by的话，整张表的数据会自成一组。</p>
<p>​    当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。</p>
</blockquote>
<h2 id="DQL语句的执行顺序"><a href="#DQL语句的执行顺序" class="headerlink" title="DQL语句的执行顺序"></a>DQL语句的执行顺序</h2><blockquote>
<p>select               5</p>
<p>​    ..</p>
<p>from                 1</p>
<p>​    ..</p>
<p>where                2</p>
<p>​    ..</p>
<p>group by             3</p>
<p>​    ..</p>
<p>having               4</p>
<p>​    ..</p>
<p>order by             6</p>
<p>​    ..</p>
</blockquote>
<h2 id="去除重复（distinct）"><a href="#去除重复（distinct）" class="headerlink" title="去除重复（distinct）"></a>去除重复（distinct）</h2><blockquote>
<p>distinct前面不能有字段</p>
<p>distinct后面有多个字段，把后面的字段联合起来一起去重</p>
</blockquote>
<h2 id="连接查询的分类"><a href="#连接查询的分类" class="headerlink" title="连接查询的分类"></a>连接查询的分类</h2><blockquote>
<p>内连接 inner join</p>
<p>​    等值连接</p>
<p>​    非等值连接</p>
<p>​    自连接</p>
<p>外连接</p>
<p>​    左外连接（左连接）left outer join</p>
<p>​    右外连接（右连接）right outer join</p>
<p>全连接</p>
</blockquote>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><blockquote>
<p>select语句当中嵌套select语句，被嵌套的select语句是子查询</p>
<p>子查询可以出现在哪里？</p>
<p>​    select</p>
<p>​    …(select)</p>
<p>​    from</p>
<p>​    …(select)</p>
<p>​    where</p>
<p>​    …(select)</p>
</blockquote>
<h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><blockquote>
<p>可以将查询的结果集相加</p>
<p>列的数量必须是一样的</p>
</blockquote>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><blockquote>
<p>limit是mysql特有的，其他数据库中没有，不通用。（Oracle中有一个相同的机制，叫做rownum）</p>
<p>limt取结果集中的部分数据，这是他的作用</p>
<p>语法：</p>
<p>​    limit startIndex，length</p>
<p>​        startIndex：表示起始位置，从0开始，0表示第一条数据。</p>
<p>​        length：表示取几个</p>
<p>每页显示pageSize条记录：</p>
<p>第pageNum页：（pageNum-1）*pageSize ，pageSize</p>
</blockquote>
<h2 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h2><blockquote>
<p>表的复制</p>
<p>​    将查询结果当做表创建出来</p>
<p>​    create table emp1 as select * from emp;</p>
<p>批量插入</p>
<p>​    insert into dept1 select * from dept</p>
</blockquote>
<h2 id="删除大表"><a href="#删除大表" class="headerlink" title="删除大表"></a>删除大表</h2><blockquote>
<p>truncate table 表名;//表被截断，不可回滚，永久丢失</p>
</blockquote>
<h2 id="常见的约束"><a href="#常见的约束" class="headerlink" title="常见的约束"></a>常见的约束</h2><blockquote>
<p>1）not null ：非空约束，保证字段的值不能为空<br>     s_name VARCHAR(10) NOT NULL, #非空</p>
<p>2）default：默认约束，保证字段总会有值，即使没有插入值，都会有默认值！<br>     age INT DEFAULT 18, #默认约束</p>
<p>3）unique：唯一，保证唯一性但是可以为空，比如座位号<br>     s_seat INT UNIQUE,#唯一约束</p>
<p>4）check：检查性约束【MySQL不支持，语法不报错，但无效】<br>     s_sex CHAR(1) CHECK(s_sex=’男’ OR s_sex=’女’),#检查约束(Mysql无效)</p>
<p>5）primary key ：主建约束，同时保证唯一性和非空<br>     id INT PRIMARY KEY,#主建约束（唯一性，非空）</p>
<p>6）foreign key：外键约束，用于限制两个表的关系，保证从表该字段的值来自于主表相关联的字段的值！<br>     teacher_id INT REFERENCES teacher(id)   #这是外键,写在列级,Mysql无效</p>
</blockquote>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><blockquote>
<p>t_student中的classno字段引用t_class表中的cno字段，此时t_student表叫做子表。t_class表叫做父表。</p>
<p>顺序要求：</p>
<p>​    删除数据的时候，先删除子表，再删除父表</p>
<p>​    添加数据的时候，先添加父表，再添加子表</p>
<p>​    创建表的时候，先创建父表，再创建子表</p>
<p>​    删除表的时候，先删除子表，再删除父表</p>
<p><strong>注意：</strong></p>
<p>​    外键值可以为NULL</p>
<p>​    被引用的字段不一定是主键，但至少具有unique约束</p>
</blockquote>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote>
<p>主键和具有unique约束的字段自动会添加索引。</p>
<p>根据主键查询效率较高，尽量根据主键检索。</p>
<p>查看sql语句的执行计划：</p>
<p>​    explain select ename,sal from emp where sal = 5000;</p>
<p>给xx字段添加索引</p>
<p>​    create index 索引名字 on 表名(xx);</p>
<p>删除索引：</p>
<p>​    drop index 索引名 on 表名;</p>
<p>索引什么时候失效？</p>
<p>​    模糊查询的时候，第一个通配符使用的是%，这个时候索引是失效的。</p>
</blockquote>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote>
<p>创建视图</p>
<p>​    create view myview as select empno，ename from emp；</p>
<p>删除视图</p>
<p>​    drop view myview；</p>
<p>注意：</p>
<p>​    只要DQL语句才能以视图对象的方式创建出来。</p>
<p>​    对视图进行增删改查，会影响到原表数据。</p>
<p>作用：</p>
<p>​    视图可以隐藏表的实现细。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/2021/08/12/Promise/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="Promise简介"><a href="#Promise简介" class="headerlink" title="Promise简介"></a>Promise简介</h1><h2 id="1-抽象表达"><a href="#1-抽象表达" class="headerlink" title="1.抽象表达"></a>1.抽象表达</h2><ul>
<li>promise是一门新的技术</li>
<li>promise是JS中进行异步编程的新解决方案(旧方案是单纯使用回调函数)</li>
</ul>
<h2 id="2-具体表达"><a href="#2-具体表达" class="headerlink" title="2.具体表达"></a>2.具体表达</h2><ul>
<li>从语法上来说:Promise是一个构造函数</li>
<li>从功能上来说:Promise对象用来封装一个异步操作并可以获取其成功/失败的结果值</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol>
<li>指定回调函数的方式更加灵活</li>
</ol>
<blockquote>
<p>旧的:必须在启动异步任务前指定</p>
<p>promise:启动异步任务=&gt;返回promise对象=&gt;给promise对象绑定回调函数(甚至可以在异步任务结束后指定多个)</p>
</blockquote>
<ol start="2">
<li>支持链式调用,可以解决回调地狱问题</li>
</ol>
<blockquote>
<p>1.什么是回调地狱?</p>
<p>​    回调函数嵌套调用,外部回调函数异步执行的结果是嵌套的回调执行的条件</p>
<p>2.回调地狱的缺点?</p>
<p>​    不便于阅读,不便于异常处理</p>
<p>3.解决方案?</p>
<p>​    promise链式调用</p>
<p>4.终极解决方案?</p>
<p>​    promise +async/await</p>
</blockquote>
<h2 id="promise的状态改变"><a href="#promise的状态改变" class="headerlink" title="promise的状态改变"></a>promise的状态改变</h2><blockquote>
<p>实例对象中的一个属性: <strong>PromiseState</strong></p>
<p>有三个值,分别是:</p>
<p>pending:未决定的</p>
<p>resolved/fullfilled 成功</p>
<p>rejected 失败</p>
</blockquote>
<ol>
<li>pending变为resolve</li>
<li>pending变为reject</li>
</ol>
<blockquote>
<p>说明:只有这2种,且一个promise对象只能改变一次</p>
<p>无论变为成功还是失败,都会有一个结果数据</p>
<p>成功的结果数据一般称为value,失败的结果数据一般称为reason</p>
</blockquote>
<h2 id="Promise对象的值"><a href="#Promise对象的值" class="headerlink" title="Promise对象的值"></a>Promise对象的值</h2><blockquote>
<p>实例对象的另一个属性 PromiseResult</p>
<p>保存着异步任务<strong>成功/失败</strong>的结果</p>
<p><strong>resolve</strong>,<strong>reject</strong>这两个对象可以对<strong>PromiseResult</strong>进行修改</p>
</blockquote>
<h2 id="Promise的基本流程"><a href="#Promise的基本流程" class="headerlink" title="Promise的基本流程"></a>Promise的基本流程</h2><p><img src="/Promise/Promise%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0_promise%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p>
<h2 id="Promise的使用"><a href="#Promise的使用" class="headerlink" title="Promise的使用"></a>Promise的使用</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ol>
<li>Promise构造函数:Promise(excutor){}<ol>
<li>excutor函数: 执行器(resolve,reject)=&gt;{}</li>
<li>resolve函数:内部定义成功时我们调用的函数 value=&gt;{}</li>
<li>reject函数: 内部定义失败时我们调用的函数 reason=&gt;{}</li>
<li>说明:executor会在Promise内部立即同步调用,异步操作在执行器中执行</li>
</ol>
</li>
<li> Promise.prototype.then方法:(onResolved,onRejected)=&gt;{}</li>
<li>onResolved函数:成功的回调函数(value)=&gt;{}</li>
<li>onRejected函数:失败的回调函数(reason)=&gt;{}</li>
<li>说明:指定用于得到成功value的成功回调和用于得到失败reason的失败回调,返回一个新的promise对象</li>
<li>Promise.prototype.catch方法:(onRejected)=&gt;{}<ol>
<li>onRejected函数:失败的回调函数(reason)=&gt;{}</li>
<li>说明:then()的语法糖,相当于then(undefined,onRejected)</li>
</ol>
</li>
<li>Promise.resolve方法:(value)=&gt;{}<ol>
<li>value:成功的数据或promise对象</li>
<li>说明:返回一个成功的promise对象</li>
</ol>
</li>
<li>Promise.reject方法:(reason)=&gt;{}<ol>
<li>reason:失败的原因</li>
<li>说明:返回一个失败的promise对象</li>
</ol>
</li>
<li>Promise.all方法:(promises)=&gt;{}<ol>
<li>promises:包含n个promise的数组</li>
<li>说明:返回一个新的promise,只有所有的promise都成功才成功,只要有一个失败了就直接失败</li>
</ol>
</li>
<li>Promise.race方法:(promises)=&gt;{}<ol>
<li>promises:包含n个promise的数组</li>
<li>说明:返回一个新的promise,第一个完成的promise的结果状态就是最终的结果状态 </li>
</ol>
</li>
</ol>
<h2 id="Promise的几个关键问题"><a href="#Promise的几个关键问题" class="headerlink" title="Promise的几个关键问题"></a>Promise的几个关键问题</h2><ol>
<li><p>如何改变promise的状态</p>
<ol>
<li>resolve(value):如果当前是pending就会变为resolved</li>
<li>rejected(reason):如果当前是pending就会变为rejected</li>
<li>抛出异常:如果当前是pending就会变为rejected</li>
</ol>
</li>
<li><p>一个promise指定多个成功/失败回调函数,都会调用吗?</p>
<ol>
<li>当promise改变为对应状态时都会调用</li>
</ol>
</li>
<li><p>改变promise状态和指定回调函数谁先谁后?</p>
<ol>
<li>都有可能,正常情况下是先指定回调再改变状态,但也可以先改状态再指定回调</li>
<li>如何先改状态再指定回调?<ol>
<li>在执行器中直接调用resolve()/reject()</li>
<li>延迟更长时间再调用then()</li>
</ol>
</li>
<li>什么时候才能得到数据?<ol>
<li>如果先指定的回调,那当状态发生改变时,回调函数就会调用,得到数据</li>
<li>如果先改变的状态,那当指定回调时,回调函数就会调用,得到数据</li>
</ol>
</li>
</ol>
</li>
<li><p>promise.then()返回的新promise的结果状态由什么决定?</p>
<ol>
<li>简单表达:由then()指定的回调函数执行的结果决定</li>
<li>详细表达:<ol>
<li>如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</li>
<li>如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</li>
<li>如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</li>
</ol>
</li>
</ol>
</li>
<li><p>promise 如何串连多个操作任务?</p>
<ol>
<li>promise 的 then()返回一个新的 promise, 可以开成 then()的链式调用</li>
<li>通过 then 的链式调用串连多个同步/异步任务,这样就能用<code>then()</code>将多个同步或异步操作串联成一个同步队列</li>
</ol>
</li>
<li><p>promise异常穿透</p>
<ol>
<li><p>当使用 promise 的 then 链式调用时, 可以在最后指定失败的回调</p>
</li>
<li><p>前面任何操作出了异常, 都会传到最后失败的回调中处理</p>
<blockquote>
<p> 注:可以在每个then()的第二个回调函数中进行err处理,也可以利用异常穿透特性,到最后用<code>catch</code>去承接统一处理,两者一起用时,前者会生效(因为err已经将其处理,就不会再往下穿透)而走不到后面的catch</p>
</blockquote>
</li>
</ol>
</li>
<li><p>中断promise链</p>
<ol>
<li>当使用promise的then链式调用时,在中间中断,不再调用后面的回调函数</li>
<li>办法:在回调函数中返回一个pending状态的promise对象</li>
</ol>
</li>
</ol>
<h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><h2 id="asyn函数"><a href="#asyn函数" class="headerlink" title="asyn函数"></a>asyn函数</h2><ol>
<li>函数的返回值为promise对象</li>
<li>promise对象的结果由async函数执行的返回值决定</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="comment">//和then的返回规则一样</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">//1.如果返回值是一个非Promise类型的数据</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">//return 111;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">//2.如果返回的是一个Promise对象</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// return new Promise((resolve,reject)=&gt;&#123;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 	//resolve(&quot;success&quot;);</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// 	reject(&quot;error&quot;);</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">//3.抛出异常</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">throw</span> <span class="string">&quot;错误&quot;</span>;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">let</span> result = main();</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h2><ol>
<li>await右侧的表达式一般为promise对象,但也可以是其他的值</li>
<li>如果表达式是promise对象,await返回的是promise成功的值</li>
<li>如果表达式是其他值,直接将此值作为await的返回值</li>
</ol>
<p><strong>注意:</strong></p>
<ol>
<li>await必须写在async函数中,但async函数中可以没有await</li>
<li>如果await的promise失败了,就会抛出异常,需要通过try…catch捕获处理</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// resolve(&quot;OK&quot;);</span></span></span><br><span class="line"><span class="javascript">					reject(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="javascript">				&#125;);</span></span><br><span class="line"><span class="javascript">				<span class="comment">//1.右侧为Promise的情况</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// let res = await p;</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">//2.右侧为其他类型的数据</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">// let res2 = await 20;</span></span></span><br><span class="line"><span class="javascript">				</span></span><br><span class="line"><span class="javascript">				<span class="comment">//3.如果promise是失败的状态</span></span></span><br><span class="line"><span class="javascript">				<span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">let</span> res3 = <span class="keyword">await</span> p;</span></span><br><span class="line"><span class="javascript">				&#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">			main();</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>XML</title>
    <url>/2021/04/16/XML/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h3 id="一-概念"><a href="#一-概念" class="headerlink" title="一.概念"></a>一.概念</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">概念:Extensible Markup Language 可扩展标记语言</span><br><span class="line">	可扩展:标签都是自定义的</span><br></pre></td></tr></table></figure>

<h4 id="1-功能"><a href="#1-功能" class="headerlink" title="1.功能"></a>1.功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存储数据</span><br><span class="line">	1.配置文件</span><br><span class="line">	2.在网络中传输</span><br></pre></td></tr></table></figure>

<h4 id="2-XML和HTML的区别"><a href="#2-XML和HTML的区别" class="headerlink" title="2.XML和HTML的区别"></a>2.XML和HTML的区别</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.xml标签都是自定义的,html标签都是预定义.</span><br><span class="line">2.xml语法严格,html语法松散</span><br><span class="line">3.xml是存储数据的,html是展示数据的</span><br></pre></td></tr></table></figure>

<h3 id="二-语法"><a href="#二-语法" class="headerlink" title="二.语法"></a>二.语法</h3><h4 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.xml文档的后缀名 .xml</span><br><span class="line">2.xml第一行必须定义为文档声明</span><br><span class="line">3.xml文档中有且仅有一个根标签</span><br><span class="line">4.属性值必须使用引号(单双都可)引起来</span><br><span class="line">5.标签必须正确关闭</span><br><span class="line">6.xml标签名称区分大小写</span><br></pre></td></tr></table></figure>

<h4 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-组成部分"><a href="#3-组成部分" class="headerlink" title="3.组成部分"></a>3.组成部分</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.文档声明</span><br><span class="line">	1.格式:&lt;?xml 属性列表?&gt;</span><br><span class="line">	2.属性列表:</span><br><span class="line">		version:版本号(必须的属性)</span><br><span class="line">		encoding:编码方式.告知解析引擎当前文档使用的字符集,默认值:ISO-8859-1</span><br><span class="line">		standalone:是否独立</span><br><span class="line">			取值:</span><br><span class="line">				yes:不依赖其他文件</span><br><span class="line">				no:依赖其他文件</span><br><span class="line">2.指令(了解):结合css</span><br><span class="line">3.标签:标签名称自定义的</span><br><span class="line">	  规则:</span><br><span class="line">	    1.名称可以包含字母、数字以及其他的字符</span><br><span class="line">	  	1.名称不能以数字或者标点符号开始</span><br><span class="line">	  	2.名称不能以字母 xml(或者XML、Xml等等)开始</span><br><span class="line">	  	3.名称不能包含空格</span><br><span class="line">4.属性:</span><br><span class="line">	id属性值唯一</span><br><span class="line">5.文本:</span><br><span class="line">	CDATA区:在该区域中的数据会被原样展示</span><br><span class="line">		格式:&lt;![CDATA[</span><br><span class="line">			要写的数据</span><br><span class="line">		]]&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-约束"><a href="#4-约束" class="headerlink" title="4.约束"></a>4.约束</h4><p><strong>概念</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">概念:规定xml文档的书写规则</span><br><span class="line">	作为框架的使用着(程序员):</span><br><span class="line">		1.能够在xml中引入约束文档</span><br><span class="line">		2.能够简单的读懂约束文档</span><br></pre></td></tr></table></figure>

<p><strong>分类</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.DTD:一种简单的约束技术</span><br><span class="line">2.Schema:一种复杂的约束技术</span><br></pre></td></tr></table></figure>

<h5 id="1-DTD"><a href="#1-DTD" class="headerlink" title="1.DTD:"></a>1.DTD:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.引入dtd文档到xml文档中</span><br><span class="line">	内部dtd:将约束规则定义在xml文件中</span><br><span class="line">	外部dtd:将约束的规则定义在外部的dtd文件中</span><br><span class="line">		本地:&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</span><br><span class="line">		网络:&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名&quot; &quot;dtd文件的位置(URL)&quot;&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-schema-了解"><a href="#2-schema-了解" class="headerlink" title="2.schema(了解)"></a>2.schema(了解)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.填写xml文档的根元素</span><br><span class="line">2.引入xsi前缀.</span><br><span class="line">3.引入xsd文件约束声明一个前缀,作为标识</span><br></pre></td></tr></table></figure>

<h4 id="5-解析"><a href="#5-解析" class="headerlink" title="5.解析"></a>5.解析</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">解析:操作xml文档,将文档中的数据读取到内存中</span><br></pre></td></tr></table></figure>

<h5 id="1-操作xml文档"><a href="#1-操作xml文档" class="headerlink" title="1.操作xml文档"></a>1.操作xml文档</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.解析:将文档中的数据读取到内存中</span><br><span class="line">2.写入:将内存中的数据保存到xml文档中.持久化的存储</span><br></pre></td></tr></table></figure>

<h5 id="2-解析xml的方式"><a href="#2-解析xml的方式" class="headerlink" title="2.解析xml的方式"></a>2.解析xml的方式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.DOM:将标记语言文档一次性加载进内存,在内存中形成一颗dom树</span><br><span class="line">	优点:操作方便,可以对文档进行CRUD的所有操作</span><br><span class="line">	缺点:占内存</span><br><span class="line">2.SAX:逐行读取,基于事件驱动的</span><br><span class="line">	优点:不占内存.</span><br><span class="line">	缺点:只能读取.不能增删改</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-xml常见的解析器"><a href="#3-xml常见的解析器" class="headerlink" title="3.xml常见的解析器"></a>3.xml常见的解析器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.JAXP:sun公司提高的解析器,支持dom和sax两种思想</span><br><span class="line">2.DOM4J:一款非常优秀的解析器</span><br><span class="line">3.Jsoup:jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span><br><span class="line">4.PULL:Android操作系统内置的解析器,sax方式的</span><br></pre></td></tr></table></figure>

<h5 id="4-Jsoup"><a href="#4-Jsoup" class="headerlink" title="4.Jsoup"></a>4.Jsoup</h5><p><strong>快速入门</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">步骤:</span><br><span class="line">	1.导入jar包</span><br><span class="line">	2.获取document对象</span><br><span class="line">	3.获取对应的标签Element对象</span><br><span class="line">	4.获取数据</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jsoup</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象,根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2.1获取user.xml的path</span></span><br><span class="line">        String path = JsoupDemo01.class.getClassLoader().getResource(<span class="string">&quot;user.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档,加载文档进内存,获取dom树-----&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取对应的标签Element对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//打印元素集合的长度</span></span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String text = element.text();</span><br><span class="line">        System.out.println(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对象的使用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Jsoup:工具类,可以解析html或xml文档,返回Document</span><br><span class="line">	parse:解析html或xml文档,返回Document</span><br><span class="line">        1.static Document parse (File in, String charsetName) //解析xml或html文件</span><br><span class="line">        2.static Document parse (String html) //解析xml或html字符串</span><br><span class="line">        3.static Document parse (URL url, int timeoutMillis) 通过网络路径获取指定的html或xml的文档对象</span><br><span class="line">2.Document:文档对象.代表内存中的dom树</span><br><span class="line">	获取Element对象</span><br><span class="line">		1.getElementById(String id):根据id属性值获取唯一的element对象</span><br><span class="line">		2.getElementsByTag(String tagName):根据标签名称获取元素对象集合</span><br><span class="line">		3.getElementsByAttribute(String key):根据属性名称获取元素对象集合</span><br><span class="line">		4.getElementsByAttributeValue(String key,String value):根据对应的属性名和属性值获取元素对象集合</span><br><span class="line">3.Elements:元素Element对象的集合.可以当作ArrayList&lt;Element&gt;使用</span><br><span class="line">4.Element:元素对象</span><br><span class="line">	1.获取子元素对象</span><br><span class="line">		1.getElementById(String id):根据id属性值获取唯一的element对象</span><br><span class="line">		2.getElementsByTag(String tagName):根据标签名称获取元素对象集合</span><br><span class="line">		3.getElementsByAttribute(String key):根据属性名称获取元素对象集合</span><br><span class="line">		4.getElementsByAttributeValue(String key,String value):根据对应的属性名和属性值获取元素对象集合</span><br><span class="line">	2.获取属性值</span><br><span class="line">		String attr(String key):根据属性名称获取属性值</span><br><span class="line">	3.获取文本内容</span><br><span class="line">		String text():获取文本内容</span><br><span class="line">		String html():获取标签体的所有内容(包括子标签的字符串内容)</span><br><span class="line">5.Node:节点对象</span><br><span class="line">	是Doculent和Element的父类</span><br></pre></td></tr></table></figure>

<p><strong>快捷查询方式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.selector:选择器</span><br><span class="line">	使用的方法:Elements select(String cssQuery)</span><br><span class="line">		语法:参考Selector类中定义的语法</span><br><span class="line">2.Xpath:XPath即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。</span><br><span class="line">	使用Jsoup的Xpath需要额外导入jar包</span><br><span class="line">	查询w3cShcool参考手册,使用xpath的语法完成查询</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2021/06/01/git/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h2 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h2><h3 id="常见的版本控制工具"><a href="#常见的版本控制工具" class="headerlink" title="常见的版本控制工具"></a>常见的版本控制工具</h3><ul>
<li><strong>Git</strong></li>
<li> <strong>SVN</strong></li>
<li><strong>CVS</strong></li>
<li><strong>VSS</strong></li>
<li><strong>TFS</strong></li>
<li>Visul Studio Online</li>
</ul>
<h3 id="版本控制分类"><a href="#版本控制分类" class="headerlink" title="版本控制分类"></a>版本控制分类</h3><h4 id="本地版本控制"><a href="#本地版本控制" class="headerlink" title="本地版本控制"></a>本地版本控制</h4><blockquote>
<p> 其中最流行的一种叫做 RCS，现今许多计算机系统上都还看得到它的踪影。甚至在流行的 Mac OS X 系统上安装了开发者工具包之后，也可以使用 rcs 命令。它的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。</p>
<p>缺点:开发者不能在不同系统的上协同工作</p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png"></p>
<h4 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h4><blockquote>
<p>集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）.这类系统，诸如SVN、 CVS、Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</p>
<p>缺点:如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据——包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png"></p>
<h4 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h4><blockquote>
<p>分布式版本控制系统（Distributed Version Control System，简称 DVCS）.在这类系统中，像 Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/%E9%9B%86%E4%B8%AD%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.png"></p>
<h3 id="Git与SVN最主要区别"><a href="#Git与SVN最主要区别" class="headerlink" title="Git与SVN最主要区别"></a>Git与SVN最主要区别</h3><blockquote>
<p>​    SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>
<p>​    Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网，因为版本都在自己的电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p>
<p>​    Git是目前世界上最先进的分布式版本控制系统</p>
</blockquote>
<h2 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h2><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p>可以使用淘宝镜像快速下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p>
<p>安装：一直点下一步即可。</p>
<h3 id="启动Git"><a href="#启动Git" class="headerlink" title="启动Git"></a>启动Git</h3><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p>
<ul>
<li><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</li>
<li><strong>Git CMD：</strong>Windows风格的命令行</li>
<li><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</li>
</ul>
<h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><p>所有的配置文件，其实都保存在本地！</p>
<p><strong>查看配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>

<p><strong>查看系统config</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --system --list</span><br></pre></td></tr></table></figure>

<p><strong>查看当前用户（global）配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global  --list</span><br></pre></td></tr></table></figure>

<p><strong>Git相关的配置文件</strong></p>
<ol>
<li>Git\etc\gitconfig  ：Git 安装目录下的 gitconfig   –system 系统级</li>
<li>C:\Users\Administrator\ .gitconfig   只适用于当前登录用户的配置  –global 全局</li>
</ol>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/.gitconfig.png"></p>
<p>这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p>
<p><strong>==设置用户名与邮箱（用户标识，必要）==</strong></p>
<p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;kuangshen&quot;  #名称</span><br><span class="line">git config --global user.email 24736743@qq.com   #邮箱</span><br></pre></td></tr></table></figure>

<p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p>
<h2 id="Git基本理论（核心）"><a href="#Git基本理论（核心）" class="headerlink" title="Git基本理论（核心）"></a>Git基本理论（核心）</h2><h3 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h3><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/git%E4%B8%89%E4%B8%AA%E5%8C%BA%E5%9F%9F.png"></p>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方</li>
<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/git%E6%A0%B8%E5%BF%83.png"></p>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>
</ul>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>git的工作流程一般是这样的：</p>
<ol>
<li>在工作目录中添加、修改文件；</li>
<li>将需要进行版本管理的文件放入暂存区域；</li>
<li>将暂存区域的文件提交到git仓库。</li>
</ol>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/git.png"></p>
<h3 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h3><h4 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h4><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p>日常使用只要记住下图6个命令：</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/git%E5%B8%B8%E7%94%A86%E4%B8%AA%E5%91%BD%E4%BB%A4.png">    </p>
<h4 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h4><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>
<ol>
<li><p>创建全新的仓库，需要用GIT管理的项目的根目录执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p>
</li>
</ol>
<h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><ol>
<li><p>另一种方式是克隆远程目录，是将远程服务器上的仓库完全镜像一份至本地！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h3><h4 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a>文件的四种状态</h4><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h4 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h4><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git add .                  添加所有文件到暂存区</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git commit -m <span class="string">&quot;消息内容&quot;</span>    提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br></pre></td></tr></table></figure>

<h4 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h4><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等。在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span><br><span class="line">!lib.txt     #但lib.txt除外</span><br><span class="line">/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp</span><br><span class="line">build/       #忽略build/目录下的所有文件</span><br><span class="line">doc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><br></pre></td></tr></table></figure>

<h2 id="IDEA提交项目到Gitee-码云"><a href="#IDEA提交项目到Gitee-码云" class="headerlink" title="IDEA提交项目到Gitee(码云)"></a>IDEA提交项目到Gitee(码云)</h2><p>首先需要在gitee上创建一个仓库.</p>
<p>IDEA提交项目到Gitee有两种操作,一种是图形化操作,一种是命令行操作</p>
<h3 id="图形化操作"><a href="#图形化操作" class="headerlink" title="图形化操作"></a>图形化操作</h3><h4 id="1-创建本地git仓库"><a href="#1-创建本地git仓库" class="headerlink" title="1.创建本地git仓库"></a>1.创建本地git仓库</h4><p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee1.png"></p>
<p>​    <strong>默认选择当前项目</strong></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee2.png"></p>
<p>​    <strong>完成之后,VCS会变成Git</strong></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee3.png"></p>
<h4 id="2-添加远程仓库地址"><a href="#2-添加远程仓库地址" class="headerlink" title="2.添加远程仓库地址"></a>2.添加远程仓库地址</h4><p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee4.png"></p>
<p><strong>复制在gitee上创建的仓库的地址</strong></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee5.png"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee6.png"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee7.png"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee8.png"></p>
<h4 id="3-将远端的文件pull到本地仓库"><a href="#3-将远端的文件pull到本地仓库" class="headerlink" title="3.将远端的文件pull到本地仓库"></a>3.将远端的文件pull到本地仓库</h4><p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee9.png"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee10.png"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee11.png"></p>
<h4 id="4-刷新idea项目"><a href="#4-刷新idea项目" class="headerlink" title="4.刷新idea项目"></a>4.刷新idea项目</h4><p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee12.png"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee13.png"></p>
<h4 id="5-将项目添加到暂存区"><a href="#5-将项目添加到暂存区" class="headerlink" title="5.将项目添加到暂存区"></a>5.将项目添加到暂存区</h4><p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee14.png"></p>
<h4 id="6-将项目提交到本地仓库"><a href="#6-将项目提交到本地仓库" class="headerlink" title="6.将项目提交到本地仓库"></a>6.将项目提交到本地仓库</h4><p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee15.png"></p>
<p>​    <img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee16.png"></p>
<h4 id="7-将项目推送到远端"><a href="#7-将项目推送到远端" class="headerlink" title="7.将项目推送到远端"></a>7.将项目推送到远端</h4><p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee17.png"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee18.png"></p>
<h4 id="8-刷新gitee仓库"><a href="#8-刷新gitee仓库" class="headerlink" title="8.刷新gitee仓库"></a>8.刷新gitee仓库</h4><p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-gitee19.png"></p>
<p>然后就能看到推送到远端的文件了。</p>
<h3 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h3><p><strong>在idea底部选择Terminal</strong></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/git/idea%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0gitee/idea-%E5%91%BD%E4%BB%A4%E8%A1%8C.png"></p>
<p><strong>依次执行一下命令即可</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">初始化Git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash">和远端仓库建立连接</span></span><br><span class="line">git remote add origin #远程仓库地址</span><br><span class="line"><span class="meta">#</span><span class="bash">将远程仓库的文件拉到本地</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="meta">#</span><span class="bash">将项目的文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash">将添加到暂存区的文件提交到本地仓库</span></span><br><span class="line">git commit -m &quot;提交的信息&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">将本地仓库推送到远端仓库</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="GIT分支"><a href="#GIT分支" class="headerlink" title="GIT分支"></a>GIT分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p>
<h3 id="git分支中常用指令："><a href="#git分支中常用指令：" class="headerlink" title="git分支中常用指令："></a>git分支中常用指令：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure>

<p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</p>
<p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>
<p>详细信息请看:<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B">https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B</a></p>
]]></content>
      <categories>
        <category>版本控制工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>layer</title>
    <url>/2021/05/20/layer/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="layer"><a href="#layer" class="headerlink" title="layer"></a>layer</h1><h3 id="layer更改皮肤"><a href="#layer更改皮肤" class="headerlink" title="layer更改皮肤"></a>layer更改皮肤</h3><h4 id="1-完善layer-css"><a href="#1-完善layer-css" class="headerlink" title="1.完善layer.css"></a>1.完善layer.css</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.layui_layer_danger</span> <span class="selector-class">.layui-layer-title</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#c9302c</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">border</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.layui_layer_danger</span> <span class="selector-class">.layui-layer-btn</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#c9302c</span>;</span><br><span class="line">	<span class="attribute">border-color</span>: <span class="number">#ac2925</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-class">.layui_layer_danger</span> <span class="selector-class">.layui-layer-btn</span> <span class="selector-class">.layui-layer-btn1</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#c9302c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上面的css样式格式是固定的</span><br><span class="line">body+空格+自定义的class名+需要修改的弹出层部分的class</span><br></pre></td></tr></table></figure>

<h4 id="2-使用自定义的样式"><a href="#2-使用自定义的样式" class="headerlink" title="2.使用自定义的样式"></a>2.使用自定义的样式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#btn&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		layer.alert(<span class="string">&#x27;是否删除该用户&#x27;</span>, &#123;</span><br><span class="line">			<span class="attr">skin</span>: <span class="string">&#x27;layui_layer_danger&#x27;</span> <span class="comment">//样式类名  自定义样式</span></span><br><span class="line">				,</span><br><span class="line">			<span class="attr">closeBtn</span>: <span class="number">1</span> <span class="comment">// 是否显示关闭按钮</span></span><br><span class="line">				,</span><br><span class="line">			<span class="attr">anim</span>: <span class="number">4</span> <span class="comment">//动画类型</span></span><br><span class="line">				,</span><br><span class="line">			<span class="attr">btn</span>: [<span class="string">&#x27;确认&#x27;</span>] <span class="comment">//按钮</span></span><br><span class="line">				,</span><br><span class="line">			<span class="attr">icon</span>: <span class="number">5</span> <span class="comment">// icon</span></span><br><span class="line">				,</span><br><span class="line">			<span class="attr">title</span>: <span class="string">&quot;删除信息&quot;</span>,<span class="comment">//标题</span></span><br><span class="line">			<span class="attr">yes</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				layer.msg(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>layer</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown常用语法</title>
    <url>/2020/01/17/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><p>建立一个1级标题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 建立一个1级标题</span><br><span class="line">建立一个2级标题：</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 建立一个2级标题</span><br></pre></td></tr></table></figure>
<p>建立一个3级标题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 建立一个3级标题</span><br></pre></td></tr></table></figure>
<p>最多五级标题</p>
<h1 id="2-建立一个超链接"><a href="#2-建立一个超链接" class="headerlink" title="2.建立一个超链接"></a>2.建立一个超链接</h1><p><a href="">超链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[超链接名字](地址)</span><br></pre></td></tr></table></figure>
<h1 id="3-建立标签"><a href="#3-建立标签" class="headerlink" title="3. 建立标签"></a>3. 建立标签</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">-first</span><br><span class="line">-essay</span><br><span class="line">-picture</span><br></pre></td></tr></table></figure>
<h1 id="4-代码块"><a href="#4-代码块" class="headerlink" title="4.代码块"></a>4.代码块</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先写三个“~~~”带一个空格，后面写语言类型例如c++</span><br><span class="line">再写三个“~~~”</span><br></pre></td></tr></table></figure>
<h1 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](图片地址)</span><br></pre></td></tr></table></figure>
<h1 id="6-音乐"><a href="#6-音乐" class="headerlink" title="6.音乐"></a>6.音乐</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;audio id=&quot;audio&quot; autoplay=&quot;autoplay&quot;&gt;</span><br><span class="line">    &lt;source src=&quot;http://qzone.haoduoge.com/music1/2015-04-23/1429774382.mp3&quot; type=&quot;audio/mp3&quot;&gt;&lt;/source&gt;</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure>
<h1 id="7-字体-颜色"><a href="#7-字体-颜色" class="headerlink" title="7.字体+颜色"></a>7.字体+颜色</h1><p><strong>粗体</strong></p>
<p><em>斜体</em></p>
<p><em><strong>粗斜体</strong></em></p>
<p><del>带删除线</del></p>
<p>1^12^</p>
<p>1<del>12</del></p>
<p>==高亮==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">粗体 **粗体**</span><br><span class="line">斜体 *斜体*</span><br><span class="line">粗体加斜体 ***粗体加斜体***</span><br><span class="line">带删除线 ~~带删除线~~</span><br><span class="line">上标 ^12^</span><br><span class="line">下标 ~12~</span><br><span class="line">==高亮==</span><br></pre></td></tr></table></figure>


<h1 id="8-回车-空格"><a href="#8-回车-空格" class="headerlink" title="8.回车+空格"></a>8.回车+空格</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空格&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">回车&lt;br/&gt; &lt;br/&gt;</span><br></pre></td></tr></table></figure>
<h1 id="9-折叠"><a href="#9-折叠" class="headerlink" title="9.折叠"></a>9.折叠</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">  &lt;summary&gt;&lt;font color=darkred&gt;标题&lt;/font&gt;&lt;/summary&gt;</span><br><span class="line">  被折叠内容</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>
<h1 id="10-页面内跳转"><a href="#10-页面内跳转" class="headerlink" title="10.页面内跳转"></a>10.页面内跳转</h1><p>页面内跳转由两部分组成：<br>跳转标识（mark）：在你想跳转到的地方放一个标识，后面就会跳到这里来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;Mark&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>跳转命令：点击就会跳转到对应的标识</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[返回目录](#Mark)</span><br></pre></td></tr></table></figure>
<h1 id="11-文章省略"><a href="#11-文章省略" class="headerlink" title="11.文章省略"></a>11.文章省略</h1><p>这里是为了不再博客主页面把每一个文章全部显示出来<br>在文章中间插入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
<h1 id="12-引用"><a href="#12-引用" class="headerlink" title="12.引用"></a>12.引用</h1><blockquote>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;+空格</span><br></pre></td></tr></table></figure>

<h1 id="13-分割线"><a href="#13-分割线" class="headerlink" title="13.分割线"></a>13.分割线</h1><hr>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- 或 ***</span><br></pre></td></tr></table></figure>

<h1 id="14-列表"><a href="#14-列表" class="headerlink" title="14.列表"></a>14.列表</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有序列表 1.+空格</span><br></pre></td></tr></table></figure>

<ol>
<li>a</li>
<li>b</li>
<li>c</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无序列表 - +空格</span><br></pre></td></tr></table></figure>

<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
<h1 id="15-流程图"><a href="#15-流程图" class="headerlink" title="15.流程图"></a>15.流程图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>

<h1 id="16-脚注"><a href="#16-脚注" class="headerlink" title="16.脚注"></a>16.脚注</h1><p>[^脚注 ]:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[^脚注]</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>从零搭建博客</title>
    <url>/2020/01/16/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h1><h2 id="1-1安装github"><a href="#1-1安装github" class="headerlink" title="1.1安装github"></a>1.1安装github</h2><p>官网下载<a target = "_blank" href="https://git-scm.com/">DownLoad Git</a><br>国内镜像<a target = "_blank" href="https://npm.taobao.org/mirrors/git-for-windows/">DownLoad Git</a><br>安装就一直点下一步就好了</p>
<h2 id="1-2安装node-js"><a href="#1-2安装node-js" class="headerlink" title="1.2安装node.js"></a>1.2安装node.js</h2><p>Hexo是基于nodejs编写的，所以需要安装一下nodeJs和里面的npm工具<br>官网下载<a target = "_blank" target = "_blank" href="https://nodejs.org/en/download/">nodeJS</a><br>windows：nodejs选择LTS版本就行了，然后安装就一直点下一步就好了<br>windows在git安装完后，就可以直接使用git bash来敲命令行</p>
<h2 id="1-3安装hexo"><a href="#1-3安装hexo" class="headerlink" title="1.3安装hexo"></a>1.3安装hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）<br>输入命令<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org #用淘宝的npm下载</span><br><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><br> 用hexo -v来检查是否安装成功<br> 接下来初始化一下hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>新建完成之后，指定文件夹目录下面有</p>
<ul>
<li>node_modules: 依赖包</li>
<li>public：存放生成的页面</li>
<li>scaffolds：生成文章的一些模板</li>
<li>source：用来存放你的文章</li>
<li>themes：主题</li>
<li>_config.yml: 博客的配置文件**<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</li>
</ul>
<h1 id="2-GitHub创建个人仓库"><a href="#2-GitHub创建个人仓库" class="headerlink" title="2.GitHub创建个人仓库"></a>2.GitHub创建个人仓库</h1><p>首先，你先要有一个GitHub账户，去注册一个吧。<br>注册完登录后，在GitHub.com中看到一个New repository，新建仓库<br>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名</p>
<h2 id="点击create-repository。"><a href="#点击create-repository。" class="headerlink" title="点击create repository。"></a>点击create repository。</h2><h1 id="3-生成SSH添加到GitHub"><a href="#3-生成SSH添加到GitHub" class="headerlink" title="3.生成SSH添加到GitHub"></a>3.生成SSH添加到GitHub</h1><p>回到你的git bash中，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>然后创建SSH,一路回车</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。<br>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。<br>在gitbash中，查看是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h1 id="4-将hexo部署到GitHub"><a href="#4-将hexo部署到GitHub" class="headerlink" title="4.将hexo部署到GitHub"></a>4.将hexo部署到GitHub</h1><p>这一步，我们连起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置_config.yml，翻到最后，修改为YourgithubName就是你的GitHub账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git   #github</span><br><span class="line">        https://e.coding.net/YourCodingName/ProjectName/ProjectName.git #coding</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写<br>注意deploy时可能要你输入username和password。</p>
<p>得到下图就证明你成功了！</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-success.jpg"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>问题和解决方法</title>
    <url>/2021/04/25/%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h3 id="1-SpringMVC跨服务器上传图片"><a href="#1-SpringMVC跨服务器上传图片" class="headerlink" title="1.SpringMVC跨服务器上传图片"></a>1.SpringMVC跨服务器上传图片</h3><h4 id="1-问题-浏览器报错409"><a href="#1-问题-浏览器报错409" class="headerlink" title="1.问题:浏览器报错409"></a>1.问题:浏览器报错409</h4><p><strong>描述</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.sun.jersey.api.client.UniformInterfaceException: PUT http://localhost:9090/springmvc_fileuploadserver_war_exploded/uploads/8f5e83243c6a4a3bb5f89bc53546a7cc_tx3.jpg returned a response status of 409 Conflict</span><br></pre></td></tr></table></figure>

<p><strong>解决</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在target目录下的服务器目录下创建uploads目录</span><br></pre></td></tr></table></figure>

<h4 id="2-问题-浏览器报错400"><a href="#2-问题-浏览器报错400" class="headerlink" title="2.问题:浏览器报错400"></a>2.问题:浏览器报错400</h4><p><strong>描述</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.sun.jersey.api.client.UniformInterfaceException: PUT http://localhost:9090/springmvc_fileuploadserver_war_exploded/uploads/b9d93562dc164ea6a07db990c5f91914_堆.png returned a response status of 400 Bad Request</span><br></pre></td></tr></table></figure>

<p><strong>解决</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原因:图片名称带有中文</span><br><span class="line"></span><br><span class="line">filename = URLEncoder.encode(filename,&quot;utf-8&quot;);</span><br></pre></td></tr></table></figure>

<h4 id="3-问题-浏览器报错404"><a href="#3-问题-浏览器报错404" class="headerlink" title="3.问题:浏览器报错404"></a>3.问题:浏览器报错404</h4><p><strong>描述</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.sun.jersey.api.client.UniformInterfaceException：404</span><br></pre></td></tr></table></figure>

<p><strong>解决</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.找到tomcat的安装目录</span><br><span class="line">2.找到conf文件夹下的web.xml</span><br><span class="line">3.在如图所示添加以下代码</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">　　	&lt;param-name&gt;readonly&lt;/param-name&gt;</span><br><span class="line">　　	&lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">&lt;/init-param&gt;</span><br></pre></td></tr></table></figure>

<p><strong>如图所示</strong></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/tomcat_conf_web%E7%9A%84%E4%BF%AE%E6%94%B9.png"></p>
<h3 id="2-VScode"><a href="#2-VScode" class="headerlink" title="2.VScode"></a>2.VScode</h3><h4 id="1-使用nodemon插件报错"><a href="#1-使用nodemon插件报错" class="headerlink" title="1.使用nodemon插件报错"></a>1.使用nodemon插件报错</h4><p><strong>问题</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nodemon : 无法加载文件 C:\Users\*****\AppData\Roaming\npm\nodemon.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br></pre></td></tr></table></figure>

<p><strong>解决</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">管理员身份打开windows powerShell</span><br><span class="line">输入</span><br><span class="line">Set-ExecutionPolicy RemoteSigned</span><br><span class="line">再输入Y</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>solution</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2021/04/12/Servlet/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h3 id="一-概念"><a href="#一-概念" class="headerlink" title="一.概念"></a>一.概念</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">运行在服务器端的小程序</span><br><span class="line">Servlet就是一个接口,定义了Java类被浏览器访问到(Tomcat识别)的规则</span><br><span class="line">将来我们自定义一个类,实现Servlet接口,复写方法</span><br></pre></td></tr></table></figure>

<h3 id="二-快速入门"><a href="#二-快速入门" class="headerlink" title="二.快速入门"></a>二.快速入门</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.创建javaEE项目</span><br><span class="line">2.定义一个类,实现Servlet接口 //public class Demo implements Servlet</span><br><span class="line">3.实现接口中的抽象方法</span><br><span class="line">4.配置Servlet</span><br><span class="line">在web.xml中配置</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.company.Demo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-执行原理"><a href="#1-执行原理" class="headerlink" title="1.执行原理"></a>1.执行原理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.当服务器接受到客户端浏览器的请求后,会解析请求URL路径,获取访问的Servlet的资源路径</span><br><span class="line">2.查找web.xml文件,是否有对应的&lt;url-pattern&gt;标签体内容</span><br><span class="line">3.如果有,则在找到对应的&lt;servlet-class&gt;全类名</span><br><span class="line">4.tomcat会将字节码文件加载进内存,并且创建其对象</span><br><span class="line">5.调用方法</span><br></pre></td></tr></table></figure>

<h4 id="2-Servlet中的生命周期"><a href="#2-Servlet中的生命周期" class="headerlink" title="2.Servlet中的生命周期"></a>2.Servlet中的生命周期</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.被创建:执行init方法,只执行一次(说明Servlet在内存中只存在一个对象,Servlet是单例的)</span><br><span class="line">	Servlet什么时候被创建?</span><br><span class="line">		默认情况下,第一次被访问时,Servlet被创建</span><br><span class="line">		可以配置执行Servlet的创建时机</span><br><span class="line">		在&lt;servlet&gt;标签下配置</span><br><span class="line">			1.第一次被访问时,创建&lt;load-on-startup&gt;的值为负数</span><br><span class="line">			2.在服务器启动时,创建&lt;load-on-startup&gt;的值为0或者正数</span><br><span class="line">2.提供服务:执行service方法,执行多次</span><br><span class="line">	每次访问Servelt时,Service方法都会被调用一次</span><br><span class="line">3.被销毁:执行destroy方法,只执行一次</span><br><span class="line">	Servlet被销毁时执行.服务器关闭时,Servelt被销毁</span><br><span class="line">	只有服务器正常关闭时,才会执行destroy方法</span><br><span class="line">	destroy方法在Servlet销毁之前执行</span><br></pre></td></tr></table></figure>

<h4 id="3-Servlet3-0注解配置"><a href="#3-Servlet3-0注解配置" class="headerlink" title="3.Servlet3.0注解配置"></a>3.Servlet3.0注解配置</h4><p><strong>好处</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">支持注解配置.可以不需要web.xml了</span><br></pre></td></tr></table></figure>

<p><strong>实现步骤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.创建javaEE项目,选择Servlet3.0以上,可以不创建web.xml</span><br><span class="line">2.定义一个类,实现Servlet接口</span><br><span class="line">3.复写方法</span><br><span class="line">4.在类上使用@WebServlet注解,进行配置</span><br><span class="line">	@WebServlet(&quot;资源路径&quot;) 例:@WebServlet(&quot;/demo&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="4-Servlet的体系结构"><a href="#4-Servlet的体系结构" class="headerlink" title="4.Servlet的体系结构"></a>4.Servlet的体系结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Servlet --------接口</span><br><span class="line">	|</span><br><span class="line">GenericServlet-------抽象类</span><br><span class="line">	|</span><br><span class="line">HttpServlet----------抽象类</span><br><span class="line">	</span><br><span class="line">GenericServlet:将Servlet接口中其他的方法做了默认的空实现,只讲service方法作为抽象方法</span><br><span class="line">	将来定义类的时候,可以继承GenericServlet,实现service()方法即可</span><br><span class="line">HttpServlet:对http协议的一种封装,简化操作</span><br><span class="line">	1.定义类继承HttpServlet</span><br><span class="line">	2.复写doGet/doPost方法</span><br></pre></td></tr></table></figure>

<h4 id="5-Servlet相关配置"><a href="#5-Servlet相关配置" class="headerlink" title="5.Servlet相关配置"></a>5.Servlet相关配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.urlpartten:Servlet访问路径</span><br><span class="line">一个Servlet可以定义多个访问路径:@WebServlet(&#123;&quot;/demo&quot;,&quot;demo01&quot;,&quot;demo02&quot;&#125;)</span><br><span class="line">2.路径定义功能:</span><br><span class="line">1./xxx</span><br><span class="line">2./xxx/xxx 多层路径,目录结构</span><br><span class="line">3.*.do</span><br></pre></td></tr></table></figure>

<h3 id="三-HTTP"><a href="#三-HTTP" class="headerlink" title="三.HTTP"></a>三.HTTP</h3><p><strong>概念</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HyperText Transfer Protocol，超文本传输协议</span><br><span class="line">传输协议:定义了客户端和服务器端通信时,发送数据的格式</span><br><span class="line">特点:</span><br><span class="line">	1.基于TCP/IP的高级协议</span><br><span class="line">	2.默认端口号:80</span><br><span class="line">	3.基于请求/响应模型的:一次请求对应一次响应</span><br><span class="line">	4.无状态的:每次请求之间相互独立,不能交互数据</span><br></pre></td></tr></table></figure>

<h4 id="1-请求消息数据格式"><a href="#1-请求消息数据格式" class="headerlink" title="1.请求消息数据格式"></a>1.请求消息数据格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求消息:客户端发送给服务器端的数据</span><br><span class="line">格式:</span><br><span class="line">    1.请求行</span><br><span class="line">        请求方式 请求url 请求协议/版本</span><br><span class="line">        GET /login.html HTTP/1.1</span><br><span class="line">        请求方式:</span><br><span class="line">            HTTP协议有7种请求方式,常用的有两种</span><br><span class="line">                GET:</span><br><span class="line">                    1.请求参数在请求行中,在url后</span><br><span class="line">                    2.请求的url长度有限制</span><br><span class="line">                    3.不太安全</span><br><span class="line">                POST:</span><br><span class="line">                    1.请求参数在请求体中</span><br><span class="line">                    2.请求的url长度没有限制</span><br><span class="line">                    3.相对安全</span><br><span class="line">    2.请求头</span><br><span class="line">        请求头的名称:请求头的值</span><br><span class="line">        常见的请求头:</span><br><span class="line">            1.User-Agent:浏览器告诉服务器,我访问你使用的浏览器版本信息</span><br><span class="line">                可以在服务器端获取该头的信息,解决浏览器的兼容性问题</span><br><span class="line">            2.Referer:http://localhost/login.html</span><br><span class="line">                告诉服务器,当前请求从哪里来?</span><br><span class="line">                    作用:</span><br><span class="line">                        1.防盗链</span><br><span class="line">                        2.统计工作</span><br><span class="line">    3.请求空行</span><br><span class="line">        空行:就是用于分割POST请求的请求头和请求体的 </span><br><span class="line">    4.请求体</span><br><span class="line">        封装POST请求消息的请求体的</span><br></pre></td></tr></table></figure>

<h4 id="2-Request"><a href="#2-Request" class="headerlink" title="2.Request"></a>2.Request</h4><h5 id="1-Request和Response对象的原理"><a href="#1-Request和Response对象的原理" class="headerlink" title="1.Request和Response对象的原理"></a>1.Request和Response对象的原理</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Request和Response对象是由服务器创建的.我们来使用他们而已,</span><br><span class="line">2.Response对象是来获取请求消息,response对象是来设置响应消息</span><br></pre></td></tr></table></figure>

<h5 id="3-request对象继承体系结构"><a href="#3-request对象继承体系结构" class="headerlink" title="3.request对象继承体系结构"></a>3.request对象继承体系结构</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServletRequest------------接口</span><br><span class="line">	|继承</span><br><span class="line">HttpServletRequest--------接口</span><br><span class="line">	|实现</span><br><span class="line">org.apache.catalina.connector.RequestFacade(tomcat)</span><br></pre></td></tr></table></figure>



<h5 id="2-request功能"><a href="#2-request功能" class="headerlink" title="2.request功能"></a>2.request功能</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.获取请求消息</span><br><span class="line">	1.获取请求行数据  /day14/demo01?name=zhangsan HTTP/1.1</span><br><span class="line">		方法:</span><br><span class="line">			1.获取请求方式:GET</span><br><span class="line">				String getMethod()	</span><br><span class="line">			2.(*)获取虚拟目录:/day14</span><br><span class="line">				String getContextPath()</span><br><span class="line">			3.获取Servlet路径:/demo01</span><br><span class="line">				String getServletPath()</span><br><span class="line">			4.获取get方式请求参数:name=zhangsan</span><br><span class="line">				String getQueryString()</span><br><span class="line">			5.(*)获取请求的URI:/day14/demo01</span><br><span class="line">				String getRequestURI():/day14/demo01</span><br><span class="line">				String getRequestURL():http://localhost/day14/demo01</span><br><span class="line">				URL:统一资源定位器 http://localhost/day14/demo01</span><br><span class="line">				URI:统一资源标识符 /day14/demo01</span><br><span class="line">				URI代表的范围更大</span><br><span class="line">			6.获取协议及版本:HTTP/1.1</span><br><span class="line">				String getProtocol()</span><br><span class="line">			7.获取客户机的IP地址:</span><br><span class="line">				String getRemoteAddress()</span><br><span class="line">	2.获取请求头数据</span><br><span class="line">		(*)String getHeader(String name);//通过请求头的名称获取请求头的值</span><br><span class="line">			referer:获取链接</span><br><span class="line">		Enumeration&lt;String&gt; getHeaderNames();//获取所有的请求头名称</span><br><span class="line">	3.获取请求体数据</span><br><span class="line">		只有POST请求方式,才有请求体,在请求体中封装了POST请求的请求参数</span><br><span class="line">		步骤:</span><br><span class="line">			1.获取流对象</span><br><span class="line">				BufferedReader getReader():获取字符输入流,只能操作字符数据</span><br><span class="line">				ServletInputStream getInputStream():获取字节输入流,可以操作所有类型数据 </span><br><span class="line">			2.再从流对象中拿数据</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line">2.其他功能</span><br><span class="line">	1.获取请求参数通用方式:不论是get还是post请求方式都可以使用下列方法来获取请求参数</span><br><span class="line">		1.String getParameter(String name):根据参数名称获取参数值 username=zhangsan&amp;password=123</span><br><span class="line">		2.String getParameterValues(String name):根据参数名称获取参数值的数组 hobby=xx&amp;hobby=game</span><br><span class="line">		3.Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称</span><br><span class="line">		4.Map&lt;String,String[]&gt;getParameterMap():获取所有参数的Map集合</span><br><span class="line">		中文乱码问题:</span><br><span class="line">			 get方式:tomcat8已经将get方式乱码问题解决了</span><br><span class="line">			 post方式:会乱码</span><br><span class="line">			 	解决:在获取参数前,设置request的编码request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">	2.请求转发:一种在服务器内部的资源跳转方式</span><br><span class="line">		1.步骤:</span><br><span class="line">			1.通过request对象获取请求转发器对象:RequestDispatcher getRequestDispatcher(String path)</span><br><span class="line">			2.使用RequestDispatcher对象来进行转发forward(ServletRequest request,ServletResponse response)</span><br><span class="line">		2.特点:</span><br><span class="line">			1.浏览器地址栏不发生变化</span><br><span class="line">			2.只能转发到当前服务器内部资源中</span><br><span class="line">			3.转发是一次请求</span><br><span class="line">	3.共享数据</span><br><span class="line">		域对象:一个有作用范围的对象,可以在范围内共享数据</span><br><span class="line">		request域的范围:代表一次请求的范围,一般用于请求转发的多个资源中共享数据</span><br><span class="line">		方法:</span><br><span class="line">			1.setAttribute(String name,Object obj):存储数据</span><br><span class="line">			2.getAttribute(String name):通过键获取值</span><br><span class="line">			3.removeAttribute(String name):通过键移除键值对</span><br><span class="line">	4.获取ServletContext</span><br><span class="line">		ServletContext getServletContext()</span><br></pre></td></tr></table></figure>

<h4 id="3-响应消息数据格式"><a href="#3-响应消息数据格式" class="headerlink" title="3.响应消息数据格式"></a>3.响应消息数据格式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">响应消息:服务器端发送给客户端的数据</span><br><span class="line">格式:</span><br><span class="line">    1.响应行</span><br><span class="line">    	1.组成:协议/版本 响应状态码 状态码描述</span><br><span class="line">    	2.响应状态码:服务器告诉客户端浏览器本次请求和响应的状态</span><br><span class="line">    		1.状态码都是3位数字 </span><br><span class="line">    		2.分类:</span><br><span class="line">    			1. 1xx:服务器接收客户端消息,但没有接受完成,等待一段时间后,发送1xx状态码</span><br><span class="line">    			2. 2xx:成功.代表:200</span><br><span class="line">    			3. 3xx:重定向.代表:302(重定向) 304(访问缓存)</span><br><span class="line">    			4. 4xx:客户端错误.代表: 404(请求路径没有对应的资源) 405(请求方式没有对应的doxxx方法)</span><br><span class="line">    			5. 5xx:服务器端错误.代表: 500(服务器内部出现异常) </span><br><span class="line">    2.响应头</span><br><span class="line">    	1.格式:头名称:值</span><br><span class="line">    	2.常见的响应头:</span><br><span class="line">    		1.Content-Type:服务器告诉客户端本次响应体数据格式及编码格式</span><br><span class="line">    		2.Content-disposition:服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line">    			值:</span><br><span class="line">    				in-line:默认值,在当前页面打开</span><br><span class="line">    				attachment;filename=xxx:以附件形式打开响应体.文件下载</span><br><span class="line">    3.响应空行</span><br><span class="line">    4.响应体:传输的数据</span><br></pre></td></tr></table></figure>

<h4 id="4-response"><a href="#4-response" class="headerlink" title="4.response"></a>4.response</h4><h5 id="功能-设置响应消息"><a href="#功能-设置响应消息" class="headerlink" title="功能:设置响应消息"></a>功能:设置响应消息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.设置响应消息</span><br><span class="line">	1.格式:HTTP/1.1 200 OK</span><br><span class="line">	2.设置状态码:setStatus(int sc)</span><br><span class="line">2.设置响应头:setHeader(String name,String value)</span><br><span class="line">3.设置响应体:</span><br><span class="line">	使用步骤:</span><br><span class="line">		1.获取输出流</span><br><span class="line">			字符输出流:PrintWrite getWriter()</span><br><span class="line">			字节输出流:ServletOutputStream getOutputStream()	</span><br><span class="line">		2.使用输出流将数据输出到客户端浏览器中</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h5 id="1-重定向-资源跳转的方式"><a href="#1-重定向-资源跳转的方式" class="headerlink" title="1.重定向:资源跳转的方式"></a>1.重定向:资源跳转的方式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(&quot;资源路径&quot;);</span><br></pre></td></tr></table></figure>

<p><strong>特点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.地址栏发生变化</span><br><span class="line">2.重定向可以访问其他站点的资源</span><br><span class="line">3.重定向是两次请求.不能使用request对象共享数据</span><br></pre></td></tr></table></figure>

<p><strong>路径写法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路径分类:</span><br><span class="line">	1.相对路劲:通过相对路劲不可以确定唯一资源</span><br><span class="line">		如:  ./index.html  不以/开头,以.开头</span><br><span class="line">		</span><br><span class="line">		规则:找到访问当前资源和目标资源之间的相对位置关系</span><br><span class="line">		./ : 当前目录</span><br><span class="line">		../ :后退一级目录</span><br><span class="line">	2.绝对路劲:通过绝对路劲可以确定唯一资源</span><br><span class="line">		如:http://localhost/day15/responseDemo2 /day15/responseDemo2 </span><br><span class="line">		以/开头</span><br><span class="line">		规则:判断定义的路径是给谁用的?判断请求从哪发出</span><br><span class="line">			给客户端浏览器使用:需要加虚拟目录</span><br><span class="line">				建议虚拟目录动态获取:request.getContextPath()</span><br><span class="line">				例:&lt;a&gt;,&lt;form&gt;,重定向...</span><br><span class="line">			给服务器用:不需要加虚拟目录</span><br><span class="line">			重定向需要加虚拟目录</span><br><span class="line">		</span><br></pre></td></tr></table></figure>

<h5 id="2-服务器输出字符串到浏览器"><a href="#2-服务器输出字符串到浏览器" class="headerlink" title="2.服务器输出字符串到浏览器"></a>2.服务器输出字符串到浏览器</h5><p><strong>注意</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">乱码问题:</span><br><span class="line">	1.PrintWrite pw  = response.getWriter();获取流默认的编码是ISO-8859-1</span><br><span class="line">	2.设置该流的默认编码</span><br><span class="line">	3.告诉浏览器响应体使用的编码</span><br><span class="line">	//简单的形式设置编码</span><br><span class="line">	response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h5 id="3-验证码"><a href="#3-验证码" class="headerlink" title="3.验证码"></a>3.验证码</h5><p><strong>java代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/checkedCodeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckedCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置图片的宽和高</span></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line">        <span class="comment">//创建验证码图片对象</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//美化图片</span></span><br><span class="line">        <span class="comment">//填充背景色</span></span><br><span class="line">        <span class="comment">//获取画笔对象</span></span><br><span class="line">        Graphics graphics = image.getGraphics();</span><br><span class="line">        <span class="comment">//设置画笔颜色</span></span><br><span class="line">        graphics.setColor(Color.pink);</span><br><span class="line"></span><br><span class="line">        graphics.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line">        <span class="comment">//画边框</span></span><br><span class="line">        graphics.setColor(Color.blue);</span><br><span class="line">        graphics.drawRect(<span class="number">0</span>,<span class="number">0</span>,width-<span class="number">1</span>,height-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//写验证码</span></span><br><span class="line">        <span class="comment">//定义验证码中所有可能出现的字符</span></span><br><span class="line">        String str = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//写入随机字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = random.nextInt(str.length());</span><br><span class="line">            <span class="keyword">char</span> c = str.charAt(index);</span><br><span class="line">            graphics.drawString(c+<span class="string">&quot;&quot;</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//写入随机横线</span></span><br><span class="line">        graphics.setColor(Color.green);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = random.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = random.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> y1 = random.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = random.nextInt(height);</span><br><span class="line">            graphics.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将图片输出到页面显示</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>,resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>html代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;checkedCode&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> change = <span class="built_in">document</span>.getElementById(<span class="string">&quot;change&quot;</span>);</span></span><br><span class="line"><span class="javascript">            img.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//定义时间戳</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">                img.src = <span class="string">&quot;/Servlet_war_exploded/checkedCodeServlet?&quot;</span>+date;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            change.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//定义时间戳</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">                change.href = <span class="string">&quot;/Servlet_war_exploded/register.html&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;checkedCode&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/Servlet_war_exploded/checkedCodeServlet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;change&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>看不清,换一张?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-ServletContext对象"><a href="#5-ServletContext对象" class="headerlink" title="5.ServletContext对象"></a>5.ServletContext对象</h4><p><strong>概念</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代表整个web应用,可以和程序的容器(服务器)通信</span><br></pre></td></tr></table></figure>

<p><strong>获取</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.通过request对象获取</span><br><span class="line">	request.getServletContext();</span><br><span class="line">2.通过HttpServlet获取</span><br><span class="line">	this.getServletContext();</span><br></pre></td></tr></table></figure>



<p><strong>功能</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.获取MIME类型</span><br><span class="line">	MIME类型:在互联网通信过程中定义的一种文件数据类型</span><br><span class="line">		格式: 大类型/小类型 text/html  image/jpeg</span><br><span class="line">	获取:String getmimeType(String file)</span><br><span class="line">2.域对象:共享数据</span><br><span class="line">	1.setAttribute(String name,Object value)</span><br><span class="line">	2.getAttribute(String name)</span><br><span class="line">	3.removeAttribute(String name)</span><br><span class="line">	ServletContext对象范围:所有用户所有请求的数据</span><br><span class="line">3.获取文件的真实(服务器)路径</span><br><span class="line">	1.方法:String getRealPath(String path)</span><br><span class="line">	/b.txt    web目录下资源访问</span><br><span class="line">	/WEB-INF/c.txt    WEB-INF目录下的资源访问</span><br><span class="line">	/WEB-INF/classes/a.txt  src目录下的资源访问</span><br></pre></td></tr></table></figure>

<h3 id="四-会话技术"><a href="#四-会话技术" class="headerlink" title="四.会话技术"></a>四.会话技术</h3><h4 id="1-会话"><a href="#1-会话" class="headerlink" title="1.会话"></a>1.会话</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">会话:一次会话中包含多次请求和响应</span><br><span class="line">一次会话:浏览器第一次给服务器资源发送请求,会话建立,直到有一方断开为止</span><br></pre></td></tr></table></figure>

<h4 id="2-功能"><a href="#2-功能" class="headerlink" title="2.功能"></a>2.功能</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">功能:在一次会话的范围内,共享数据</span><br></pre></td></tr></table></figure>

<h4 id="3-方式"><a href="#3-方式" class="headerlink" title="3.方式"></a>3.方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.客户端会话技术:Cookie</span><br><span class="line">2.服务器端会话技术:Session</span><br></pre></td></tr></table></figure>

<h4 id="4-Cookie"><a href="#4-Cookie" class="headerlink" title="4.Cookie"></a>4.Cookie</h4><p><strong>概念</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">概念:客户端会话技术,将数据保存到客户端</span><br></pre></td></tr></table></figure>

<h5 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用步骤:</span><br><span class="line">	1.创建Cookie对象,绑定数据</span><br><span class="line">		new Cookie(String name,String value)</span><br><span class="line">	2.发送Cookie对象</span><br><span class="line">		response.addCookie(Cookie cookie)</span><br><span class="line">	3.获取Cookie,拿到数据</span><br><span class="line">		Cookie[] request.getCookie()</span><br><span class="line"> 	4.</span><br></pre></td></tr></table></figure>

<h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基于响应头set-cookie和请求头cookie实现</span><br></pre></td></tr></table></figure>

<h5 id="cookie的细节"><a href="#cookie的细节" class="headerlink" title="cookie的细节"></a>cookie的细节</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.一次可不可以发送多个cookie?</span><br><span class="line">	可以</span><br><span class="line">	可以创建多个Cookie对象,使用response调用多次addCookie()方法发送cookie数据</span><br><span class="line">2.cookie在浏览器中保存多长时间?</span><br><span class="line">	1.默认情况下,当浏览器关闭后,Cookie数据被销毁</span><br><span class="line">	2.持久化存储:</span><br><span class="line">		setMaxAge(int seconds)</span><br><span class="line">			1.正数:将cookie数据写到硬盘的文件中.持久化存储.cookie存活时间</span><br><span class="line">			2.负数:默认值</span><br><span class="line">			3.零:删除cookie信息</span><br><span class="line">3.cookie能不能存中文?</span><br><span class="line">	在tomcat8之前,cookie中不能直接存储中文数据</span><br><span class="line">		需要将中文数据转码---一般采用URL编码(%E3)</span><br><span class="line">	在tomcat8之后,cookie支持中文数据</span><br><span class="line">4.cookie获取范围多大?</span><br><span class="line">	1.假设在一个tomcat服务器中,部署了多个web项目,那么在这些web项目中cookie能不能共享?</span><br><span class="line">		默认情况下cookie不能共享</span><br><span class="line">		setPath(String path):设置cookie的获取范围.默认情况下,设置当前的虚拟目录</span><br><span class="line">		如果要共享,则可以将path设置为&quot;/&quot;</span><br><span class="line">	2.不同的tomcat服务器间cookie共享问题?</span><br><span class="line">		setDomain(String path):如果设置一级域名相同,那么多个服务器之间cookie可以共享</span><br></pre></td></tr></table></figure>

<h5 id="5-cookie的特点和作用"><a href="#5-cookie的特点和作用" class="headerlink" title="5.cookie的特点和作用"></a>5.cookie的特点和作用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">特点:</span><br><span class="line">    1.cookie存储数据在客户端浏览器</span><br><span class="line">    2.浏览器对于单个cookie的大小有限制以及对于一个域名     下的cookie数量也有限制(20个)</span><br><span class="line">作用:</span><br><span class="line">	1.cookie一般用于存储少量的不太敏感的数据</span><br><span class="line">	2.在不登录的情况下,完成服务器对客户端的身份识别</span><br></pre></td></tr></table></figure>



<h4 id="5-Session"><a href="#5-Session" class="headerlink" title="5.Session"></a>5.Session</h4><p><strong>概念</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">概念:服务器端会话技术,在一次会话的多次请求间共享数据,将数据保存在服务器端的对象中,HttpSession</span><br></pre></td></tr></table></figure>

<h5 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.获取Session对象:</span><br><span class="line">	HttpSession session = request.getSession();</span><br><span class="line">2.使用HttpSession对象:</span><br><span class="line">	Object getAttribute(String name)</span><br><span class="line">	void setAttribute(String name,Object value)</span><br><span class="line">	void removeAttribute(String name)</span><br></pre></td></tr></table></figure>

<h5 id="2-原理分析"><a href="#2-原理分析" class="headerlink" title="2.原理分析"></a>2.原理分析</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Session的实现是依赖于cookie的</span><br></pre></td></tr></table></figure>

<h5 id="3-细节"><a href="#3-细节" class="headerlink" title="3.细节"></a>3.细节</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.当客户端关闭后,服务器不关闭,两次获取session是否为同一个?</span><br><span class="line">	默认情况下.不是</span><br><span class="line">	如果需要相同,则可以创建Cookie,键为JSESSIONID,设置最大存活时间,让cookie持久化保存</span><br><span class="line">2.客户端不关闭,服务器关闭后,两次获取的session是同一个吗?</span><br><span class="line">	不是同一个,但是要确保数据不丢失</span><br><span class="line">		session的钝化:</span><br><span class="line">			在服务器正常关闭之前,将session对象序列化到硬盘上</span><br><span class="line">		session的活化:</span><br><span class="line">			在服务器启动后,将session文件转化为内存中的session对象即可.</span><br><span class="line">3.session的失效时间?</span><br><span class="line">	1.服务器关闭</span><br><span class="line">	2.session1对象调用invalidate().</span><br><span class="line">	3.session默认失效时间 30分钟</span><br><span class="line">		选择性配置修改</span><br></pre></td></tr></table></figure>

<h5 id="4-特点"><a href="#4-特点" class="headerlink" title="4.特点"></a>4.特点</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.session用于存储一次会话的多次请求间的数据,存在服务器端</span><br><span class="line">2.session可以存储任意类型,任意大小的数据</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="5-session和cookie的区别"><a href="#5-session和cookie的区别" class="headerlink" title="5.session和cookie的区别"></a>5.session和cookie的区别</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.session存储数据在服务器端,cookie在客户端</span><br><span class="line">2.session没有数据大小限制,cookie有</span><br><span class="line">3.session数据安全,cookie相对不安全</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2021/09/01/JavaScript/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="JavaScript的6种数据类型"><a href="#JavaScript的6种数据类型" class="headerlink" title="JavaScript的6种数据类型"></a>JavaScript的6种数据类型</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><blockquote>
<p>字符串可以是引号中的任意文本。可以使用单引号或双引号.</p>
</blockquote>
<p><strong>常用方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aaadererer23242432&quot;</span>;</span><br><span class="line"><span class="comment">//计算字符串的长度 </span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);<span class="comment">//18</span></span><br><span class="line"><span class="comment">//字符串中某一个指定的字符首次出现的位置(从0开始)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;d&#x27;</span>));<span class="comment">//3</span></span><br><span class="line"><span class="comment">//把两个字符串连接起来</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;ereretsfdf&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(str2));<span class="comment">//aaadererer23242432ereretsfdf</span></span><br><span class="line"><span class="comment">//字符串中的替换</span></span><br><span class="line"><span class="keyword">var</span> str3 = str.replace(<span class="regexp">/d/</span>,<span class="string">&quot;b&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br><span class="line"><span class="comment">//charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码。</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>));<span class="comment">//97</span></span><br><span class="line"><span class="comment">//fromCharCode方法从一些Unicode字符串中返回一个字符串。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">65</span>));<span class="comment">//A</span></span><br><span class="line"><span class="comment">//charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>));<span class="comment">//a</span></span><br><span class="line"><span class="comment">//slice方法返回字符串的片段。</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>,<span class="number">3</span>));<span class="comment">//aaa</span></span><br><span class="line"><span class="comment">//substring方法返回位于String对象中指定位置的子字符串。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">strObj.substring(start,end)</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">start指明子字符串的起始位置，该索引从0开始起算。</span></span><br><span class="line"><span class="comment">end指明子字符串的结束位置，该索引从0开始起算。</span></span><br><span class="line"><span class="comment">substring方法使用start和end两者中的较小值作为子字符串的起始点。如果start或end为NaN或者为负数，那么将其替换为0。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>,<span class="number">3</span>));<span class="comment">//aaa</span></span><br><span class="line"><span class="comment">// substr方法返回一个从指定位置开始的指定长度的子字符串。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * strObj.substr(start[,length])</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  * start所需的子字符串的起始位置。字符串中的第一个字符的索引为0。</span></span><br><span class="line"><span class="comment">  * length在返回的子字符串中应包括的字符个数。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">0</span>,<span class="number">4</span>));<span class="comment">//aaad</span></span><br><span class="line"><span class="comment">//lastIndexOf方法返回String对象中字符串最后出现的位置。如果没有匹配到子字符串，则返回-1。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * strObj.lastIndexOf(substr[,startindex])</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  * substr要在String对象内查找的子字符串。</span></span><br><span class="line"><span class="comment">  * startindex该整数值指出在String对象内进行查找的开始索引位置。如果省略，则查找从字符串的末尾开始。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">&quot;a&quot;</span>,<span class="number">3</span>));<span class="comment">//2</span></span><br><span class="line"><span class="comment">//search方法返回与正则表达式查找内容匹配的第一个字符串的位置。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * strObj.search(reExp)</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  * reExp包含正则表达式模式和可用标志的正则表达式对象。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">&quot;d&quot;</span>));<span class="comment">//3</span></span><br><span class="line"><span class="comment">//将一个字符串分割为子字符串，然后将结果作为字符串数组返回。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * strObj.split([separator[,limit]])</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  * separator字符串或 正则表达式 对象，它标识了分隔字符串时使用的是一个还是多个字符。如果忽略该选项，返回包含整个字符串的单一元素数组。</span></span><br><span class="line"><span class="comment">  * limit该值用来限制返回数组中的元素个数。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&quot;aa bb cc dd ee&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str4.split(<span class="string">&quot; &quot;</span>,<span class="number">3</span>));<span class="comment">//[&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><blockquote>
<p>NaN：即非数值（Not a Number）。任何涉及NaN的操作都会返回NaN，NaN与任何值都不相等</p>
</blockquote>
<h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><blockquote>
<p>Boolean类型有两个字面值：true和false。<strong>true不一定等于1，false不一定等于0。只有Number（true）Number(false)才是1或0，</strong>注意的是true和false是区分大小写的。 </p>
</blockquote>
<h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><blockquote>
<p>null值表示一个空指针对象</p>
<p>注意:没有必要把一个变量的值初始化为undefined，但对于意在保存对象的变量则应明确的初始化为null值</p>
</blockquote>
<h2 id="Undefine"><a href="#Undefine" class="headerlink" title="Undefine"></a>Undefine</h2><blockquote>
<p>对未初始化和未声明的变量执行typeof操作符都会返回undefined</p>
</blockquote>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h1 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h1><blockquote>
<p>typeof操作符：用于检测给定变量的数据类型，对一个值试用typeof操作符可能返回下列某个字符串：</p>
<p>“undefined”——表示值未定义；</p>
<p>“boolean”——表示值是布尔值 ；</p>
<p>“string”——表示值是字符；</p>
<p>“number”——表示值是数值；</p>
<p>“object”——表示值是对象或null；</p>
<p>“function”——表示值是函数；</p>
</blockquote>
<h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><h2 id="1-将其他的数据类型转换为String"><a href="#1-将其他的数据类型转换为String" class="headerlink" title="1.将其他的数据类型转换为String"></a>1.将其他的数据类型转换为String</h2><h3 id="方式一-toString-方法"><a href="#方式一-toString-方法" class="headerlink" title="方式一:toString()方法"></a>方式一:toString()方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = a.toString();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line">			</span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">a = a.toString();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<blockquote>
<p>null和undefined这两个值没有toString()方法,如果调用他们的方法,会报错</p>
</blockquote>
<h3 id="方式二-调用String-函数"><a href="#方式二-调用String-函数" class="headerlink" title="方式二:调用String()函数"></a>方式二:调用String()函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = <span class="built_in">String</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line">a = <span class="built_in">String</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line">a = <span class="built_in">String</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">a = <span class="built_in">String</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用String()函数做强制类型转换时</p>
<p>对于Number和Boolean实际上就是调用toString()方法</p>
<p>但是对于null和undefined,就不会调用toString()方法</p>
<p>他会将null 直接转换为”null”</p>
<p>他会将undefined 直接转换为”undefined “</p>
</blockquote>
<h2 id="2-将其他的数据类型转换为Number"><a href="#2-将其他的数据类型转换为Number" class="headerlink" title="2.将其他的数据类型转换为Number"></a>2.将其他的数据类型转换为Number</h2><h3 id="方式一-调用Number函数"><a href="#方式一-调用Number函数" class="headerlink" title="方式一:调用Number函数"></a>方式一:调用Number函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果是纯数字的字符串,则直接将其转换为数字</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">a = <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果字符串中有非数字的内容,则转换为NaN</span></span><br><span class="line">a = <span class="string">&quot;123aaa&quot;</span>;</span><br><span class="line">a = <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果字符串是一个空串或者是一个全是空格的字符串,则转换为0</span></span><br><span class="line">a = <span class="string">&quot;&quot;</span>;</span><br><span class="line">a = <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//0	</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Boolean转数字</span></span><br><span class="line"><span class="comment"> * true 转成 1</span></span><br><span class="line"><span class="comment"> * false 转成 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">a = <span class="literal">true</span>;</span><br><span class="line">a = <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">false</span>;</span><br><span class="line">a = <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//null转数字 是0</span></span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line">a = <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined转数字 是NaN</span></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">a = <span class="built_in">Number</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//NaN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="方式二-parseInt-parseFloat"><a href="#方式二-parseInt-parseFloat" class="headerlink" title="方式二:parseInt(),parseFloat()"></a>方式二:parseInt(),parseFloat()</h3><blockquote>
<p>parseInt()可以将一个字符串中的有效的整数内容取出来,然后转为Number</p>
<p>parseFloat()与parseInt()类型,不同的是他可以取小数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;123px&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseInt</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;123a123&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseInt</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;b123a123&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseInt</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;123.123a123&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseInt</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;123.123a123&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseFloat</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123.123</span></span><br><span class="line">		</span><br><span class="line">a = <span class="string">&quot;123.123.123a123&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseFloat</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123.123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果对非String使用parseInt()或parseFloat()</span></span><br><span class="line"><span class="comment"> * 它会先将其转换为String然后再操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">a = <span class="string">&quot;123.123&quot;</span>;</span><br><span class="line">a = <span class="built_in">parseInt</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//number</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-将其他的数据类型转换为Boolean"><a href="#3-将其他的数据类型转换为Boolean" class="headerlink" title="3.将其他的数据类型转换为Boolean"></a>3.将其他的数据类型转换为Boolean</h2><h3 id="使用Boolean函数"><a href="#使用Boolean函数" class="headerlink" title="使用Boolean函数"></a>使用Boolean函数</h3><blockquote>
<p>数字转Number 除了0和NaN,其余都是true</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数字转Number 除了0和NaN,其余都是true</span></span><br><span class="line">a = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;-123&quot;</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">Infinity</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">NaN</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>字符串转Boolean,除了空串,都是true</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串转Boolean,除了空串,都是true</span></span><br><span class="line">a = <span class="string">&quot;&quot;</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;false&quot;</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>null和undefined都会转换为false</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//null和undefined都会转换为false</span></span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">undefined</span>;</span><br><span class="line">a = <span class="built_in">Boolean</span>(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);<span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h1 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h1><p><img src="https://fanaidi.gitee.io/blogimgs/JavaScript/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png"></p>
<h1 id="对象的简介"><a href="#对象的简介" class="headerlink" title="对象的简介"></a>对象的简介</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="1-内建对象"><a href="#1-内建对象" class="headerlink" title="1.内建对象"></a>1.内建对象</h3><blockquote>
<p>由ES标准中定义的对象,在任何的ES的实现中都可以使用</p>
<p>比如: Math String Number Boolean Function Object</p>
</blockquote>
<h3 id="2-宿主对象"><a href="#2-宿主对象" class="headerlink" title="2.宿主对象"></a>2.宿主对象</h3><blockquote>
<p>由JS的运行环境提供的对象,目前来讲主要由浏览器提供的对象</p>
<p>比如 BOM DOM</p>
</blockquote>
<h3 id="3-自定义对象"><a href="#3-自定义对象" class="headerlink" title="3.自定义对象"></a>3.自定义对象</h3><blockquote>
<p>由开发人员自己创建的对象</p>
</blockquote>
<h2 id="对象的基本操作"><a href="#对象的基本操作" class="headerlink" title="对象的基本操作"></a>对象的基本操作</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote>
<p>使用new关键字调用的函数,是构造函数constructor</p>
<p>构造函数是专门用来创建对象的函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>

<h3 id="向对象添加属性"><a href="#向对象添加属性" class="headerlink" title="向对象添加属性"></a>向对象添加属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">obj.gender = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">obj.age = <span class="number">18</span>; </span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/JavaScript/%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7.png"></p>
<h3 id="读取对象中的属性"><a href="#读取对象中的属性" class="headerlink" title="读取对象中的属性"></a>读取对象中的属性</h3><blockquote>
<p>语法: 对象.属性名</p>
<p>如果读取对象的属性不存在,不会报错而是返回undefined</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br></pre></td></tr></table></figure>

<h3 id="修改对象中的属性值"><a href="#修改对象中的属性值" class="headerlink" title="修改对象中的属性值"></a>修改对象中的属性值</h3><blockquote>
<p>语法: 对象.属性 = 新值</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj.age = 20;</span><br></pre></td></tr></table></figure>

<h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><blockquote>
<p>语法: delete 对象.属性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">obj.gender = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">obj.age = <span class="number">18</span>; </span><br><span class="line"><span class="keyword">delete</span> obj.age;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/JavaScript/%E5%88%A0%E9%99%A4%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7.png"></p>
<h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h3><blockquote>
<p>通过该运算符可以检查一个对象中是否含有指定的属性</p>
<p>-如果有则返回true,没有返回false</p>
<p>-语法: “属性名”  in 对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查obj中是否含有test2属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;test&quot;</span> <span class="keyword">in</span> obj);</span><br></pre></td></tr></table></figure>

<h3 id="使用对象字面量创建一个对象"><a href="#使用对象字面量创建一个对象" class="headerlink" title="使用对象字面量创建一个对象"></a>使用对象字面量创建一个对象</h3><blockquote>
<p>使用对象字面量,可以在创建对象时,直接指定对象中的属性</p>
<p>语法: {属性名:属性值,属性名:属性值,…..}</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.name = <span class="string">&quot;swk&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&quot;swk&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="函数function"><a href="#函数function" class="headerlink" title="函数function"></a>函数function</h2><blockquote>
<p>函数function</p>
<p>-函数也是一个对象</p>
<p>-函数中可以封装一些功能(代码),在需要时可以执行这些功能(代码)</p>
<p>-函数中可以保存一些代码在需要的时候调用</p>
<p>-使用typeof检查一个函数对象时,会返回function</p>
</blockquote>
<h3 id="创建一个函数对象"><a href="#创建一个函数对象" class="headerlink" title="创建一个函数对象"></a>创建一个函数对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以将要封装的代码以字符串的形式传递给构造函数</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;console.log(&#x27;hello&#x27;)&quot;</span>);</span><br><span class="line"><span class="comment">//封装到函数中的代码不会理解执行</span></span><br><span class="line"><span class="comment">//函数中的代码会在函数调用的时候执行</span></span><br><span class="line"><span class="comment">//调用函数语法: 	函数对象()</span></span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>

<h3 id="使用函数声明来创建一个函数"><a href="#使用函数声明来创建一个函数" class="headerlink" title="使用函数声明来创建一个函数"></a>使用函数声明来创建一个函数</h3><blockquote>
<p>语法:</p>
<p>​        function    函数名([形参1,形参2,….形参N]){</p>
<p>​        语句….</p>
<p>}</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun2();</span><br></pre></td></tr></table></figure>

<h3 id="使用函数表达式来创建函数"><a href="#使用函数表达式来创建函数" class="headerlink" title="使用函数表达式来创建函数"></a>使用函数表达式来创建函数</h3><blockquote>
<p>语法     var 函数名 = function([形参1,形参2,….形参N]){</p>
<p>​    语句….</p>
<p>}</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><blockquote>
<p>如果return语句后不跟任何值就相当于返回一个undefined</p>
<p>如果函数中不写return,则也会返回undefined</p>
<p>return后可以跟任意类型的值</p>
</blockquote>
<h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><blockquote>
<p> 定义:函数定义完,立即被调用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;立即执行函数&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;a+b=&quot;</span>+(a+b));</span><br><span class="line">&#125;)(<span class="number">123</span>,<span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<h2 id="枚举对象中的属性"><a href="#枚举对象中的属性" class="headerlink" title="枚举对象中的属性"></a>枚举对象中的属性</h2><blockquote>
<p>使用for…..in语句</p>
<p>语法:</p>
<p>for(var 变量 in 对象){}</p>
<p>for..in语句 对象中有几个属性,循环体就会执行几次 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>:<span class="number">17</span>,</span><br><span class="line">	<span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">	<span class="attr">address</span>:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> obj)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(obj[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><blockquote>
<p>-直接编写在script标签中的JS代码,都在全局作用域</p>
<p>-全局作用域在页面打开时创建,在页面关闭时销毁</p>
<p>-在全局作用域中有一个全局对象window,它代表的是一个浏览器的窗口,它由浏览器创建我们可以直接使用</p>
<p>-在全局作用域中:</p>
<p>​                            创建的变量都会作为window对象的属性保存</p>
<p>​                            创建的函数都会作为window对象的方法保存</p>
</blockquote>
<p><strong>注意</strong></p>
<blockquote>
<p>变量的声明提前</p>
<p>​    -使用var关键字声明的变量,会在所有的代码执行之前被声明</p>
<p>函数的声明提前</p>
<p>​    -使用函数声明形式创建的函数 function 函数名(){}</p>
<p>​        它会在所有的代码执行之前就被创建</p>
<p>​    -使用函数表达式创建的函数,不会被声明提前,所以不能在声明前调用</p>
<p>​    </p>
</blockquote>
<h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><blockquote>
<p>-调用函数时创建函数作用域,函数执行完毕以后,函数作用域销毁</p>
<p>-每调用一次函数就会创建一个新的函数作用域,他们之间是相互独立的</p>
<p>-在函数作用域中可以访问到全局作用域的变量</p>
<p>-在函数中要访问全局变量可以使用window对象</p>
<p>-在函数作用域也有声明提前的特性</p>
</blockquote>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><blockquote>
<p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数,这个隐含的参数就是this,this指向的是一个对象</p>
<p>这个对象我们称为函数执行的上下文对象</p>
<p>根据函数的调用方式的不同,this会指向不同的对象</p>
<p>以函数形式调用,this是window</p>
<p>以方法的形式调用,this是调用方法的对象</p>
</blockquote>
<h2 id="使用工厂方法创建对象"><a href="#使用工厂方法创建对象" class="headerlink" title="使用工厂方法创建对象"></a>使用工厂方法创建对象</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">	obj.name = name;</span><br><span class="line">	obj.age = age;</span><br><span class="line">	obj.gender = gender;</span><br><span class="line">	<span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = createObj(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = createObj(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj3 = createObj(<span class="string">&quot;沙和尚&quot;</span>,<span class="number">38</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj3);</span><br></pre></td></tr></table></figure>

<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><blockquote>
<p>-构造函数就是一个普通的函数,创建方式和普通函数没有区别,</p>
<p>-不同的是构造函数习惯上首字母大写</p>
<p>-构造函数和普通函数的区别就是调用方式的不同</p>
<p>-普通函数是直接调用,而构造函数需要使用new关键字来调用</p>
<p>-构造函数的执行流程:</p>
<p>1.立刻创建一个新对象</p>
<p>2.将新建的对象设置为函数中的this,在构造函数中可以引用新建的对象 </p>
<p>3.逐行执行函数中的代码</p>
<p>4.将新建的对象作为返回值返回</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用同一个构造函数创建的对象,我们称为一类对象,也将一个构造函数称为一个类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">	<span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">&quot;沙和尚&quot;</span>,<span class="number">38</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per1);</span><br><span class="line"><span class="built_in">console</span>.log(per2);</span><br><span class="line"><span class="built_in">console</span>.log(per3);</span><br></pre></td></tr></table></figure>

<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><blockquote>
<p>-使用instanceof可以检查一个对象是否是一个类的实例</p>
<p>-语法: 对象 instanceof 构造函数</p>
<p>​        -如果是,返回true,否则,返回false</p>
<p>-所有的对象都是Object的后代,所以任何对象和Object做instanceof检查时都会返回true</p>
</blockquote>
<h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><blockquote>
<p>-原型 prototype</p>
<p>-我们所创建的每一个函数,解析器都会向函数中添加一个属性prototype,这个属性对于着一个对象,这个对象就是原型对象</p>
<p>-如果函数作为普通函数调用prototype没有任何作用</p>
<p>-当函数以构造函数调用时,它所创建的对象中都会有一个隐含的属性,指向该构造函数的原型对象.</p>
<p>-我们可以通过__proto__来访问该属性</p>
<p>-原型对象就相当于一个公共的区域,所有同一个类的实例都可以访问到这个原型对象,我们可以将对象中共有的内容,统一设置到原型对象中</p>
<p>-当我们访问对象的一个属性或者方法时,他会先在对象自身中寻找,如果有,则直接使用,如果没有则会去原型对象中寻找,如果找到则直接使用</p>
<p>-以后我们创建构造函数时,可以将这些对象共有的属性和方法,统一添加到构造函数的原型对象中,这样不用分别为每一个对象添加,也不会影响到全局作用域,就可以使每个对象都具有这些属性和方法了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">var</span> mc2 = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(mc2.__proto__ == MyClass.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">	<span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> per3 = <span class="keyword">new</span> Person(<span class="string">&quot;沙和尚&quot;</span>,<span class="number">38</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(per1);</span><br><span class="line"><span class="built_in">console</span>.log(per2);</span><br><span class="line"><span class="built_in">console</span>.log(per3);</span><br><span class="line">per1.sayName();</span><br><span class="line">per2.sayName();</span><br><span class="line"><span class="built_in">console</span>.log(per1.sayName == per2.sayName)</span><br></pre></td></tr></table></figure>

<h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h2><blockquote>
<p>-数组也是一个对象</p>
<p>-它和我们普通对象功能类似,也是用来存储一些值的</p>
<p>-不同的是普通对象是使用字符串作为属性名的,而数组是使用数字作为索引操作元素</p>
<p>-索引:从0开始的整数就是索引</p>
<p>-数组的存储性能比普通对象要好,在开发中我们经常使用数组来存储一些数据</p>
</blockquote>
<h3 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure>

<h3 id="向数组中添加元素"><a href="#向数组中添加元素" class="headerlink" title="向数组中添加元素"></a>向数组中添加元素</h3><blockquote>
<p>语法: 数组[索引] = 值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line">arr[<span class="number">1</span>]=<span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h3 id="读取数组中的元素"><a href="#读取数组中的元素" class="headerlink" title="读取数组中的元素"></a>读取数组中的元素</h3><blockquote>
<p>语法: 数组[索引]</p>
<p>如果读取不存在的索引,他不会报错而是返回undefined</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><blockquote>
<p>语法: 数组.length</p>
<p>对于连续的数组,使用length可以获取到数组的长度(元素的个数)</p>
<p>对于非连续的数组,使用length会获取到数组的最大的索引+1</p>
<p>尽量不要创建非连续的数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.length;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<blockquote>
<p>-修改length</p>
<p>​    如果修改的length大于原长度,则多出的部分会空出来</p>
<p>​    如果修改的length小于原长度,则多出的元素会被删除</p>
</blockquote>
<h3 id="向数组的最后一个位置添加元素"><a href="#向数组的最后一个位置添加元素" class="headerlink" title="向数组的最后一个位置添加元素"></a>向数组的最后一个位置添加元素</h3><blockquote>
<p>语法: 数组[数组.length] = 值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr[arr.length] = <span class="number">70</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用字面量来创建数组"><a href="#使用字面量来创建数组" class="headerlink" title="使用字面量来创建数组"></a>使用字面量来创建数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="comment">//使用构造函数创建数组时,也可以同时添加元素,将要添加的元素作为构造函数的参数传递</span></span><br><span class="line"><span class="comment">//元素之间使用,隔开</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//数组中的元素可以是任意数据类型</span></span><br><span class="line">arr = [<span class="string">&quot;hello&quot;</span>,<span class="number">1</span>,<span class="literal">true</span>,<span class="literal">null</span>,<span class="literal">undefined</span>];</span><br><span class="line"><span class="comment">//也可以是对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;;</span><br><span class="line">arr[arr.length] = obj;</span><br><span class="line">arr = [&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;猪八戒&quot;</span>&#125;];</span><br><span class="line"><span class="comment">//也可以是函数</span></span><br><span class="line">arr = [<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>)&#125;];</span><br><span class="line"><span class="comment">//也可以是数组</span></span><br><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]];</span><br></pre></td></tr></table></figure>

<h3 id="数组的四个方法"><a href="#数组的四个方法" class="headerlink" title="数组的四个方法"></a>数组的四个方法</h3><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><blockquote>
<p>-该方法可以向数组的末尾添加一个或多个元素,并返回数组的新的长度</p>
<p>-可以将要添加的元素作为方法的参数传递</p>
<p>​    这样这些元素将会自动添加到数组的末尾</p>
</blockquote>
<h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><blockquote>
<p>-该方法可以删除数组的最后一个元素,并返回被删除的元素</p>
</blockquote>
<h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><blockquote>
<p>向数组的开头添加一个或多个元素,并返回新的数组长度</p>
</blockquote>
<h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><blockquote>
<p>可以删除数组的第一个元素,并将删除的元素返回</p>
</blockquote>
<h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach()方法"></a>forEach()方法</h4><blockquote>
<p>forEach()方法需要一个函数作为参数</p>
<p>-像这种函数,由我们创建但是不由我们调用的,我们称为回调函数</p>
<p>-数组中有几个元素,函数就会执行几次,每次执行时,浏览器会将遍历到的元素以实参的形式传递进来,我们可以定义形参,来读取这些内容</p>
<p>-浏览器会在回调函数中传递三个参数:<br>    第一个参数,就是当前正在遍历的元素</p>
<p>​    第二个参数,就是当前正在遍历的元素的索引</p>
<p>​    第三个参数,就是正在遍历的数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value , index , object</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">    <span class="built_in">console</span>.log(object);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h3><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><blockquote>
<p>-可以用来提取数组中的指定元素</p>
<p>-该方法不会改变元素数组,而是将截取到的元素封装到一个新数组中返回</p>
<p>-参数:</p>
<p>​    1.截取开始的位置的索引,包含开始索引</p>
<p>​    2.截取结束的位置的索引,不包含结束索引</p>
<p>​        -第二个参数可以省略不写,此时会截取从开始索引往后的元素</p>
<p>​    -索引可以传递一个负数,负数是从后往前计算</p>
<p>​            -1表示最后一个</p>
</blockquote>
<h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><blockquote>
<p>-可以用于删除数组中的指定元素</p>
<p>-使用splice()会影响到原数组,会将指定元素从原数组中删除,并将删除的元素作为返回值返回</p>
<p>-参数:</p>
<p>​    1.第一个,表示开始位置的索引</p>
<p>​    2.第二个,表示删除的数量</p>
<p>​    3.第三个及以后,可以传递一些新的元素,这些元素将会自动插入到开始位置索引的前面</p>
</blockquote>
<h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><blockquote>
<p>可以连接两个或多个数组,并将新的数组返回</p>
<p>​    -该方法不会对原数组产生影响</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.concat(arr2,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><blockquote>
<p>-该方法可以将数组转换为一个字符串</p>
<p>-该方法不会对原数组产生影响,而是将转换后的字符串作为结果返回</p>
<p>-在join中可以指定一个字符串作为参数,这个字符串将会成为数组中元素的连接符</p>
<p>​    如果不指定连接符,则默认使用,作为连接符</p>
</blockquote>
<h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><blockquote>
<p>-该方法用来反转数组(颠倒顺序)</p>
<p>-该方法会直接修改原数组</p>
</blockquote>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><blockquote>
<p>-可以用来对数组中的元素进行排序</p>
<p>-也会影响原数组,默认按照unicode编码进行排序</p>
<p>-即使对于纯数字的数组,使用sort()排序时,也会按照Unicode编码来排序</p>
<p>​    所以对数字进行排序时,可能会得到错误的结果</p>
<p>-我们可以自己来指定规则</p>
<p>​    我们可以在sort()中添加一个回调函数来指定排序规则,回调函数中需要定义两个形参,浏览器将会分别使用数组中的元素作为实参去调用回调函数,使用哪个元素调用不确定,但是肯定的是在数组中a一定在b前面 </p>
<p>-浏览器会根据回调函数的返回值来决定元素的顺序,</p>
<p>​    如果返回一个大于0的值,则元素会交换位置</p>
<p>​    如果返回小于0的值,则元素位置不变</p>
<p>​    如果返回0,则认为两个元素相等,位置不变 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line">arr.sort(function(a,b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &lt; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">arr.sort(function(a,b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr);</span><br></pre></td></tr></table></figure>

<h4 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h4><blockquote>
<p>-这两个方法都是函数对象的方法,需要通过函数对象来调用</p>
<p>-当对函数调用call()和apply()都会调用函数执行</p>
<p>-在调用call和apply()可以将一个对象指定为第一个参数,此时这个对象将会称为函数执行时的this</p>
<p>-call()方法可以将实参在对象之后依次传递</p>
<p>-apply()方法需要将实参封装到一个数组中统一传递</p>
<p>-this的情况:</p>
<p>​    1.以函数形式调用时,this永远都是window</p>
<p>​    2.以方法的形式调用时,this是调用方法的对象</p>
<p>​    3.以构造函数形式调用时,this是新创建的对象</p>
<p>​    3.使用call()和apply()调用时,this是指定的对象</p>
</blockquote>
<h2 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h2><blockquote>
<p>在调用函数时,浏览器每次都会传递进两个隐含的参数:</p>
<p>​    1.函数的上下文对象this</p>
<p>​    2.封装实参的对象arguments</p>
<p>​        -arguments是一个类数组对象,它也可以通过索引来操作数据,也可以获取长度</p>
<p>​        -在调用函数时,我们所传递的实参都会封装到arguments中</p>
<p>​        -arguments.length可以用来获取实参的长度</p>
<p>​        -我们即使不定义形参,也可以通过arguments来使用实参,只是比较麻烦 arguments[0]表示第一个实参</p>
<p>​        -它里面有个属性叫callee,这个属性对应的函数对象就是当前正在执行的函数对象</p>
</blockquote>
<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><h4 id="创建对象-1"><a href="#创建对象-1" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建date对象</span></span><br><span class="line"><span class="comment">//如果直接使用构造函数创建一个Date对象,则会封装为当前代码执行的时间</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">///创建一个指定的时间对象</span></span><br><span class="line"><span class="comment">//需要在构造函数中传递一个表示时间的字符串作为参数</span></span><br><span class="line"><span class="comment">//日期的格式: 月份/日/年 时:分:秒</span></span><br><span class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;9/1/2021 12:01:23&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d2);</span><br></pre></td></tr></table></figure>

<h4 id="Date对象中的方法"><a href="#Date对象中的方法" class="headerlink" title="Date对象中的方法"></a>Date对象中的方法</h4><h5 id="getDate"><a href="#getDate" class="headerlink" title="getDate()"></a>getDate()</h5><blockquote>
<p>获取当前日期是几日</p>
</blockquote>
<h5 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a>getDay()</h5><blockquote>
<p>获取当前日期对象是周几</p>
<p>会返回0-6的值,0表示周日,1表示周一</p>
</blockquote>
<h5 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a>getMonth()</h5><blockquote>
<p>获取当前时间对象的月份</p>
<p>会返回0-11的值,0表示1月,11表示12月</p>
</blockquote>
<h5 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear()"></a>getFullYear()</h5><blockquote>
<p>获取当前日期对象的年份 </p>
</blockquote>
<h5 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h5><blockquote>
<p>-获取当前日期对象的时间戳</p>
<p>-时间戳指的是1970年1月1日,0时0分0秒到当前日期所花费的毫秒数</p>
<p>-计算机底层在保存时间时使用都是时间戳</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前日期的时间戳</span></span><br><span class="line">time = <span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure>

<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><blockquote>
<p>-Math和其他的对象不同,它不是一个构造函数,它属于一个工具类,不用创建对象,它里面封装了数学运算相关的属性和方法</p>
<p>-比如 Math.PI表示圆周率</p>
</blockquote>
<h3 id="Math对象中的方法"><a href="#Math对象中的方法" class="headerlink" title="Math对象中的方法"></a>Math对象中的方法</h3><h4 id="Math-abs"><a href="#Math-abs" class="headerlink" title="Math.abs()"></a>Math.abs()</h4><blockquote>
<p>可以用来计算一个数的绝对值</p>
</blockquote>
<h4 id="Math-ceil"><a href="#Math-ceil" class="headerlink" title="Math.ceil()"></a>Math.ceil()</h4><blockquote>
<p>可以对一个数进行向上取整,小数位只要有值,就自动进1</p>
</blockquote>
<h4 id="Math-floor"><a href="#Math-floor" class="headerlink" title="Math.floor()"></a>Math.floor()</h4><blockquote>
<p>可以对一个数进行向下取整,小数部分会被舍掉</p>
</blockquote>
<h4 id="Math-round"><a href="#Math-round" class="headerlink" title="Math.round()"></a>Math.round()</h4><blockquote>
<p>可以对一个数进行四舍五入取整</p>
</blockquote>
<h4 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h4><blockquote>
<p>可以用来生成0-1之间的随机数</p>
</blockquote>
<h4 id="Math-max"><a href="#Math-max" class="headerlink" title="Math.max()"></a>Math.max()</h4><blockquote>
<p>可以获取多个数的最大值</p>
</blockquote>
<h4 id="Math-min"><a href="#Math-min" class="headerlink" title="Math.min()"></a>Math.min()</h4><blockquote>
<p>可以获取多个数中的最小值</p>
</blockquote>
<h4 id="Math-pow-x-y"><a href="#Math-pow-x-y" class="headerlink" title="Math.pow(x,y)"></a>Math.pow(x,y)</h4><blockquote>
<p>返回x的y次幂</p>
</blockquote>
<h4 id="Math-sqrt"><a href="#Math-sqrt" class="headerlink" title="Math.sqrt()"></a>Math.sqrt()</h4><blockquote>
<p>用于对一个数进行开方运算</p>
</blockquote>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><blockquote>
<p>在JS中为我们提供了三个包装类,通过这三个包装类可以将基本数据类型的数据转换为对象</p>
<p>String()                -可以将基本数据类型字符串转换为String对象</p>
<p>Number()            -可以将基本数据类型的数字转换为Number对象</p>
<p>Boolean()            -可以将基本数据类型的布尔值转换为Boolean对象</p>
</blockquote>
<p><strong>注意</strong></p>
<blockquote>
<p>-我们在实际应用中,不会使用基本数据类型的对象</p>
<p>-如果使用基本数据类型的对象,在做一些比较时,可能会带来一些不可预期的结果</p>
<p>-方法和属性只能添加给对象,不能添加给基本数据类型</p>
<p>​        -浏览器会临时使用包装类将其转换为对象,然后再调用对象的属性和方法</p>
<p>​        -调用完以后,再将其转换为基本数据类型</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a = a.toString();</span><br><span class="line">a.hello = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(a.hello);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><blockquote>
<p>在底层,字符串是以字符数组的形式保存的  </p>
</blockquote>
<h3 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="comment">//length属性可以获取字符串的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="chartAt"><a href="#chartAt" class="headerlink" title="chartAt()"></a>chartAt()</h4><blockquote>
<p>可以返回字符串中指定位置的字符</p>
<p>根据索引获取指定的字符</p>
</blockquote>
<h4 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h4><blockquote>
<p>获取指定位置字符的字符编码(Unicode编码)</p>
</blockquote>
<h4 id="String-fromCharCode"><a href="#String-fromCharCode" class="headerlink" title="String.fromCharCode()"></a>String.fromCharCode()</h4><blockquote>
<p>可以根据字符编码去获取字符</p>
</blockquote>
<h4 id="concat-1"><a href="#concat-1" class="headerlink" title="concat()"></a>concat()</h4><blockquote>
<p>可以用来连接两个或多个字符串</p>
</blockquote>
<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><blockquote>
<p>-该方法可以检索一个字符串是否含有指定内容</p>
<p>-如果字符串中含有该内容,则会返回其第一次出现的索引</p>
<p>-如果没有找到指定的内容,则返回-1</p>
<p>-可以指定第二个参数,指定开始查找的位置</p>
</blockquote>
<h4 id="lastIndextOf"><a href="#lastIndextOf" class="headerlink" title="lastIndextOf()"></a>lastIndextOf()</h4><blockquote>
<p>-该方法的用法和indexOf()一样,</p>
<p>​        不同的是indexOf是从前往后找,</p>
<p>​        而lastIndexOf是从后往前找</p>
<p>-也可以指定开始查找的位置</p>
</blockquote>
<h4 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h4><blockquote>
<p>-可以从字符串中截取指定的内容</p>
<p>-不会影响原字符串,而是将截取到的内容返回</p>
<p>-参数:</p>
<p>​        第一个,开始位置的索引(包括开始位置)</p>
<p>​        第二个,结束位置的索引(不包括结束位置)</p>
<p>​            如果省略第二个参数,则会截取到后边所有的</p>
<p>​        -也可以传递一个负数作为参数,负数的画将会从后边计算</p>
</blockquote>
<h4 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h4><blockquote>
<p>可以用来截取一个字符串,和slice()类似</p>
<p>参数:</p>
<p>​        第一个:开始截取位置的索引(包括开始位置)</p>
<p>​        第二个:结束位置的索引(不包括结束位置)</p>
<p>​        不同的是,这个方法不能接受负值作为参数,如果传递了一个负值,则默认使用0</p>
<p>​        而且它还自动调整参数的位置,如果第二个参数小于第二个,则自动交换</p>
</blockquote>
<h4 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h4><blockquote>
<p>用来截取字符串</p>
<p>参数:</p>
<p>​        1.截取开始位置的索引</p>
<p>​        2.截取的长度</p>
</blockquote>
<h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><blockquote>
<p>可以将一个字符串拆分为一个数组</p>
</blockquote>
<h4 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h4><blockquote>
<p>可以将字符串转换成大写并返回</p>
</blockquote>
<h4 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h4><blockquote>
<p>可以将字符串转换成小写并返回</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="comment">//length属性可以获取字符串的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br><span class="line"><span class="keyword">var</span> result = str.charAt(<span class="number">0</span>);<span class="comment">//H</span></span><br><span class="line"></span><br><span class="line">result = str.charCodeAt(<span class="number">0</span>);<span class="comment">//72</span></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">String</span>.fromCharCode(<span class="number">72</span>);<span class="comment">//H </span></span><br><span class="line"></span><br><span class="line">result = str.concat(<span class="string">&quot;!!!&quot;</span>);<span class="comment">//Hello World!!!</span></span><br><span class="line"></span><br><span class="line">result = str.indexOf(<span class="string">&quot;l&quot;</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">result = str.indexOf(<span class="string">&quot;l&quot;</span>,<span class="number">3</span>);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">result = str.lastIndexOf(<span class="string">&quot;l&quot;</span>);<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">result = str.slice(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//e </span></span><br><span class="line">result = str.slice(<span class="number">1</span>);<span class="comment">//ello World</span></span><br><span class="line"></span><br><span class="line">result = str.substring(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//e</span></span><br><span class="line"></span><br><span class="line">result = str.substr(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//el</span></span><br><span class="line"></span><br><span class="line">result = str.split(<span class="string">&quot; &quot;</span>);<span class="comment">//[&quot;Hello&quot;, &quot;World&quot;]</span></span><br><span class="line"></span><br><span class="line">result = str.toUpperCase();<span class="comment">//HELLO WORLD</span></span><br><span class="line"></span><br><span class="line">result = str.toLowerCase();<span class="comment">//hello world</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote>
<p>正则表达式用于定义一些字符串的规则,计算机可以根据正则表达式,来检查一个字符串是否符合规则,获取将字符串中符合规则的内容提取出来</p>
</blockquote>
<h2 id="创建正则表达式对象"><a href="#创建正则表达式对象" class="headerlink" title="创建正则表达式对象"></a>创建正则表达式对象</h2><blockquote>
<p>语法: var 变量 = new RegExp(“正则表达式”,”匹配模式”);</p>
<p>使用typeof检查正则对象,会返回object</p>
<p>在构造函数中可以传递一个匹配模式作为第二个参数</p>
<p>​    可以是:</p>
<p>​            i 忽略大小写 (ignore)</p>
<p>​            g 全局匹配模式</p>
</blockquote>
<h2 id="使用字面量创建正则表达式"><a href="#使用字面量创建正则表达式" class="headerlink" title="使用字面量创建正则表达式"></a>使用字面量创建正则表达式</h2><blockquote>
<p>语法: var 变量 = /正则表达式/匹配模式</p>
<p>使用字面量的方式创建更加简单</p>
<p>使用构造函数更加灵活</p>
</blockquote>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="test"><a href="#test" class="headerlink" title="test()"></a>test()</h3><blockquote>
<p>test()</p>
<p>使用这个方法可以用来检查一个字符串是否符合正则表达式的规则,</p>
<p>符合返回true,否则返回false</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用字面量创建正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/i</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* |表示或</span></span><br><span class="line"><span class="comment">* []里的内容也是或的关系</span></span><br><span class="line"><span class="comment">* [ab] == a|b</span></span><br><span class="line"><span class="comment">* [a-z]表示任意的小写字母</span></span><br><span class="line"><span class="comment">* [A-Z]任意大写字母</span></span><br><span class="line"><span class="comment">* [A-z]任意字母</span></span><br><span class="line"><span class="comment">* [^ ]除了</span></span><br><span class="line"><span class="comment">* [0-9]表示任意数字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//检查一个字符串中是否有a或b</span></span><br><span class="line">reg = <span class="regexp">/a|b/</span>;</span><br><span class="line"><span class="comment">//检查一个字符串中是否含有abc或adc或aec</span></span><br><span class="line">reg = <span class="regexp">/a[bde]c/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">&quot;abc&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h3><blockquote>
<p>-可以搜索字符串中是否含有指定内容</p>
<p>-如果搜索到指定内容,则会返回第一次出现的索引,如果没有搜索到返回-1</p>
<p>-它可以接受一个正则表达式作为参数,然后会根据正则表达式去检索字符串</p>
<p>-search()只会查找第一个,即使设置全局匹配,也没用</p>
</blockquote>
<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><blockquote>
<p>-可以根据正则表达式,从一个字符串中将符合条件的内容提取出来</p>
<p>-默认情况下我们的match只会找到第一个符合要求的内容,找到以后就停止检索</p>
<p>-我们可以设置正则表达式为全局匹配模式,这样就会匹配到所有的内容</p>
<p>​    可以为一个正则表达式设置多个匹配模式,且顺序无所谓</p>
<p>-match()会将匹配到的内容封装到一个数组中返回,即使只查询到一个结果 </p>
</blockquote>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><blockquote>
<p>-可以将字符串中指定内容替换为新的内容</p>
<p>-参数:</p>
<p>​        1.被替换的内容</p>
<p>​        2.新的内容</p>
<p>-默认只会替换第一个</p>
</blockquote>
<h3 id="split-1"><a href="#split-1" class="headerlink" title="split()"></a>split()</h3><blockquote>
<p>可以将一个字符串拆分为一个数组</p>
<p>方法中可以传递一个正则表达式作为参数,这样方法将会根据正则表达式去拆分字符串</p>
<p>这个方法即使不指定全局匹配,也会全都拆分</p>
</blockquote>
<h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><blockquote>
<p>-通过量词可以设置一个内容出现的次数</p>
<p>-量词只对它前面的一个内容起作用</p>
<p>-{n} 正好出现n次</p>
<p>-{m,n}出现m-n次</p>
<p>-{m,}m次以上</p>
<p>-+至少一个,相当于{1,}</p>
<p>-* 0个或多个,相当于{0,}</p>
<p>^ 表示开头　</p>
<p>$ 表示结尾</p>
<p>. 表示任意字符   .表示.</p>
<p>\w 表示任意字母、数字</p>
<p>\W　除了字母、数字</p>
<p>\d　任意的数字［０－９］</p>
<p>\D　除了数字［0－9］</p>
<p>\s　空格</p>
<p>\S　除了空格</p>
<p>\b　单词边界</p>
<p>\B　除了单词边界</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//去除开头和结尾的空格</span></span><br><span class="line">reg = <span class="regexp">/^\s*|\s*$/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;    he  llo    &quot;</span>;</span><br><span class="line">str = str.replace(reg,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">//he  llo</span></span><br></pre></td></tr></table></figure>

<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><blockquote>
<p>代表的是整个浏览器的窗口,同时window也是网页中的全局对象</p>
</blockquote>
<h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><blockquote>
<p>-代表的当前浏览器的信息,通过该对象可以来识别不同的浏览器</p>
<p>-由于历史原因,Navigator对象中的大部分属性都已经不能帮助我们识别浏览器了</p>
<p>-一般我们只会使用userAgent来判断浏览器的信息</p>
</blockquote>
<h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><blockquote>
<p>-代表当前浏览器的地址栏信息,通过Location可以获取地址信息,或者操作浏览器跳转页面</p>
<p>-该对象中封装了浏览器的地址栏的信息</p>
<p>-如果直接将location属性修改为一个完整的路径,或相对路径,则页面会自动跳转到该路径,并且会生成相应的历史记录</p>
<p>-语法:location  = “<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a></p>
</blockquote>
<h4 id="assign"><a href="#assign" class="headerlink" title="assign()"></a>assign()</h4><blockquote>
<p>用来跳转到其他页面,作用和直接修改location一样</p>
<p>语法: location.assign(“<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a>);</p>
</blockquote>
<h4 id="reload"><a href="#reload" class="headerlink" title="reload()"></a>reload()</h4><blockquote>
<p>-用于重新加载当前页面</p>
<p>-如果在方法中传递一个true,作为参数,则会强制清空缓存,刷新页面 语法: location.reload(true)</p>
</blockquote>
<h4 id="replace-1"><a href="#replace-1" class="headerlink" title="replace()"></a>replace()</h4><blockquote>
<p>-可以使用新的页面替换当前页面,调用完毕也会跳转页面</p>
</blockquote>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><blockquote>
<p>-代表浏览器的历史记录,可以通过该对象来操作浏览器的历史记录</p>
<p>​        由于隐私原因,该对象不能获取到具体的历史记录,只能操作浏览器向前或向后翻页</p>
<p>​        而且该操作只在当次访问时有效</p>
</blockquote>
<h4 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h4><blockquote>
<p>可以获取到当前访问的链接数量</p>
</blockquote>
<h5 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h5><blockquote>
<p>可以用来回退到上一个页面,作用和浏览器的回退按钮一样</p>
<p>语法: history.back()</p>
</blockquote>
<h5 id="forward"><a href="#forward" class="headerlink" title="forward()"></a>forward()</h5><blockquote>
<p>可以跳转下一个页面,作用和浏览器的前进按钮一样</p>
<p>语法: history.forward()</p>
</blockquote>
<h5 id="go"><a href="#go" class="headerlink" title="go()"></a>go()</h5><blockquote>
<p>可以用来跳转到指定页面</p>
<p>它需要一个整数作为参数</p>
<p>​    1:表示向前跳转一个页面</p>
<p>​    2:表示向前跳转两个页面</p>
<p>​    -1:向后跳转一个页面</p>
<p>​    -2:向后跳转两个页面</p>
<p>语法: history.go(index)</p>
</blockquote>
<h2 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h2><blockquote>
<p>代表用户的屏幕的信息,通过该对象可以获取到用户的显示器的相关的信息</p>
</blockquote>
<hr>
<p><strong>注意</strong></p>
<blockquote>
<p>这些BOM对象在浏览器中都是作为window对象的属性保存的,可以通过window对象来使用,也可以直接使用</p>
</blockquote>
<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h2><blockquote>
<p>-定时调用</p>
<p>-可以将一个函数,每隔一段时间执行一次</p>
<p>-参数:</p>
<p>​    1.回调函数,该函数会每隔一段时间被调用一次</p>
<p>​    2.每次调用间隔的时间,单位是毫秒</p>
<p>-返回值:</p>
<p>​        返回一个Number类型的数据</p>
<p>​        这个数字用来作为定时器的唯一标识</p>
</blockquote>
<h2 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a>clearInterval()</h2><blockquote>
<p>可以用来关闭一个定时器</p>
<p>方法中需要一个定时器的标识作为参数,这样将关闭标识对应的定时器</p>
</blockquote>
<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><blockquote>
<p>-延时调用:</p>
<p>​        延时调用一个函数不马上执行,而是隔一段时间以后执行,而且只会执行一次</p>
<p>-延时调用和定时调用的区别,定时调用会执行多次,而延时调用只会执行一次</p>
<p>-延时调用和定时调用实际上是可以互相代替的,在开发中可以根据自己的需要去选择</p>
</blockquote>
<h2 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a>clearTimeout()</h2><blockquote>
<p>用来关闭一个延时调用</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2021/10/30/RabbitMQ/</url>
    <content><![CDATA[<h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h2 id="MQ的相关概念"><a href="#MQ的相关概念" class="headerlink" title="MQ的相关概念"></a>MQ的相关概念</h2><ol>
<li><p>什么是MQ</p>
<blockquote>
<p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO先入先出，只不过队列中存放的内容是message而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了MQ之后，消息发送上游只需要依赖MQ，不用依赖其他服务。</p>
</blockquote>
</li>
<li><p>为什么要用MQ</p>
<ol>
<li><p>流量消峰</p>
<p>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p>
</li>
<li><p>应用解耦</p>
<p>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可，下单用户感受不到物流系统的故障，提升系统的可用性。</p>
</li>
<li><p>异步处理</p>
<p>有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api， B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题， A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api。同样B 服务也不用做这些操作。A 服务还能及时的得到异步处理成功的消息。</p>
</li>
</ol>
</li>
<li><p>MQ的选择</p>
<ol>
<li><p>kafka</p>
<p>Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。大型公司建议可以选用，如果有日志采集功能，肯定是首选 kafka 了。</p>
</li>
<li><p>RocketMQ </p>
<p>天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ在稳定性上可能更值得信赖，这些业务场景在阿里双11已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择 RocketMQ。 </p>
</li>
<li><p>RabbitMQ</p>
<p>结合 erlang 语言本身的并发优势，性能好时效性微秒级，社区活跃度也比较高，管理界面用起来十分方便，如果你的数据量没有那么大，中小型公司优先选择功能比较完备的 RabbitMQ。</p>
</li>
</ol>
</li>
</ol>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>RabbitMQ 是一个消息中间件：它接受并转发消息。你可以把它当做一个快递站点，当你要发送一个包裹时，你把你的包裹放到快递站，快递员最终会把你的快递送到收件人那里，按照这种逻辑 RabbitMQ 是一个快递站，一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于，它不处理快件而是接收，<br>存储和转发消息数据。 </p>
</blockquote>
<h3 id="四大核心概念"><a href="#四大核心概念" class="headerlink" title="四大核心概念"></a>四大核心概念</h3><ol>
<li><p>生产者</p>
<p>产生数据发送消息的程序是生产者</p>
</li>
<li><p>交换机</p>
<p>交换机是  RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p>
</li>
<li><p>队列</p>
<p>队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式 </p>
</li>
<li><p>消费者</p>
<p>消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p>
</li>
</ol>
<p><img src="../../bolgimgs/RabbitMQ/%E6%A6%82%E5%BF%B5%E5%9B%BE.png"></p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="../../bolgimgs/RabbitMQ/%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p>
<p><strong>Broker：</strong>接收和分发消息的应用，RabbitMQ Server 就是 Message Broker </p>
<p><strong>Virtual host：</strong>出于多租户和安全因素设计的，把  AMQP  的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个 vhost，每个用户在自己的 vhost  创建 exchange／queue  等 </p>
<p><strong>Connection：</strong>publisher／consumer 和 broker 之间的 TCP 连接 </p>
<p><strong>Channel：</strong>如果每一次访问 RabbitMQ  都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id  帮助客户端和 message broker  识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的Connection 极大减少了操作系统建立 TCP connection 的开销  </p>
<p><strong>Exchange：</strong>message  到达 broker  的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到 queue  中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast) </p>
<p><strong>Queue：</strong>消息最终被送到这里等待 consumer 取走 </p>
<p><strong>Binding：</strong>exchange 和queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据  </p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p>RabbitMQ是用Erlang语言实现的,所以需要先安装Erlang的环境</p>
</blockquote>
<h4 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h4><ol>
<li>下载地址: <a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a></li>
</ol>
<p>​    进入GitHub</p>
<img src="../../bolgimgs/RabbitMQ/Erlang1.png" alt="Erlang1" style="zoom:50%;" />

<p>​    点击Releases,选择要下载的版本,这里选择opt_src_24.1.tar.gz</p>
<img src="../../bolgimgs/RabbitMQ/Erlang2.png" alt="Erlang2" style="zoom:50%;" />

<p>​    使用Xftp工具将下载的文件上传的虚拟机中,这里上传到了/usr/local/software中</p>
<ol start="2">
<li><p>解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf otp_src_24.1.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>准备环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</span><br></pre></td></tr></table></figure></li>
<li><p>进入目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd otp_src_24.1</span><br></pre></td></tr></table></figure></li>
<li><p>设定安装规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac</span><br></pre></td></tr></table></figure></li>
<li><p>编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>
<li><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文件最后加入配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> erlang environment</span></span><br><span class="line">export ERL_PATH=/usr/local/erlang/bin</span><br><span class="line">export PATH=$ERL_PATH:$PATH</span><br></pre></td></tr></table></figure></li>
<li><p>使配置生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>检验是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">erl</span><br></pre></td></tr></table></figure>

<p><img src="../../bolgimgs/RabbitMQ/%E6%A3%80%E9%AA%8Cerlang.png" alt="检验erlang"></p>
<p>退出用 halt().</p>
</li>
</ol>
<h4 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h4><ol>
<li><p>下载:<a href="https://www.rabbitmq.com/">https://www.rabbitmq.com/</a></p>
<p>找到RabbitMQ3.9.8.release</p>
<img src="../../bolgimgs/RabbitMQ/rabbitmq1.png" alt="rabbitmq1" style="zoom:50%;" />

<p>找到RabbitMQ installation guides</p>
<img src="../../bolgimgs/RabbitMQ/rabbitmq2.png" alt="rabbitmq2" style="zoom:50%;" />

<p>找到install Generic binary build</p>
</li>
</ol>
<img src="../../bolgimgs/RabbitMQ/rabbitmq3.png" alt="rabbitmq3" style="zoom:50%;" />

<p>​    点击rabbitmq-server-generic-unix-3.9.8.tar.xz开始下载</p>
<img src="../../bolgimgs/RabbitMQ/rabbitmq4.png" alt="rabbitmq4" style="zoom:50%;" />

<p>​    使用Xftp工具将下载的文件上传的虚拟机中,这里上传到了/usr/local/software中</p>
<ol start="2">
<li><p>解压RabbitMQ</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">xz -d rabbitmq-server-generic-unix-3.9.8.tar.xz</span><br><span class="line">tar -xvf rabbitmq-server-generic-unix-3.9.8.tar &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure></li>
<li><p>配置RabbitMQ环境</p>
<p>编辑环境配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文件最后加入下面的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> rabbitmq environment</span></span><br><span class="line">export RABBITMQ_HOME=/usr/local/software/rabbitmq_software/rabbitmq_server-3.9.8</span><br><span class="line">export PATH=$&#123;RABBITMQ_HOME&#125;/sbin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure>

<p>重新读取配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>开启Web管理界面插件，便于访问RabbitMQ</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/software/rabbitmq_software/rabbitmq_server-3.9.8/sbin</span><br><span class="line"></span><br><span class="line">./rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></li>
<li><p>设置RabbitMQ开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>添加如下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line"> </span><br><span class="line">/usr/local/software/rabbitmq_software/rabbitmq_server-3.7.16/sbin/rabbitmq-server -detached</span><br></pre></td></tr></table></figure></li>
<li><p>后台启动RabbitMQ服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./rabbitmq-server -detached</span><br></pre></td></tr></table></figure></li>
<li><p>在浏览器地址栏输入 服务器的ip地址:15672可以看到Login failed (登录失败)，User can only log in via localhost (用户只能通过本地主机登录)，因为rabbitmq从3.3.0开始禁止使用guest/guest管理员权限通过除localhost外的访问,即可访问RabbitMQ的管理登录界面</p>
<p><img src="../../bolgimgs/RabbitMQ/rabbitmq5.png" alt="rabbitmq5"></p>
<p>RabbitMQ的Username 和 Password 默认为guest/guest</p>
</li>
<li><p>可以看到Login failed (登录失败)，User can only log in via localhost (用户只能通过本地主机登录)，因为rabbitmq从3.3.0开始禁止使用guest/guest管理员权限通过除localhost外的访问</p>
<p><strong>解决方案：</strong>如果想使用guest/guest通过远程机器访问，需要在/usr/local/software/rabbitmq_software/rabbitmq_server-3.9.8/ebin目录下找到rabbit.app文件，并把文件中的 {loopback_users, [&lt;&lt;”guest”&gt;&gt;]}, 删除其中的&lt;&lt;”guest”&gt;&gt;，修改后为{loopback_users, []}</p>
<p><strong>注意：</strong>{loopback_users, []}, 后面的逗号不能删除</p>
<p>从下图可以看到user和pass默认都是guest</p>
<p><img src="../../bolgimgs/RabbitMQ/rabbitmq6.png" alt="rabbitmq6"></p>
<p>删除后</p>
<p><img src="../../bolgimgs/RabbitMQ/rabbitmq7.png" alt="rabbitmq7"></p>
</li>
<li><p>重启RabbitMQ服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/software/rabbitmq_software/rabbitmq_server-3.7.16/sbin/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭服务</span></span><br><span class="line">rabbitmqctl stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动RabbitMQ服务</span></span><br><span class="line">./rabbitmq-server -detached</span><br></pre></td></tr></table></figure>

<p>使用rabbitmqctl stop命令时报错</p>
<p><strong>解决:</strong></p>
<p>在hosts文件中添加本机的ip和主机名的映射。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看主机名</span></span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>加入以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">主机地址 主机名</span><br></pre></td></tr></table></figure>

<p><img src="../../bolgimgs/RabbitMQ/rabbitmq8.png" alt="rabbitmq8"></p>
<p>重启即可</p>
</li>
</ol>
<h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><blockquote>
<p>用 Java 编写两个程序.发送单个消息的生产者和接收消息并打印出来的消费者。</p>
</blockquote>
<p>在下图中，“P”是我们的生产者，“C”是我们的消费者。中间的框是一个队列-RabbitMQ 代表使用者保留的消息缓冲区</p>
<p><img src="../../bolgimgs/RabbitMQ/hello1.png" alt="hello1"></p>
<ol>
<li><p>创建maven工程并添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--rabbitmq 依赖客户端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--操作文件流的一个依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>消息生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//设置工厂的ip 连接RabbitMQ的队列</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.244.131&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列</span></span><br><span class="line"><span class="comment">         * 参数1:队列名称</span></span><br><span class="line"><span class="comment">         * 2:队列里面的消息是否持久化 默认情况消息存储在内存中 false表示存储在内存中</span></span><br><span class="line"><span class="comment">         * 3:该队列是否只供一个消费者进行消费 是否进行消息共享,true可以多个消费者消费 false:只能一个消费者消费</span></span><br><span class="line"><span class="comment">         * 4:是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true自动删除 false不自动删除</span></span><br><span class="line"><span class="comment">         * 5:其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//发消息</span></span><br><span class="line">        String message = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 发送一个消息</span></span><br><span class="line"><span class="comment">         * 1.发送到哪个交换机</span></span><br><span class="line"><span class="comment">         * 2.路由的key值是哪个,本次是队列的名称</span></span><br><span class="line"><span class="comment">         * 3.其他参数信息</span></span><br><span class="line"><span class="comment">         * 4.发送消息的消息体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送完毕&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>消息消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.244.131&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明</span></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费消息被中断&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息</span></span><br><span class="line"><span class="comment">         * 1.消费哪个队列</span></span><br><span class="line"><span class="comment">         * 2.消费成功之后是否自动应答 true 代表自动应答 false 手动应答</span></span><br><span class="line"><span class="comment">         * 3.消费者未成功消费的回调</span></span><br><span class="line"><span class="comment">         * 4.消费者取消消费的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Work-Queues"><a href="#Work-Queues" class="headerlink" title="Work Queues"></a>Work Queues</h3><blockquote>
<p>工作队列(又称任务队列)的主要思想是避免立即执行资源密集型任务，而不得不等待它完成。相反我们安排任务在之后执行。我们把任务封装为消息并将其发送到队列。在后台运行的工作进程将弹出任务并最终执行作业。当有多个工作线程时，这些工作线程将一起处理这些任务。</p>
</blockquote>
<h4 id="轮训分发消息"><a href="#轮训分发消息" class="headerlink" title="轮训分发消息"></a>轮训分发消息</h4><ol>
<li><p>抽取工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此类为连接工厂创建信道的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Channel <span class="title">getChannel</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.244.131&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        com.rabbitmq.client.Channel channel = connection.createChannel();</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动两个工作线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jjf.rabbitmq.utils.RabbitMQUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.CancelCallback;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个工作线程(相当于之前的消费者)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = RabbitMQUtil.getChannel();</span><br><span class="line">        <span class="comment">//声明</span></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的消息: &quot;</span>+<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费消息被中断&quot;</span>+consumerTag);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息</span></span><br><span class="line"><span class="comment">         * 1.消费哪个队列</span></span><br><span class="line"><span class="comment">         * 2.消费成功之后是否自动应答 true 代表自动应答 false 手动应答</span></span><br><span class="line"><span class="comment">         * 3.消费者未成功消费的回调</span></span><br><span class="line"><span class="comment">         * 4.消费者取消消费的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C1等待接收消息....&quot;</span>);</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jjf.rabbitmq.utils.RabbitMQUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.CancelCallback;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个工作线程(相当于之前的消费者)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = RabbitMQUtil.getChannel();</span><br><span class="line">        <span class="comment">//声明</span></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的消息: &quot;</span>+<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费消息被中断&quot;</span>+consumerTag);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消费者消费消息</span></span><br><span class="line"><span class="comment">         * 1.消费哪个队列</span></span><br><span class="line"><span class="comment">         * 2.消费成功之后是否自动应答 true 代表自动应答 false 手动应答</span></span><br><span class="line"><span class="comment">         * 3.消费者未成功消费的回调</span></span><br><span class="line"><span class="comment">         * 4.消费者取消消费的回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;C2等待接收消息....&quot;</span>);</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动发送线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jjf.rabbitmq.utils.RabbitMQUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = RabbitMQUtil.getChannel();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成一个队列</span></span><br><span class="line"><span class="comment">         * 参数1:队列名称</span></span><br><span class="line"><span class="comment">         * 2:队列里面的消息是否持久化 默认情况消息存储在内存中 false表示存储在内存中</span></span><br><span class="line"><span class="comment">         * 3:该队列是否只供一个消费者进行消费 是否进行消息共享,true可以多个消费者消费 false:只能一个消费者消费</span></span><br><span class="line"><span class="comment">         * 4:是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true自动删除 false不自动删除</span></span><br><span class="line"><span class="comment">         * 5:其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            String message = sc.next();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 发送一个消息</span></span><br><span class="line"><span class="comment">             * 1.发送到哪个交换机</span></span><br><span class="line"><span class="comment">             * 2.路由的key值是哪个,本次是队列的名称</span></span><br><span class="line"><span class="comment">             * 3.其他参数信息</span></span><br><span class="line"><span class="comment">             * 4.发送消息的消息体</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息完成:&quot;</span>+message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果</p>
<blockquote>
<p>通过程序执行发现生产者总共发送 4 个消息，消费者 1 和消费者 2 分别分得两个消息，并且是按照有序的一个接收一次消息  </p>
</blockquote>
<img src="../../bolgimgs/RabbitMQ/work1.png" alt="work1" style="zoom:50%;" />

<img src="../../bolgimgs/RabbitMQ/work2.png" alt="work2" style="zoom: 80%;" /></li>
</ol>
<p><img src="../../bolgimgs/RabbitMQ/work3.png" alt="work3"></p>
<h4 id="消息应答"><a href="#消息应答" class="headerlink" title="消息应答"></a>消息应答</h4><ol>
<li><p>概念</p>
<blockquote>
<p>消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成了部分突然它挂掉了，会发生什么情况。RabbitMQ 一旦向消费者传递了一条消息，便立即将该消息标记为删除。在这种情况下，突然有个消费者挂掉了，我们将丢失正在处理的消息。以及后续<br>发送给该消费这的消息，因为它无法接收到。  </p>
<p>为了保证消息在发送过程中不丢失，rabbitmq 引入消息应答机制，消息应答就是:消费者在接收到消息并且处理该消息之后，告诉 rabbitmq 它已经处理了，rabbitmq 可以把该消息删除了。  </p>
</blockquote>
</li>
<li><p>自动应答</p>
<blockquote>
<p>消息发送后立即被认为已经传送成功，这种模式需要在高吞吐量和数据传输安全性方面做权衡,因为这种模式如果消息在接收到之前，消费者那边出现连接或者 channel 关闭，那么消息就丢失了,当然另一方面这种模式消费者那边可以传递过载的消息，没有对传递的消息数量进行限制， 当然这样有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使得内存耗尽，最终这些消费者线程被操作系统杀死，所以这种模式仅适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用。</p>
</blockquote>
</li>
<li><p>消息应答的方法</p>
<ol>
<li>Channel.basicAck(用于肯定确认)  RabbitMQ 已知道该消息并且成功的处理消息，可以将其丢弃了  </li>
<li>Channel.basicNack(用于否定确认)  </li>
<li>Channel.basicReject(用于否定确认)  与 Channel.basicNack 相比少一个参数不处理该消息了直接拒绝，可以将其丢弃了 </li>
</ol>
</li>
<li><p>Multiple 的解释 </p>
<p>手动应答的好处是可以批量应答并且减少网络拥堵</p>
<p>multiple 的 true 和 false 代表不同意思  </p>
<p> true 代表批量应答 channel 上未应答的消息  </p>
<pre><code>  比如说 channel 上有传送 tag 的消息 5,6,7,8 当前 tag 是 8 那么此时  
  5-8 的这些还未应答的消息都会被确认收到消息应答  
</code></pre>
<p> false 同上面相比  </p>
<pre><code>  只会应答 tag=8 的消息 5,6,7 这三个消息依然不会被确认收到消息应答 
</code></pre>
</li>
<li><p>消息自动重新入队</p>
<blockquote>
<p>如果消费者由于某些原因失去连接(其通道已关闭，连接已关闭或 TCP 连接丢失)，导致消息未发送 ACK 确认，RabbitMQ 将了解到消息未完全处理，并将对其重新排队。如果此时其他消费者可以处理，它将很快将其重新分发给另一个消费者。这样，即使某个消费者偶尔死亡，也可以确保不会丢失任何消息</p>
</blockquote>
</li>
<li><p>消息手动应答代码</p>
<blockquote>
<p>默认消息采用的是自动应答，所以我们要想实现消息消费过程中不丢失，需要把自动应答改为手动应答</p>
</blockquote>
<p><strong>消息生产者</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jjf.rabbitmq.utils.RabbitMQUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息在手动应答时是不丢失,放回队列中重新消费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_QUEUE_NAME = <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = RabbitMQUtil.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        channel.queueDeclare(TASK_QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//从控制台中输入信息</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext())&#123;</span><br><span class="line">            String message = scanner.next();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,TASK_QUEUE_NAME,<span class="keyword">null</span>,message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发出消息: &quot;</span>+message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jjf.rabbitmq.utils.RabbitMQUtil;</span><br><span class="line"><span class="keyword">import</span> com.jjf.rabbitmq.utils.SleepUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.CancelCallback;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_QUEUE_NAME = <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = RabbitMQUtil.getChannel();</span><br><span class="line">        System.out.println(<span class="string">&quot;C1等待消息处理时间较短&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//声明</span></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;</span><br><span class="line">            <span class="comment">//沉睡1秒</span></span><br><span class="line">            SleepUtil.sleep(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的消息: &quot;</span>+<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1.消息的标记</span></span><br><span class="line"><span class="comment">             * 2.是否批量应答 false:不批量应答信道中的消息 true:批量</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(message.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者取消消费接口回调&quot;</span>+consumerTag);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//采用手动应答</span></span><br><span class="line">        channel.basicConsume(TASK_QUEUE_NAME,autoAck,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>消费者2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jjf.rabbitmq.three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jjf.rabbitmq.utils.RabbitMQUtil;</span><br><span class="line"><span class="keyword">import</span> com.jjf.rabbitmq.utils.SleepUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.CancelCallback;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DeliverCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Work4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TASK_QUEUE_NAME = <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = RabbitMQUtil.getChannel();</span><br><span class="line">        System.out.println(<span class="string">&quot;C2等待消息处理时间较长&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> autoAck = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//声明</span></span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, message)-&gt;&#123;</span><br><span class="line">            <span class="comment">//沉睡1秒</span></span><br><span class="line">            SleepUtil.sleep(<span class="number">30</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的消息: &quot;</span>+<span class="keyword">new</span> String(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1.消息的标记</span></span><br><span class="line"><span class="comment">             * 2.是否批量应答 false:不批量应答信道中的消息 true:批量</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(message.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        CancelCallback cancelCallback = (consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者取消消费接口回调&quot;</span>+consumerTag);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//采用手动应答</span></span><br><span class="line">        channel.basicConsume(TASK_QUEUE_NAME,autoAck,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>正常情况下消息发送方发送两个消息 C1 和 C2 分别接收到消息并进行处理</p>
<p><img src="../../bolgimgs/RabbitMQ/work4.png" alt="work4"></p>
<p><img src="../../bolgimgs/RabbitMQ/work5.png" alt="work5"></p>
<p><img src="../../bolgimgs/RabbitMQ/work6.png" alt="work6"></p>
<p>在发送者发送消息 dd，发出消息之后的把 C2 消费者停掉，按理说该 C2 来处理该消息，但是由于它处理时间较长，在还未处理完，也就是说 C2 还没有执行 ack 代码的时候，C2 被停掉了，此时会看到消息被 C1 接收到了，说明消息 dd 被重新入队，然后分配给能处理消息的 C1 处理了  </p>
<p><img src="../../bolgimgs/RabbitMQ/work7.png" alt="work7"></p>
</li>
</ol>
<p><img src="../../bolgimgs/RabbitMQ/work8.png" alt="work8"></p>
<h3 id="RabbitMQ持久化"><a href="#RabbitMQ持久化" class="headerlink" title="RabbitMQ持久化"></a>RabbitMQ持久化</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><blockquote>
<p>刚刚我们已经看到了如何处理任务不丢失的情况，但是如何保障当 RabbitMQ 服务停掉以后消息生产者发送过来的消息不丢失。默认情况下 RabbitMQ 退出或由于某种原因崩溃时，它忽视队列和消息，除非告知它不要这样做。确保消息不会丢失需要做两件事：我们需要将队列和消息都标记为持久化。  </p>
</blockquote>
<h4 id="队列如何实现持久化"><a href="#队列如何实现持久化" class="headerlink" title="队列如何实现持久化"></a>队列如何实现持久化</h4><blockquote>
<p>之前我们创建的队列都是非持久化的，rabbitmq 如果重启的化，该队列就会被删除掉，如果要队列实现持久化 需要在声明队列的时候把 durable 参数设置为持久化 </p>
<p>但是需要注意的就是如果之前声明的队列不是持久化的，需要把原先队列先删除，或者重新创建一个持久化的队列，不然就会出现错误</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要持久化</span></span><br><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">channel.queueDeclare(TASK_QUEUE_NAME,durable,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h4 id="消息实现持久化"><a href="#消息实现持久化" class="headerlink" title="消息实现持久化"></a>消息实现持久化</h4><blockquote>
<p>要想让消息实现持久化需要在消息生产者修改代码，MessageProperties.PERSISTENT_TEXT_PLAIN 添加这个属性。</p>
<p>将消息标记为持久化并不能完全保证不会丢失消息。尽管它告诉  RabbitMQ  将消息保存到磁盘，但是这里依然存在当消息刚准备存储在磁盘的时候  但是还没有存储完，消息还在缓存的一个间隔点。此时并没有真正写入磁盘。持久性保证并不强，但是对于我们的简单任务队列而言，这已经绰绰有余了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>,TASK_QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN,message.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure>

<h4 id="不公平分发"><a href="#不公平分发" class="headerlink" title="不公平分发"></a>不公平分发</h4><blockquote>
<p>最开始的时候我们学习到 RabbitMQ 分发消息采用的轮训分发，但是在某种场景下这种策略并不是很好，比方说有两个消费者在处理任务，其中有个消费者 1 处理任务的速度非常快，而另外一个消费者 2 处理速度却很慢，这个时候我们还是采用轮训分发的化就会到这处理速度快的这个消费者很大一部分时间处于空闲状态，而处理慢的那个消费者一直在干活，这种分配方式在这种情况下其实就不太好，但是RabbitMQ 并不知道这种情况它依然很公平的进行分发。</p>
</blockquote>
<p>为了避免这种情况，我们可以设置参数 channel.basicQos(1);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置不公平分发</span></span><br><span class="line"><span class="keyword">int</span> prefetchCount = <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>意思就是如果这个任务我还没有处理完或者我还没有应答你，你先别分配给我，我目前只能处理一个任务，然后  rabbitmq 就会把该任务分配给没有那么忙的那个空闲消费者，当然如果所有的消费者都没有完成手上任务，队列还在不停的添加新任务，队列有可能就会遇到队列被撑满的情况，这个时候就只能添加新的 worker 或者改变其他存储任务的策略。</p>
</blockquote>
<h4 id="预取值"><a href="#预取值" class="headerlink" title="预取值"></a>预取值</h4><blockquote>
<p>本身消息的发送就是异步发送的，所以在任何时候，channel 上肯定不止只有一个消息另外来自消费者的手动确认本质上也是异步的。因此这里就存在一个未确认的消息缓冲区，因此希望开发人员能限制此缓冲区的大小，以避免缓冲区里面无限制的未确认消息问题。这个时候就可以通过使用 basic.qos 方法设置“预取计数”值来完成的。该值定义通道上允许的未确认消息的最大数量。一旦数量达到配置的数量， RabbitMQ 将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认，例如，假设在通道上有未确认的消息 5、6、7，8，并且通道的预取计数设置为 4，此时RabbitMQ 将不会在该通道上再传递任何消息，除非少有一个未应答的消息被 ack。比方说 tag=6 这个消息刚刚被确认 ACK，RabbitMQ 将会感知这个情况到并再发送一条消息。消息应答和 QoS 预取值对用户吞吐量有重大影响。通常，增加预取将提高向消费者传递消息的速度。虽然自动应答传输消息速率是最佳的，但是，在这种情况下已传递但尚未处理的消息的数量也会增加，从而增加了消费者的  RAM  消耗(随机存取存储器)应该小心使用具有无限预处理的自动确认模式或手动确认模式，消费者消费了大量的消息如果没有确认的话，会导致消费者连接节点的内存消耗变大，所以找到合适的预取值是一个反复试验的过程，不同的负载该值取值也不同 100 到 300 范 围内的值通常可提供最佳的吞吐量，并且不会给消费者带来太大的风险。预取值为  1 是最保守的。当然这将使吞吐量变得很低，特别是消费者连接延迟很严重的情况下，特别是在消费者连接等待时间较长的环境中。对于大多数应用来说，稍微高一点的值将是最佳的。</p>
</blockquote>
<h3 id="发布确认"><a href="#发布确认" class="headerlink" title="发布确认"></a>发布确认</h3><h4 id="发布确认原理"><a href="#发布确认原理" class="headerlink" title="发布确认原理"></a>发布确认原理</h4><blockquote>
<p>生产者将信道设置成 confirm 模式，一旦信道进入 confirm 模式，所有在该信道上面发布的消息都将会被指派一个唯一的 ID(从 1 开始)，一旦消息被投递到所有匹配的队列之后，broker 就会发送一个确认给生产者(包含消息的唯一 ID)，这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker 回传给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置basic.ack 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理。  </p>
<p>confirm 模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果 RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消息，生产者应用程序同样可以在回调方法中处理该 nack 消息。</p>
</blockquote>
<h4 id="发布确认的策略"><a href="#发布确认的策略" class="headerlink" title="发布确认的策略"></a>发布确认的策略</h4><ol>
<li><p>开启发布确认的方法</p>
<p>发布确认默认是没有开启的，如果要开启需要调用方法 confirmSelect，每当你要想使用发布确认，都需要在 channel 上调用该方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Channel channel = RabbitMQUtil.getChannel();</span><br><span class="line"><span class="comment">//开启发布确认</span></span><br><span class="line">channel.confirmSelect();</span><br></pre></td></tr></table></figure></li>
<li><p>单个确认发布</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2021/05/23/Spring/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="Spring框架概述"><a href="#Spring框架概述" class="headerlink" title="Spring框架概述"></a>Spring框架概述</h1><blockquote>
<p>Spring是一个开源框架，它由Rod Johnson创建。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。</p>
<p>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。</p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/Spring/spring%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p>
<h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><h2 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h2><h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><blockquote>
<p>1.控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理</p>
<p>2.使用IOC的目的：为了降低耦合度</p>
</blockquote>
<h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><blockquote>
<p>1.用到的技术:xml解析、工厂模式、反射</p>
</blockquote>
<h2 id="IOC接口-BeanFactory"><a href="#IOC接口-BeanFactory" class="headerlink" title="IOC接口(BeanFactory)"></a>IOC接口(BeanFactory)</h2><blockquote>
<p>1.IOC思想基于IOC容器完成,IOC容器底层就是对象工厂</p>
<p>2.Spring提供IOC容器实现两种方式:(两个接口)</p>
<p>  (1)BeanFactory: IOC容器基本实现方式,是Spring内部使用的接口,不提供开发人员进行使用.</p>
<p>​    <strong>特点:</strong> 加载配置文件时候不会创建对象,在获取对象(使用对象)才去创建对象.</p>
<p>  (2)ApplicationContext: 是BeanFactory接口的子接口.提供更多更强大的功能,一般是由开发人员进行使用</p>
<p>​    <strong>特点:</strong> 加载配置文件时候就会把在配置中的对象进行创建</p>
</blockquote>
<h3 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h3><p>1.FileSystemXmlApplicationContext:参数是带盘符的路径</p>
<p>2.ClassPathXmlApplicationContext:参数是类路径</p>
<h2 id="IOC操作管理bean"><a href="#IOC操作管理bean" class="headerlink" title="IOC操作管理bean"></a>IOC操作管理bean</h2><h3 id="1-什么是bean管理"><a href="#1-什么是bean管理" class="headerlink" title="1.什么是bean管理"></a>1.什么是bean管理</h3><blockquote>
<p>Bean管理指的是两个操作</p>
<p>1.Spring创建对象</p>
<p>2.Spring注入属性</p>
</blockquote>
<h3 id="2-Bean管理操作有两种方式"><a href="#2-Bean管理操作有两种方式" class="headerlink" title="2.Bean管理操作有两种方式"></a>2.Bean管理操作有两种方式</h3><blockquote>
<p>1.基于xml配置文件方式实现</p>
<p>2.基于注解方式实现</p>
</blockquote>
<h3 id="3-基于xml方式创建对象"><a href="#3-基于xml方式创建对象" class="headerlink" title="3.基于xml方式创建对象"></a>3.基于xml方式创建对象</h3><blockquote>
<p>1.在spring配置文件中,使用bean标签,标签里面添加对应的属性,就可以实现对象创建</p>
<p>2.在bean标签有很多属性,常用属性:</p>
<p>  id:唯一标识</p>
<p>  class:全限定类名</p>
<p>3.创建对象的时候,默认也是执行无参数构造方法完成对象的创建</p>
</blockquote>
<h4 id="3-1-基于xml方式注入属性"><a href="#3-1-基于xml方式注入属性" class="headerlink" title="3.1 基于xml方式注入属性"></a>3.1 基于xml方式注入属性</h4><blockquote>
<p>DI:依赖注入,就是注入属性</p>
<p>  第一种注入方式:</p>
<p>  第二种注入方式:</p>
</blockquote>
<h4 id="3-2使用set方法进行注入"><a href="#3-2使用set方法进行注入" class="headerlink" title="3.2使用set方法进行注入"></a>3.2使用set方法进行注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在spring配置文件配置对象创建,配置属性注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.entity.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property属性完成属性注入</span></span><br><span class="line"><span class="comment">            name:类里面的属性名称</span></span><br><span class="line"><span class="comment">            value:向属性注入的值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-3使用有参构造进行注入"><a href="#3-3使用有参构造进行注入" class="headerlink" title="3.3使用有参构造进行注入"></a>3.3使用有参构造进行注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--有参构造注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.entity.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4xml注入其他类型"><a href="#3-4xml注入其他类型" class="headerlink" title="3.4xml注入其他类型"></a>3.4xml注入其他类型</h4><h5 id="3-4-1字面量"><a href="#3-4-1字面量" class="headerlink" title="3.4.1字面量"></a>3.4.1字面量</h5><p><strong>1.null值</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2.特殊符号</strong></p>
<blockquote>
<p>1.把特殊符号进行转义</p>
<p>2.把带特殊符号内容写到CDATA </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;张三&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-4-2注入外部bean"><a href="#3-4-2注入外部bean" class="headerlink" title="3.4.2注入外部bean"></a>3.4.2注入外部bean</h5><p>dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl update...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService add...&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-4-3注入内部bean和级联赋值"><a href="#3-4-3注入内部bean和级联赋值" class="headerlink" title="3.4.3注入内部bean和级联赋值"></a>3.4.3注入内部bean和级联赋值</h5><blockquote>
<p>一对多关系:部门和员工</p>
<p>​    一个部门有多个员工,一个员工属于一个部门.</p>
<p>​    部门是一,员工是多.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String deptName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptName</span><span class="params">(String deptName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptName = deptName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDeptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String EmpName;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//员工属于某个部门,使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpName</span><span class="params">(String empName)</span> </span>&#123;</span><br><span class="line">        EmpName = empName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span>+EmpName+<span class="string">&quot;,gender=&quot;</span>+gender+<span class="string">&quot;,dept=&quot;</span>+dept.getDeptName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先设置两个普通的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保安&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先设置两个普通的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--级联赋值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种写法   dept属性必须要有getter方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财务部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-4-4xml注入集合属性"><a href="#3-4-4xml注入集合属性" class="headerlink" title="3.4.4xml注入集合属性"></a>3.4.4xml注入集合属性</h5><p>1.注入数组类型属性</p>
<p>2.注入List集合类型属性</p>
<p>3.注入Map集合类型属性</p>
<p>4.注入Set集合类型属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(String[] courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(courses));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(maps);</span><br><span class="line">        System.out.println(sets);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--集合类型属性的注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.collectiontype.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>c++<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>java<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--集合类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>小三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set类型属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入List集合类型,值是对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MyBatis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SpringMVC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>提取List集合类型注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提取List集合类型注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>C语言<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.collectiontype.Book&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-FactoryBean"><a href="#4-FactoryBean" class="headerlink" title="4.FactoryBean"></a>4.FactoryBean</h3><blockquote>
<p>1.Spring有两种类型的bean,一种是普通bean,另外一种是工厂bean(FactoryBean)</p>
<p>2.普通bean: 在配置文件中定义bean类型就是返回类型</p>
<p>3.工厂bean: 在配置文件中定义bean类型可以和返回类型不一样</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Course course = <span class="keyword">new</span> Course();</span><br><span class="line">        course.setCourseName(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.factory.MyBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line">    Course course = context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);</span><br><span class="line">    System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-bean作用域"><a href="#5-bean作用域" class="headerlink" title="5.bean作用域"></a>5.bean作用域</h3><blockquote>
<p>1.在Spring里面,设置创建bean实例是单实例还是多实例</p>
<p>2.在Spring里面,默认情况下,bean是单实例对象</p>
<p>3.如何设置单实例还是多实例</p>
<p>  在spring配置文件bean标签里面有属性(scope)用于设置单实例还是多实例</p>
<p>  scope属性值:</p>
<p>​    singleton: 表示是单实例对象,默认值</p>
<p>​    prototype:表示多实例对象</p>
<p>​    request:会把对象放到request中</p>
<p>​    session:会把对象放到session域中</p>
<p>​    singleton和prototype的区别</p>
<p>​      1.singleton表示单实例,prototype表示多实例</p>
<p>​      2.设置scope的值是singleton的时候,加载spring配置文件的时候就会创建单实例对象</p>
<p>​      3.设置scope的值是prototype的时候,不是在加载spring配置文件的时候创建对象,在调用getBean方法的时候创建多实例对象</p>
</blockquote>
<h3 id="6-bean生命周期"><a href="#6-bean生命周期" class="headerlink" title="6.bean生命周期"></a>6.bean生命周期</h3><blockquote>
<p>生命周期:从对象创建到对象销毁的过程</p>
<p>bean的后置处理器,bean生命周期有七步:</p>
<p>  1.通过构造器创建bean实例(无参数构造)</p>
<p>  2.为bean的属性设置值或对其他bean的引用(调用set方法)</p>
<p>  <strong>3.把bean实例传递给bean后置处理器的方法,会执行postProcessBeforeInitialization方法</strong></p>
<p>  4.调用bean的初始化的方法(需要进行配置初始化的方法)</p>
<p>  <strong>5.把bean实例传递给bean后置处理器的方法,会执行postProcessAfterInitialization</strong></p>
<p>  6.bean可以使用了(对象获取到了)</p>
<p>  7.当容器关闭的时候,调用bean的销毁的方法(需要进行配置销毁的方法)</p>
</blockquote>
<h3 id="7-XML自动装配"><a href="#7-XML自动装配" class="headerlink" title="7.XML自动装配"></a>7.XML自动装配</h3><blockquote>
<p>自动装配:根据指定装配规则(属性名称或者属性类型),Spring自动将匹配的属性值进行注入</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--实现自动装配</span></span><br><span class="line"><span class="comment">    bean标签属性autowire,配置自动装配</span></span><br><span class="line"><span class="comment">    属性值:</span></span><br><span class="line"><span class="comment">        byName:根据属性名称注入,注入值bean的id值和类属性名称一样</span></span><br><span class="line"><span class="comment">        byType:根据属性类型注入(注意:不能定义多个同类型)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.entity.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.entity.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-1引入外部属性文件"><a href="#7-1引入外部属性文件" class="headerlink" title="7.1引入外部属性文件"></a>7.1引入外部属性文件</h4><blockquote>
<p>1.直接配置数据库信息</p>
<p>  (1)配置德鲁伊连接池</p>
<p>2.引入外部属性文件配置数据库连接池</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--直接配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-基于注解方式"><a href="#8-基于注解方式" class="headerlink" title="8.基于注解方式"></a>8.基于注解方式</h3><h4 id="8-1-注解"><a href="#8-1-注解" class="headerlink" title="8.1 注解"></a>8.1 注解</h4><blockquote>
<p>1.注解: 是代码特殊标记,格式:@注解名称(属性名称=属性值,属性名称=属性值,…)</p>
<p>2.注解可以作用在类上面,方法上面,属性上面</p>
<p>3.使用注解的目的:简化xml配置.</p>
</blockquote>
<h4 id="8-2-Spring针对Bean管理中创建对象提供注解"><a href="#8-2-Spring针对Bean管理中创建对象提供注解" class="headerlink" title="8.2 Spring针对Bean管理中创建对象提供注解"></a>8.2 Spring针对Bean管理中创建对象提供注解</h4><blockquote>
<p>1.Component</p>
<p>2.Service</p>
<p>3.Controller</p>
<p>4.Repository</p>
<p>上面四个注解功能是一样的,都可以用来创建bean实例</p>
</blockquote>
<h4 id="8-3-基于注解方式实现对象创建"><a href="#8-3-基于注解方式实现对象创建" class="headerlink" title="8.3 基于注解方式实现对象创建"></a>8.3 基于注解方式实现对象创建</h4><blockquote>
<p>1.引入依赖 spring-aop</p>
<p>2.开启组件扫描</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jjf&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--context:include-filter:设置扫描哪些内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jjf&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--context:exclude-filter:设置那些不扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jjf&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="8-4基于注解方式实现属性注入"><a href="#8-4基于注解方式实现属性注入" class="headerlink" title="8.4基于注解方式实现属性注入"></a>8.4基于注解方式实现属性注入</h4><blockquote>
<p>1.@Autowired: 根据属性类型进行自动注入</p>
<p>​    第一步:在service和dao类上添加创建对象注解</p>
<p>​    第二步:在service里面注入dao对象,在service类里面添加dao类型的属性,在属性上使用注解(不需要添加set方法)</p>
<p>2.Qualifier: 根据属性的名称进行注入</p>
<p>​    1.要和@Autowired一起使用</p>
<p>​    2.Qualifier里面的参数是类的名字</p>
<p>3.@Resource: 可以根据类型注入,也可以根据名称注入</p>
<p>​    @Resource: 根据类型进行注入</p>
<p>​    @Resource(name=”userDaoImpl”): 根据名称进行注入</p>
<p>4.@Value:注入普通类型属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;张三&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="8-5完全注解开发"><a href="#8-5完全注解开发" class="headerlink" title="8.5完全注解开发"></a>8.5完全注解开发</h4><p>1.创建配置类,替代xml配置文件 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//作为配置类,替代xml文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.jjf&quot;&#125;)</span>  <span class="comment">//开启扫描</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">    UserService userService = context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。</p>
<p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p>通俗描述: 不通过修改源代码方式,在主干功能里面添加新功能</p>
</blockquote>
<h2 id="底层原理-1"><a href="#底层原理-1" class="headerlink" title="底层原理"></a>底层原理</h2><blockquote>
<p>1.AOP底层使用动态代理</p>
<p>  有两种情况动态代理</p>
<p>​    (1)有接口情况,使用JDK动态代理</p>
<p>​        创建接口实现类的代理对象,增强类的方法</p>
<p>​    (2)没有接口情况,使用CGLIB动态代理</p>
<p>​        创建子类的代理对象,增强类的方法</p>
</blockquote>
<h2 id="操作术语"><a href="#操作术语" class="headerlink" title="操作术语"></a>操作术语</h2><blockquote>
<p>1.连接点: 类里面哪些方法可以被增强,这些方法称为连接点</p>
<p>2.切入点: 实际被真正增强的方法,称为切入点</p>
<p>3.通知(增强): </p>
<p>​    (1):实际增强的逻辑部分称为通知(增强)</p>
<p>​    (2):通知有多种类型:</p>
<p>​        前置通知: 方法执行前之前</p>
<p>​        后置通知: 方法执行前之后</p>
<p>​        环绕通知: 方法执行前之前后</p>
<p>​        异常通知: 方法发生异常的时候执行</p>
<p>​        最终通知: 不管发生什么,最终都要执行</p>
<p>4.切面: 是动作,把通知应用到切入点的过程</p>
</blockquote>
<h2 id="AOP操作"><a href="#AOP操作" class="headerlink" title="AOP操作"></a>AOP操作</h2><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h3><blockquote>
<p>1.Spring框架一般都是基于AspectJ实现AOP操作    </p>
<p>​    AspectJ: AspectJ不是Spring组成部分,独立AOP框架,一般把AspectJ和Spring框架一起使用,进行AOP操作</p>
<p>2.基于AspectJ实现AOP操作</p>
<p>​    (1)基于xml配置文件</p>
<p>​    (2)基于注解方式实现(常用)</p>
<p>3.在项目里面引入AOP的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/aopalliance/aopalliance --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;aopalliance&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aopalliance&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.8&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>4.切入点表达式</p>
<p>​    (1)切入点表达式作用:知道对哪个类里面的那个方法进行增强</p>
<p>​    (2)语法结构:</p>
<p>​        execution([权限修饰符] [返回类型] [全类名] [方法名称] ([参数列表]))</p>
<p>​        例1:对com.jjf.dao.BookDao类里面的add进行增强</p>
<p>​            execution(*com.jjf.dao.BookDao.add(..))</p>
<p>​        例2:对com.jjf.dao.BookDao类里面所有的方法进行增强</p>
<p>​            execution(*com.jjf.dao.BookDao.*(..))</p>
<p>​        例2:对com.jjf.dao包里面所有的类,类里面的所有方法进行增强</p>
<p>​            execution(*com.jjf.dao.*.*(..))</p>
</blockquote>
<h3 id="基于注解实现对AspectJ的操作"><a href="#基于注解实现对AspectJ的操作" class="headerlink" title="基于注解实现对AspectJ的操作"></a>基于注解实现对AspectJ的操作</h3><blockquote>
<p>1.创建类,在类里面定义方法</p>
<p>2.创建增强类</p>
<p>​    (1)在增强类里面,创建方法,让不同的方法代表不同的通知类型</p>
<p>3.进行通知的配置</p>
<p>​    (1)在spring配置文件中,开始注解扫描</p>
<p>​    (2)使用注解创建User和UserProxy对象</p>
<p>​    (3)在增强类上面添加注解@Aspect</p>
<p>​    (4)在spring配置文件中开始生成代理对象    </p>
<p>4.配置不同类型的通知</p>
<p>​    (1)在增强类的里面,在作为通知的方法上面添加通知类型的注解,使用切入点表达式配置</p>
<p>5.相同的切入点抽取</p>
<p>6.有多个增强类对同一个方法进行增强,可以设置增强类的优先级</p>
<p>​    (1)在增强类上面添加注解@Order(数字类型值),数字类型的值越小,优先级越高</p>
<p>7.完全使用注解开发</p>
</blockquote>
<p>普通类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//int i = 1/0;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增强类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>     <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="meta">@Order(3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.jjf.aopanotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointDemo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="meta">@After(value = &quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;pointDemo()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前...&quot;</span>);</span><br><span class="line">        <span class="comment">//被增强的方法</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jjf.aopanotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启Aspect生成代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注解方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.jjf&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigAOP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增强类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.jjf.aopanotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基于配置文件"><a href="#基于配置文件" class="headerlink" title="基于配置文件"></a>基于配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jjf.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.jjf.aopxml.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置增强作用在具体的方法上--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>Spring对jdbc封装的模板</p>
</blockquote>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p>1.引入依赖</p>
<p>2.在spring配置文件中配置数据库连接池</p>
<p>3.配置JdbcTemplate对象,注入DataSource</p>
<p>4.创建service类,创建dao类,在dao注入jdbcTemplate对象</p>
</blockquote>
<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-tx --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-orm --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/aopalliance/aopalliance --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--德鲁伊数据源--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在spring配置文件中配置数据库连接池</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimeZone=UTC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置JdbcTemplate对象,注入DataSource</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JdbcTemplate对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入dataSource--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建service类,创建dao类,在dao注入jdbcTemplate对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JdbcTemplate操作数据库"><a href="#JdbcTemplate操作数据库" class="headerlink" title="JdbcTemplate操作数据库"></a>JdbcTemplate操作数据库</h2><blockquote>
<p>1.创建实体类</p>
<p>2.编写service和dao</p>
<p>​    1.在dao进行数据库添加操作</p>
<p>​    2.调用JdbcTemplate对象里面update方法实现添加操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserState</span><span class="params">(String userState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userState = userState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into t_user values(?,?,?)&quot;</span>;</span><br><span class="line">        Object[] args = &#123;user.getUserId(), user.getUserName(), user.getUserState()&#125;;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * update参数</span></span><br><span class="line"><span class="comment">         * 1.sql语句</span></span><br><span class="line"><span class="comment">         * 2.可变参数,设置sql语句值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> update = jdbcTemplate.update(sql,args);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update t_user set user_name = ?,user_state = ? where user_id = ?&quot;</span>;</span><br><span class="line">        Object[] args = &#123;user.getUserName(), user.getUserState(),user.getUserId()&#125;;</span><br><span class="line">        <span class="keyword">int</span> update = jdbcTemplate.update(sql, args);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from t_user where user_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> update = jdbcTemplate.update(sql, userId);</span><br><span class="line">        System.out.println(update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        userDao.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String userId)</span></span>&#123;</span><br><span class="line">        userDao.delete(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>1.事务是数据库操作最基本的单元,逻辑上的一组操作,要么都成功,如果有一个失败所有操作都失败</p>
<p>  典型场景:银行转账</p>
<p>2.事务的四个特性(ACID)</p>
<p>​    1.原子性: </p>
<p>​    2.一致性</p>
<p>​    3.隔离性</p>
<p>​    4.持久性</p>
</blockquote>
<h2 id="搭建事务操作环境"><a href="#搭建事务操作环境" class="headerlink" title="搭建事务操作环境"></a>搭建事务操作环境</h2><blockquote>
<p>1.创建数据库,添加记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : mysql</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 80021</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : mybatis</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 80021</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 24/09/2021 16:43:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Table structure for t_account</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_account`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_account`  (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="type">int</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Records of t_account</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_account` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_account` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;mary&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>2.创建service,搭建dao,完成对象创建和注入关系</p>
<p>​    1.service注入dao,在dao注入JdbcTemplate,在JdbcTemplate注入DataSource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.jjf&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入dataSource--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.在dao创建两个方法,多钱和少钱的方法,在service创建方法(转账的方法)</p>
<p>dao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lucy转账100给mary</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increaseMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;update t_account set money = money - ? where user_name = ?&quot;</span>;</span><br><span class="line">    jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decreaseMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;update t_account set money = money + ? where user_name = ?&quot;</span>;</span><br><span class="line">    jdbcTemplate.update(sql,<span class="number">100</span>,<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转账的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accountMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//lucy少100</span></span><br><span class="line">    userDao.decreaseMoney();</span><br><span class="line">    <span class="comment">//mary多100</span></span><br><span class="line">    userDao.increaseMoney();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.上面代码,如果正常执行没有问题,但是如果代码执行过程中出现异常,就有问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转账的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accountMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//lucy少100</span></span><br><span class="line">        userDao.decreaseMoney();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟异常</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//mary多100</span></span><br><span class="line">        userDao.increaseMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会发现lucy的钱少了100,但是mary的钱没有增加100</p>
<p>上面的问题如何解决?使用事务</p>
</blockquote>
<h2 id="Spring事务管理介绍"><a href="#Spring事务管理介绍" class="headerlink" title="Spring事务管理介绍"></a>Spring事务管理介绍</h2><blockquote>
<p>1.事务添加到JavaEE三层架构里面的Service层上(业务逻辑层)</p>
<p>2.在Spring进行事务管理操作</p>
<p>​    1.有两种方式: 编程式事务管理和<strong>声明式事务管理(常用)</strong></p>
<p>3.声明式事务管理</p>
<p>​    <strong>1.基于注解方式(常用)</strong></p>
<p>​    2.基于xml配置文件方式</p>
<p>4.在Spring进行声明式事务管理,底层使用AOP</p>
<p>5.Spring事务管理API</p>
<p>​    1.提供一个接口,代表事务管理器,这个接口针对不同的框架提供不同的实现类</p>
</blockquote>
<h2 id="注解声明式事务管理"><a href="#注解声明式事务管理" class="headerlink" title="注解声明式事务管理"></a>注解声明式事务管理</h2><p>1.在spring配置文件中配置事务管理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--创建事务管理器--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;transactionManager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">    &lt;!--注入数据源--&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>2.在spring配置文件,开启事务注解</p>
<p>​    2.1.在spring配置文件引入名称空间tx</p>
<p>​    2.2开启事务注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.在service类上面(获取service类里面方法上面)添加事务注解@Transactional</p>
<p>​    3.1@Transactional,这个注解添加到类上面,也可以添加到方法上面</p>
<p>​    3.2如果把这个注解添加到类上面,这个类里面所有的方法都添加事务</p>
<p>​    3.3如果把这个注解添加到方法上面,为这个方法添加了事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span></span><br></pre></td></tr></table></figure>

<h2 id="声明式事务管理参数配置"><a href="#声明式事务管理参数配置" class="headerlink" title="声明式事务管理参数配置"></a>声明式事务管理参数配置</h2><blockquote>
<p>1.在service类上面添加了注解@Transactional,在这个注解里面可以配置事务相关参数</p>
<p>2.propagation: 事务传播行为</p>
<p>​    2.1 多事务方法之间进行调用,这个过程中事务是如何进行管理的</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Spring/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.png"></p>
<p>3.isolation: 事务的隔离级别</p>
<p>​    事务里面有个特性称为隔离性,多事务操作之间不会产生影响.不考虑隔离性产生很多问题.</p>
<p>​    有三个读问题:脏读,不可重复读,虚(幻)读</p>
<p>​        脏读:一个未提交事务读取到另一个未提交事务的数据</p>
<p>​        不可重复读: 一个未提交事务读取到另一个已提交事务修改数据</p>
<p>​        虚读: 一个未提交事务读取到另一个已提交事务添加数据</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Spring/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.png" alt="事务隔离级别"></p>
<p>4.timeout: 超时时间</p>
<p>​    1.事务需要在一定时间内进行提交,如果不提交进行回滚</p>
<p>​    2.默认值是-1,设置时间以秒单位进行计算</p>
<p>5.readOnly: 是否只读</p>
<p>​    1.读:查询操作,写:增删改操作</p>
<p>​    2.readOnly默认值是false,表示可以查询,也可以增删改操作</p>
<p>​    3.设置readOnly设置为true,只能查询</p>
<p>6.rollbackFor: 回滚</p>
<p>​    1.设置查询出现了哪些异常,进行事务的回滚.</p>
<p>7.noRollbackFor: 不回滚</p>
<p>​    1.设置出现哪些异常,不进行事务回滚.</p>
</blockquote>
<h2 id="XML声明式事务管理"><a href="#XML声明式事务管理" class="headerlink" title="XML声明式事务管理"></a>XML声明式事务管理</h2><blockquote>
<p>1.配置事务管理器</p>
<p>2.配置通知</p>
<p>3.配置切入点和切面</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1创建事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定哪种规则的方法上面添加事务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;accountMoney&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name=&quot;account*&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3配置切入点和切面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切入点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.jjf.service.UserService.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="完全注解声明式事务管理"><a href="#完全注解声明式事务管理" class="headerlink" title="完全注解声明式事务管理"></a>完全注解声明式事务管理</h2><blockquote>
<p>1.创建配置类,使用配置类替代xml配置文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.jjf&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建数据库连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">getDruidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建jdbcTemplate对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="comment">//到ioc容器中根据类型找到dataSource</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">//注入dataSource</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建事务注解</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring5框架新功能"><a href="#Spring5框架新功能" class="headerlink" title="Spring5框架新功能"></a>Spring5框架新功能</h1><blockquote>
<p>1.整个Spring5框架的代码基于Java8,运行时,兼容JDK9,许多不建议使用的类和方法在代码库中删除</p>
<p>2.Spring5框架自带了通用的日志封装</p>
<p>​    Spring5已经移除了Log4jConfigListener,官方建议使用Log4j2</p>
<p>​    Spring5框架整合Log4j2</p>
</blockquote>
<h2 id="Spring5框架整合Log4j2"><a href="#Spring5框架整合Log4j2" class="headerlink" title="Spring5框架整合Log4j2"></a>Spring5框架整合Log4j2</h2><blockquote>
<p>1.引入依赖</p>
<p>2.创建log4j2.xml配置文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Spring5框架核心容器支持-Nullable注解"><a href="#Spring5框架核心容器支持-Nullable注解" class="headerlink" title="Spring5框架核心容器支持@Nullable注解"></a>Spring5框架核心容器支持@Nullable注解</h2><blockquote>
<p>1.@Nullable注解可以使用在方法上面,属性上面,参数上面,表示返回值可以为空</p>
</blockquote>
<h2 id="Spring5支持整合JUnit5"><a href="#Spring5支持整合JUnit5" class="headerlink" title="Spring5支持整合JUnit5"></a>Spring5支持整合JUnit5</h2><blockquote>
<p>1.引入依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JUnit4</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="comment">//指定单元测试框架</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = TxConfig.class)</span>  <span class="comment">//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUnit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.accountMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JUnit5</span></span><br><span class="line"><span class="comment">//@ExtendWith(SpringExtension.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(classes = TxConfig.class)</span></span><br><span class="line"><span class="comment">//使用复合注解替代上面两个注解</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(classes = TxConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUnit5</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.accountMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SpringWebFlux"><a href="#SpringWebFlux" class="headerlink" title="SpringWebFlux"></a>SpringWebFlux</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>1.是Spring5添加的新的模块,是用于web开发的,功能和SpringMVC类似,WebFlux是因为当前一种比较流行的响应式编程出现的框架.</p>
<p>2.使用传统web框架,比如SpringMVC,这些是基于Servlet容器,WebFlux是一种异步非阻塞的框架,异步非阻塞的框架在Servlet3.1以后才支持,核心是基于Reactor的相关API进行实现的</p>
<p>3.异步非阻塞:</p>
<p>​    异步和同步,阻塞和非阻塞,针对对象不一样</p>
<p>​    异步和同步针对调用者,调用者发送请求,如果等着对方回应之后才去做其他事情就是同步,否则,就是异步</p>
<p>​    阻塞和非阻塞针对被调用者,被调用者收到请求之后,做完请求任务之后才给出反馈就是阻塞,受到请求之后马上给出反馈,再去做事情就是非阻塞</p>
<p>4.WebFlux特点:</p>
<p>​    1.非阻塞式:在有限的资源下,提高系统的吞吐量和伸缩性,以Reactor为基础实现响应式编程.</p>
<p>​    2.函数式编程:Spring5框架基于Java8,WebFlux使用Java8函数式编程方式实现路由请求</p>
<p>5.比较SpringMVC</p>
<p>​    1.两个框架都可以使用注解方式,都可以运行在Tomcat等容器中.</p>
<p>​    2.SpringMVC采用命令式编程,WebFlux采用异步响应式编程</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Spring/SpringMVc%E5%92%8CWebFlux%E6%AF%94%E8%BE%83.png"></p>
</blockquote>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构和算法</title>
    <url>/2021/10/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="线性结构和非线性结构"><a href="#线性结构和非线性结构" class="headerlink" title="线性结构和非线性结构"></a>线性结构和非线性结构</h1><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><ul>
<li>线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系</li>
<li>线性结构有两种不同的存储结构，即顺序存储结构和链式存储结构。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的</li>
<li>链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息</li>
<li>线性结构常见的有：数组、队列、链表和栈，后面我们会详细讲解</li>
</ul>
<h2 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h2><ul>
<li>非线性结构包括：二维数组，多维数组，广义表，树结构，图结构</li>
</ul>
<h1 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h1><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组</p>
</blockquote>
<h3 id="稀疏数组的处理方法"><a href="#稀疏数组的处理方法" class="headerlink" title="稀疏数组的处理方法"></a>稀疏数组的处理方法</h3><ol>
<li>记录数组一共有几行几列，有多少个不同的值</li>
<li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>左图是6行7列的二维数组,右图是将左图转为稀疏数组</p>
<p>稀疏数组的第一行记录的数据依次是:二维数组的行 二维数组的列 二维数组有几个值</p>
<p>第二行记录的是第一个数据所在的行 列 值,剩下的数据也是按照这个规则</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/数据结构和算法/稀疏数组/示例1.jpg" style="zoom:50%;" /><img src="https://fanaidi.gitee.io/blogimgs/数据结构和算法/稀疏数组/示例2.jpg" style="zoom:50%;" /></p>
<h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><ul>
<li>使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等)</li>
<li>把稀疏数组存盘，并且可以从新恢复原来的二维数组数</li>
</ul>
<p><strong>思路分析</strong></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84/%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 稀疏数组;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个原始的二维数组 11*11</span></span><br><span class="line">        <span class="comment">//0:表示没有棋子,1:黑子,2:蓝子</span></span><br><span class="line">        <span class="keyword">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//输出原始的二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将二维数组转为稀疏数组</span></span><br><span class="line">        <span class="comment">//1.先遍历二维数组,得到非0数据的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.创建对应的稀疏数组</span></span><br><span class="line">        <span class="comment">//存放数组数据的文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\data.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//文件写入流</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">        <span class="keyword">int</span> sparseArray[][] = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//给稀疏数组赋值</span></span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">        <span class="comment">//遍历二维数组,将非0的值存放到稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//用于记录是第几个非0数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArray[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArray[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArray[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出稀疏数组的形式</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;得到的稀疏数组为一下形式&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : sparseArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">                fw.write(data+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            fw.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        fw.flush();</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(fr);</span><br><span class="line">        <span class="keyword">int</span>[][] readSparseArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> lineCount = <span class="number">0</span>;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String[] lineData = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            readSparseArray[lineCount][<span class="number">0</span>] = Integer.parseInt(lineData[<span class="number">0</span>]);</span><br><span class="line">            readSparseArray[lineCount][<span class="number">1</span>] = Integer.parseInt(lineData[<span class="number">1</span>]);</span><br><span class="line">            readSparseArray[lineCount][<span class="number">2</span>] = Integer.parseInt(lineData[<span class="number">2</span>]);</span><br><span class="line">            lineCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;读取后的稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : readSparseArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将稀疏数组恢复成原始的二维数组</span></span><br><span class="line">        <span class="comment">//1.先读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组</span></span><br><span class="line">        <span class="keyword">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[readSparseArray[<span class="number">0</span>][<span class="number">0</span>]][readSparseArray[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= readSparseArray[<span class="number">0</span>][<span class="number">2</span>]; i++) &#123;</span><br><span class="line">            chessArr2[readSparseArray[i][<span class="number">0</span>]][readSparseArray[i][<span class="number">1</span>]] = readSparseArray[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;恢复后的原始数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArr2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul>
<li>队列是一个有序列表，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</li>
<li>遵循<strong>先入先出</strong>的原则。即：先存入队列的数据，要先取出。后存入的要后取出</li>
<li>示意图：(使用数组模拟队列示意图)</li>
</ul>
<p><img src="https://fanaidi.gitee.io/blogimgs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/%E6%A6%82%E5%BF%B5.png"></p>
<h3 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h3><ul>
<li><p>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 maxSize 是该队列的最大容量。</p>
</li>
<li><p>因为队列的输出、输入是分别从前后端来处理，因此需要两个变量<strong>front</strong>及<strong>rear</strong>分别记录<strong>队列前后端</strong>的下标，front会随着数据输出而改变，而 rear则是随着数据输入而改变，如图所示:</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E9%98%9F%E5%88%97.png"></p>
</li>
</ul>
<p><strong>创建ArrayQueue的步骤:</strong></p>
<ol>
<li>声明四个变量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line"><span class="comment">//队列头</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line"><span class="comment">//队列尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line"><span class="comment">//存放数据,模拟队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>初始化队列</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建队列的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">    maxSize = arrMaxSize;</span><br><span class="line">    arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">    <span class="comment">//指向队列头部,分析出front是指向队列头的前一个位置.</span></span><br><span class="line">    front = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//指向队列尾部,指向队列尾的数据(就是队列最后一个数据)</span></span><br><span class="line">    rear = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>判断队列是否满</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>判断队列是否为空</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>入队<ol>
<li>先判断队列是否满,如果满则不能添加数据</li>
<li>如果队列没有满,则让rear往后移(rear+1),然后将数据添加到rear所指的数组元素中.</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列满,不能加入数据~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//让rear后移</span></span><br><span class="line">    rear++;</span><br><span class="line">    arr[rear] = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>出队<ol>
<li>先判断队列是否为空,如果为空,则抛出运行时异常,并提示</li>
<li>如果不为空,则让front往后移,并返回front所指的数组元素</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列空,不能取数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//让front后移</span></span><br><span class="line">    front++;</span><br><span class="line">    <span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>显示队列所有元素</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示队列的所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;队列为空,没有数据~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>显示队列的头数据(注意不是取出数据)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示队列的头数据,注意不是取出数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line">    <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空,没有数据~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        ArrayQueue queue = <span class="keyword">new</span> ArrayQueue(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//接收用户输入</span></span><br><span class="line">        <span class="keyword">char</span> key;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span> (loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s(show):显示队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;e(exit):退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;g(get):从队列取出数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;h(head):查看队列头的数据&quot;</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    queue.showQueue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    queue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.getQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;取出的数据是: %d\n&quot;</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.headQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;队列头的数据是: %d\n&quot;</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span></span>&#123;</span><br><span class="line">    <span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">//队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">//存放数据,模拟队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">        maxSize = arrMaxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        <span class="comment">//指向队列头部,分析出front是指向队列头的前一个位置.</span></span><br><span class="line">        front = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//指向队列尾部,指向队列尾的数据(就是队列最后一个数据)</span></span><br><span class="line">        rear = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否满</span></span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列满,不能加入数据~&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//让rear后移</span></span><br><span class="line">        rear++;</span><br><span class="line">        arr[rear] = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取队列的数据,出队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列空,不能取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//让front后移</span></span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列的所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空,没有数据~&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列的头数据,注意不是取出数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空,没有数据~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h3><h4 id="问题分析并优化"><a href="#问题分析并优化" class="headerlink" title="问题分析并优化"></a>问题分析并优化</h4><ol>
<li>目前数组使用一次就不能用,没有达到复用的效果</li>
<li>将这个数组使用算法,改进成一个<strong>环形的队列</strong></li>
</ol>
<h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><ol>
<li>front变量的含义进行调整,front就指向队列的第一个元素,也就是arr[front]就是队列的第一个元素.front初始值=0</li>
<li>rear变量的含义进行调整,rear指向队列的最后一个元素的后一个位置,因为希望空出一个空间作为约定.rear初始值=0 </li>
<li>当队列满时,条件是(rear + 1) % maxSize = front;</li>
<li>当队列为空时,rear == front</li>
<li>队列中有效的数据的个数: (rear + maxSize - front) % maxSize</li>
<li>在原来的队列上修改得到一个环形队列</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleArrayQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试数组模拟环形队列的案例&quot;</span>);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//创建一个环形队列</span></span><br><span class="line">        <span class="comment">// 设置4,其队列的有效数据最大是3</span></span><br><span class="line">        CircleArray queue = <span class="keyword">new</span> CircleArray(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//接收用户输入</span></span><br><span class="line">        <span class="keyword">char</span> key;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span> (loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;s(show):显示队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;e(exit):退出程序&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;g(get):从队列取出数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;h(head):查看队列头的数据&quot;</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    queue.showQueue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入一个数字&quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    queue.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.getQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;取出的数据是: %d\n&quot;</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = queue.headQueue();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;队列头的数据是: %d\n&quot;</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                    scanner.close();</span><br><span class="line">                    loop = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleArray</span></span>&#123;</span><br><span class="line">    <span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">//队列头</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">//队列尾</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">//存放数据,模拟队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleArray</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">        maxSize = arrMaxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[arrMaxSize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加数据到队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否满</span></span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列满,不能加入数据~&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接将数据加入</span></span><br><span class="line">        arr[rear] = n;</span><br><span class="line">        <span class="comment">//将rear后移,这里必须考虑取模</span></span><br><span class="line">        rear = (rear+<span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取队列的数据,出队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列空,不能取数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里需要分析出front是指向队列的第一个元素</span></span><br><span class="line">        <span class="comment">//1.先把front对应的值保留到一个临时变量</span></span><br><span class="line">        <span class="comment">//2.将front后移,考虑取模</span></span><br><span class="line">        <span class="comment">//3.将临时保存的变量返回</span></span><br><span class="line">        <span class="keyword">int</span> value = arr[front];</span><br><span class="line">        front = (front+<span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示队列的所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空,没有数据~&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + size(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i % maxSize,arr[i % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求出当前队列有效数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的头数据,注意不是取出数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空,没有数据~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是有序的列表,但是它在内存中是存储如下</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%9B%BE.png"></p>
<p><strong>小结</strong></p>
<ol>
<li>链表是以节点的方式来存储</li>
<li>每个节点包含data域,next域(指向下一个节点)</li>
<li>如图：发现链表的<strong>各个节点不一定是连续存储</strong>.</li>
<li>链表分<strong>带头节点的链表</strong>和<strong>没有头节点的链表</strong>，根据实际的需求来确定</li>
</ol>
<p>单链表(带头结点) <strong>逻辑结构</strong>示意图如下</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/%E5%8D%95%E9%93%BE%E8%A1%A8%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p>
<h3 id="单链表的应用实例"><a href="#单链表的应用实例" class="headerlink" title="单链表的应用实例"></a>单链表的应用实例</h3><p>使用带head头的<strong>单向链表</strong>实现 –水浒英雄排行榜管理</p>
<ol>
<li><p>完成对英雄人物的<strong>增删改查</strong>操作， 注: <strong>删除和修改</strong>,<strong>查找</strong></p>
</li>
<li><p>第一种方法在添加英雄时，直接添加到链表的尾部</p>
</li>
<li><p><strong>第二种方式在添加英雄时</strong>，根据排名将英雄插入到指定位置(如果有这个排名，则添加失败，并给出提示)</p>
</li>
</ol>
<p>1.创建节点类(<strong>HeroNode</strong>)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义HeroNode,每个Node对象就是一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickName;</span><br><span class="line">    <span class="comment">//指向下一个节点</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode next;</span><br><span class="line">	<span class="comment">//初始化节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no,String name,String nickName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.创建<strong>SingleLinkedList</strong>类的步骤</p>
<ol>
<li>先初始化一个头节点,头结点不要动,不存放具体的数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>当不考虑编号的顺序时,添加节点到单向链表<ol>
<li>找到当前链表的最后节点</li>
<li>将最后这个节点的next指向新的节点</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line">    <span class="comment">//因为head节点不能动,因此我们需要一个辅助变量temp</span></span><br><span class="line">    HeroNode temp = head;</span><br><span class="line">    <span class="comment">//遍历链表,找到最后</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//找到链表的最后</span></span><br><span class="line">        <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没有找到最后,将temp后移</span></span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当退出while循环时,temp就指向了链表的最后</span></span><br><span class="line">    <span class="comment">//将最后这个节点的next指向新的节点</span></span><br><span class="line">    temp.next = heroNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>考虑编号的顺序,添加节点到单向链表</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line">    <span class="comment">//因为头节点不能动,因此我们仍然通过辅助变量来帮助找到添加的位置</span></span><br><span class="line">    <span class="comment">//因为是单链表,因此我们找的temp,是位于添加位置的前一个节点,否则插入不了</span></span><br><span class="line">    HeroNode temp = head;</span><br><span class="line">    <span class="comment">//标志添加的编号是否存在</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//说明temp已经在链表的最后</span></span><br><span class="line">        <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//位置找到,就在temp的后面插入</span></span><br><span class="line">        <span class="keyword">if</span> (temp.next.no &gt; heroNode.no)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (temp.next.no == heroNode.no)&#123;<span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">            flag = <span class="keyword">true</span>; <span class="comment">//说明编号存在</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断flag的值</span></span><br><span class="line">    <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;准备插入的英雄的编号%d已经存在了,不能加入\n&quot;</span>,heroNode.no);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//插入到链表中,temp的后面</span></span><br><span class="line">        heroNode.next = temp.next;</span><br><span class="line">        temp.next = heroNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>显示链表(遍历)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为头节点不能动,因此我们需要一个辅助变量来遍历</span></span><br><span class="line">    HeroNode temp = head.next;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">//判断是否到链表最后</span></span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出节点的信息</span></span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        <span class="comment">//将next后移</span></span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>修改节点的信息(根据no编号来修改,即no编号不能改)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;链表为空~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到需要修改的节点,根据no编号</span></span><br><span class="line">    <span class="comment">//定义一个辅助变量</span></span><br><span class="line">    HeroNode temp = head.next;</span><br><span class="line">    <span class="comment">//表示是否找到该节点</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//已经遍历完链表</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp.no == newHeroNode.no)&#123;</span><br><span class="line">            <span class="comment">//找到了</span></span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line">    <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">        temp.name = newHeroNode.name;</span><br><span class="line">        temp.nickName = newHeroNode.nickName;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//没有找到</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;没有找到编号%d的节点,不能修改\n&quot;</span>,newHeroNode.no);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>删除节点<ol>
<li>head不能动,因此需要一个temp辅助节点找到待删除节点的前一个节点</li>
<li>说明我们在比较时,是temp.next.no和需要删除的节点的no进行比较</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">    HeroNode temp = head;</span><br><span class="line">    <span class="comment">//标识是否找到待删除节点的前一个节点</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>)&#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp.next.no == no)&#123;</span><br><span class="line">            <span class="comment">//找到待删除节点的前一个节点temp</span></span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">        <span class="comment">//可以删除</span></span><br><span class="line">        temp.next = temp.next.next;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;要删除的%d节点不存在&quot;</span>,no);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//先创建节点</span></span><br><span class="line">        HeroNode heroNode1 = <span class="keyword">new</span> HeroNode(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>, <span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line">        HeroNode heroNode2 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line">        HeroNode heroNode3 = <span class="keyword">new</span> HeroNode(<span class="number">3</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span>);</span><br><span class="line">        HeroNode heroNode4 = <span class="keyword">new</span> HeroNode(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line">        <span class="comment">//创建单向链表</span></span><br><span class="line">        SingleLinkedList singleLinkedList = <span class="keyword">new</span> SingleLinkedList();</span><br><span class="line">        <span class="comment">//加入</span></span><br><span class="line">        <span class="comment">//singleLinkedList.add(heroNode1);</span></span><br><span class="line">        <span class="comment">//singleLinkedList.add(heroNode2);</span></span><br><span class="line">        <span class="comment">//singleLinkedList.add(heroNode3);</span></span><br><span class="line">        <span class="comment">//singleLinkedList.add(heroNode4);</span></span><br><span class="line">        <span class="comment">//加入按照编号的顺序</span></span><br><span class="line">        singleLinkedList.addByOrder(heroNode1);</span><br><span class="line">        singleLinkedList.addByOrder(heroNode4);</span><br><span class="line">        singleLinkedList.addByOrder(heroNode2);</span><br><span class="line">        singleLinkedList.addByOrder(heroNode3);</span><br><span class="line"></span><br><span class="line">        singleLinkedList.list();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//测试修改节点的代码</span></span><br><span class="line">        HeroNode newHeroNode = <span class="keyword">new</span> HeroNode(<span class="number">2</span>,<span class="string">&quot;xx&quot;</span>,<span class="string">&quot;yql&quot;</span>);</span><br><span class="line">        singleLinkedList.update(newHeroNode);</span><br><span class="line">        singleLinkedList.list();</span><br><span class="line">        <span class="comment">//删除一个节点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        singleLinkedList.del(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//显示</span></span><br><span class="line">        singleLinkedList.list();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义SingleLinkedList 管理我们的英雄</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span></span>&#123;</span><br><span class="line">    <span class="comment">//先初始化一个头节点,头结点不要动,不存放具体的数据</span></span><br><span class="line">    <span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//添加节点到单向链表</span></span><br><span class="line">    <span class="comment">//思路,当不考虑编号的顺序时,</span></span><br><span class="line">    <span class="comment">//1.找到当前链表的最后节点</span></span><br><span class="line">    <span class="comment">//2.将最后这个节点的next指向新的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line">        <span class="comment">//因为head节点不能动,因此我们需要一个辅助变量temp</span></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//遍历链表,找到最后</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//找到链表的最后</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果没有找到最后,将temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出while循环时,temp就指向了链表的最后</span></span><br><span class="line">        <span class="comment">//将最后这个节点的next指向新的节点</span></span><br><span class="line">        temp.next = heroNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种方式在添加英雄时，根据排名将英雄插入到指定位置(如果有这个排名，则添加失败，并给出提示)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByOrder</span><span class="params">(HeroNode heroNode)</span></span>&#123;</span><br><span class="line">        <span class="comment">//因为头节点不能动,因此我们仍然通过辅助变量来帮助找到添加的位置</span></span><br><span class="line">        <span class="comment">//因为是单链表,因此我们找的temp,是位于添加位置的前一个节点,否则插入不了</span></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//标志添加的编号是否存在</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//说明temp已经在链表的最后</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//位置找到,就在temp的后面插入</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next.no &gt; heroNode.no)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (temp.next.no == heroNode.no)&#123;<span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">                flag = <span class="keyword">true</span>; <span class="comment">//说明编号存在</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断flag的值</span></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;准备插入的英雄的编号%d已经存在了,不能加入\n&quot;</span>,heroNode.no);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//插入到链表中,temp的后面</span></span><br><span class="line">            heroNode.next = temp.next;</span><br><span class="line">            temp.next = heroNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改节点的信息,根据no编号来修改,即no编号不能改</span></span><br><span class="line">    <span class="comment">//1.根据newHeroNode的no来修改即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeroNode)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到需要修改的节点,根据no编号</span></span><br><span class="line">        <span class="comment">//定义一个辅助变量</span></span><br><span class="line">        HeroNode temp = head.next;</span><br><span class="line">        <span class="comment">//表示是否找到该节点</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//已经遍历完链表</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.no == newHeroNode.no)&#123;</span><br><span class="line">                <span class="comment">//找到了</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            temp.name = newHeroNode.name;</span><br><span class="line">            temp.nickName = newHeroNode.nickName;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//没有找到</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;没有找到编号%d的节点,不能修改\n&quot;</span>,newHeroNode.no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="comment">//思路</span></span><br><span class="line">    <span class="comment">//1.head不能动,因此需要一个temp辅助节点找到待删除节点的前一个节点</span></span><br><span class="line">    <span class="comment">//2.说明我们在比较时,是temp.next.no和需要删除的节点的no进行比较</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//标识是否找到待删除节点的前一个节点</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>)&#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp.next.no == no)&#123;</span><br><span class="line">                <span class="comment">//找到待删除节点的前一个节点temp</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="comment">//可以删除</span></span><br><span class="line">            temp.next = temp.next.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;要删除的%d节点不存在&quot;</span>,no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示链表(遍历)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为头节点不能动,因此我们需要一个辅助变量来遍历</span></span><br><span class="line">        HeroNode temp = head.next;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            <span class="comment">//将next后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义HeroNode,每个Node对象就是一个节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickName;</span><br><span class="line">    <span class="comment">//指向下一个节点</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> no,String name,String nickName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><blockquote>
<p>双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。</p>
</blockquote>
<ol>
<li>节点类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickName;</span><br><span class="line">    <span class="comment">//指向下一个节点</span></span><br><span class="line">    <span class="keyword">public</span> DNode next;</span><br><span class="line">    <span class="comment">//指向前一个节点</span></span><br><span class="line">    <span class="keyword">public</span> DNode pre;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DNode</span><span class="params">(<span class="keyword">int</span> no,String name,String nickName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, nickName=&#x27;&quot;</span> + nickName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>双向链表类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DNode head = <span class="keyword">new</span> DNode(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DNode <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历双向链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DNode temp = head.next;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(DNode node)</span></span>&#123;</span><br><span class="line">        DNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = node;</span><br><span class="line">        node.pre = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        DNode temp = head.next;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.no == no)&#123;</span><br><span class="line">                flag=<span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            temp.pre.next = temp.next;</span><br><span class="line">            <span class="keyword">if</span> (temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">                temp.next.pre = temp.pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DoubleLinkedList doubleLinkedList = <span class="keyword">new</span> DoubleLinkedList();</span><br><span class="line">        doubleLinkedList.add(<span class="keyword">new</span> DNode(<span class="number">1</span>,<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        doubleLinkedList.add(<span class="keyword">new</span> DNode(<span class="number">2</span>,<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;李四&quot;</span>));</span><br><span class="line">        doubleLinkedList.add(<span class="keyword">new</span> DNode(<span class="number">3</span>,<span class="string">&quot;ww&quot;</span>,<span class="string">&quot;王五&quot;</span>));</span><br><span class="line">        doubleLinkedList.add(<span class="keyword">new</span> DNode(<span class="number">4</span>,<span class="string">&quot;zl&quot;</span>,<span class="string">&quot;赵六&quot;</span>));</span><br><span class="line">        doubleLinkedList.list();</span><br><span class="line">        doubleLinkedList.del(<span class="number">3</span>);</span><br><span class="line">        doubleLinkedList.del(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        doubleLinkedList.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单向环形链表"><a href="#单向环形链表" class="headerlink" title="单向环形链表"></a>单向环形链表</h3><h4 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h4><blockquote>
<p>N个人围成一圈，从第一个开始报数，第M个将被杀掉，最后剩下一个，其余人都将被杀掉。例如N=6，M=5，被杀掉的顺序是：5，4，6，2，3。</p>
</blockquote>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote>
<p>用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2021/10/06/Redis/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="1-NoSQL数据库简介"><a href="#1-NoSQL数据库简介" class="headerlink" title="1.NoSQL数据库简介"></a>1.NoSQL数据库简介</h1><h2 id="1-1NoSQL数据库概述"><a href="#1-1NoSQL数据库概述" class="headerlink" title="1.1NoSQL数据库概述"></a>1.1NoSQL数据库概述</h2><blockquote>
<p>NoSQL最常见的解释是“non-relational”， “Not Only SQL”也被很多人接受。NoSQL仅仅是一个概念，泛指非关系型的数据库，区别于关系数据库，它们不保证关系数据的ACID特性。</p>
<p>NoSQL不依赖业务逻辑方式存储,而已简单的key-value模式存储.因此大大的增加了数据库的扩展能力</p>
</blockquote>
<h2 id="1-2特点"><a href="#1-2特点" class="headerlink" title="1.2特点"></a>1.2特点</h2><ul>
<li>不遵循SQL标准</li>
<li>不支持ACID</li>
<li>远超SQL的性能</li>
</ul>
<h2 id="1-3NoSQL适用场景"><a href="#1-3NoSQL适用场景" class="headerlink" title="1.3NoSQL适用场景"></a>1.3NoSQL适用场景</h2><ul>
<li>对数据高并发的读写</li>
<li>海量数据的读写</li>
<li>对数据高扩展性的读写</li>
</ul>
<h2 id="1-4NoSQL不适用场景"><a href="#1-4NoSQL不适用场景" class="headerlink" title="1.4NoSQL不适用场景"></a>1.4NoSQL不适用场景</h2><ul>
<li>需要事务支持</li>
<li>基于sql的结构化查询存储,处理复杂的关系,需要即席查询</li>
<li><strong>用不着sql的和用了sql也不行的的情况,考虑NoSQL</strong></li>
</ul>
<h2 id="1-5常见的NoSQL数据库"><a href="#1-5常见的NoSQL数据库" class="headerlink" title="1.5常见的NoSQL数据库"></a>1.5常见的NoSQL数据库</h2><h3 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h3><blockquote>
<p>很<strong>早</strong>出现的NoSQL数据库</p>
<p>数据都在内存中,一般<strong>不持久化</strong></p>
<p>支持简单的key-value模式,<strong>支持类型单一</strong></p>
<p>一般是作为缓<strong>存数据库</strong>辅助持久化的数据库</p>
</blockquote>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote>
<p>几乎覆盖了Memcache的绝大部分功能</p>
<p>数据都在内存中,支持持久化,主要用作备份恢复</p>
<p>除了支持简单的key-value模式,还支持多种数据结构的存储,比如list,set,hash,zset等.</p>
<p>一般作为缓存数据库辅助持久化的数据库</p>
</blockquote>
<h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><blockquote>
<p>高性能,开源,模式自由的文档型数据库</p>
<p>数据都在内存中,如果内存不足,把不常用的数据保存到硬盘</p>
<p>虽然是key-value模式,但是对value(尤其是json)提供了丰富的查询功能</p>
<p>支持二进制数据及大型对象</p>
<p>可以根据数据的特点替代RDBMS,称为独立的数据库.或者配合RDBMS,存储特点的数据</p>
</blockquote>
<h1 id="2-Redis6"><a href="#2-Redis6" class="headerlink" title="2.Redis6"></a>2.Redis6</h1><h2 id="2-1-Redis概述"><a href="#2-1-Redis概述" class="headerlink" title="2.1 Redis概述"></a>2.1 Redis概述</h2><ul>
<li>Redis是一个开源的key-value系统</li>
<li>和Memcached类似,它支持存储的value类型相对更多,包括string(字符串),list(列表),set(集合),zset(sorted set 有序集合)和hash(哈希类型)</li>
<li>这些数据类型都支持 push/pop add/remove 及取交集并集和差集及更丰富的操作,而且这些操作都是原子性的</li>
<li>在此基础上,Redis支持各种不同方式的排序</li>
<li>与Memcached一样,为了保证效率,数据都是缓存在内存中</li>
<li>区别的是Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件</li>
<li>并且在此基础上实现了master-slave(主从)同步</li>
</ul>
<h2 id="2-2Redis安装"><a href="#2-2Redis安装" class="headerlink" title="2.2Redis安装"></a>2.2Redis安装</h2><p>安装版本</p>
<p>==6.2.1 for Linux（redis-6.2.1.tar.gz）==</p>
<p>安装步骤</p>
<ol>
<li>安装C语言的编译环境gcc</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<p>查看gcc版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装tcl</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y tcl</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>下载redis-6.2.1.tar.gz</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.2.8.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>解压</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-6.2.1.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>解压完成后进入目录</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd redis-6.2.1</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在redis-6.2.1目录下再次执行make命令（只是编译好),如果没有准备好C语言编译环境，make 会报错—Jemalloc/jemalloc.h：没有那个文件.</li>
</ol>
<p><strong>解决方案：执行make distclean</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>跳过make test 继续执行: make install</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>安装完成    </p>
<h2 id="2-3安装目录"><a href="#2-3安装目录" class="headerlink" title="2.3安装目录"></a>2.3安装目录</h2><blockquote>
<p> /usr/local/bin</p>
</blockquote>
<p>查看默认安装目录：</p>
<blockquote>
<p>redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何</p>
<p>redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲</p>
<p>redis-check-dump：修复有问题的dump.rdb文件</p>
<p>redis-sentinel：Redis集群使用</p>
<p>redis-server：Redis服务器启动命令</p>
<p>redis-cli：客户端，操作入口</p>
</blockquote>
<h2 id="2-4启动Redis"><a href="#2-4启动Redis" class="headerlink" title="2.4启动Redis"></a>2.4启动Redis</h2><h3 id="1-前台启动"><a href="#1-前台启动" class="headerlink" title="1.前台启动"></a>1.前台启动</h3><blockquote>
<p>前台启动，命令行窗口不能关闭，否则服务器停止</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin</span><br><span class="line">redis -server</span><br></pre></td></tr></table></figure>

<h3 id="2-后台启动"><a href="#2-后台启动" class="headerlink" title="2.后台启动"></a>2.后台启动</h3><ol>
<li>备份<strong>redis.conf</strong>(此文件在解压文件里)</li>
</ol>
<p>拷贝此文件到其他目录,这里拷贝在etc下</p>
<ol start="2">
<li>后台启动设置<strong>daemonize no</strong>改成<strong>yes</strong></li>
</ol>
<p>修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</p>
<ol start="3">
<li><strong>Redis</strong>启动</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure>

<p>查看Redis是否启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>用客户端访问：redis-cli</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<p>多个端口可以：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli -p6379</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>测试验证</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping</span><br></pre></td></tr></table></figure>

<p>会出现PONG</p>
<ol start="6">
<li>关闭</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure>

<h2 id="2-5Redis相关知识"><a href="#2-5Redis相关知识" class="headerlink" title="2.5Redis相关知识"></a>2.5Redis相关知识</h2><blockquote>
<p>默认16个数据库，类似数组下标从0开始，初始默认使用0号库</p>
<p>使用命令 select  <dbid>来切换数据库。如: select 8 </p>
<p>统一密码管理，所有库同样密码。</p>
<p>dbsize查看当前数据库的key的数量</p>
<p>flushdb清空当前库</p>
<p>flushall通杀全部库</p>
<p>Redis是单线程+多路IO复用技术</p>
<p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p>
</blockquote>
<h1 id="3-常用5大数据类型"><a href="#3-常用5大数据类型" class="headerlink" title="3.常用5大数据类型"></a>3.常用5大数据类型</h1><blockquote>
<p>redis常见数据类型操作命令</p>
<p><a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p>
</blockquote>
<h2 id="3-1Redis键-key"><a href="#3-1Redis键-key" class="headerlink" title="3.1Redis键(key)"></a>3.1Redis键(key)</h2><blockquote>
<p>keys * 查看当前库所有key  (匹配：keys *1)</p>
<p>exists key 判断某个key是否存在</p>
<p>type key 查看你的key是什么类型</p>
<p>del key    删除指定的key数据</p>
<p>unlink key  根据value选择非阻塞删除</p>
<p>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p>
<p>expire key 10  10秒钟：为给定的key设置过期时间</p>
<p>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</p>
<p>select命令切换数据库</p>
<p>dbsize查看当前数据库的key的数量</p>
<p>flushdb清空当前库</p>
<p>flushall通杀全部库</p>
</blockquote>
<h2 id="3-2-Redis字符串-String"><a href="#3-2-Redis字符串-String" class="headerlink" title="3.2 Redis字符串(String)"></a>3.2 Redis字符串(String)</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p>
<p>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p>
<p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p>
</blockquote>
<h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><blockquote>
<p>*NX：当数据库中key不存在时，可以将key-value添加数据库</p>
<p>*XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</p>
<p>*EX：key的超时秒数</p>
<p>*PX：key的超时毫秒数，与EX互斥</p>
</blockquote>
<ul>
<li>set <key> <value> 添加键值对</li>
<li>get <key> 查询对应键值</li>
<li>append <key> <value> 将给定的<value> 追加到原值的末尾</li>
<li>strlen <key> 获得值的长度</li>
<li>setnx <key> <value> 只有在 key 不存在时设置 key 的值</li>
<li>incr <key> 将 key 中储存的数字值增1,只能对数字值操作,如果为空,新增值为1</li>
<li>decr <key> 将 key 中储存的数字值减1,只能对数字值操作,如果为空,新增值为-1</li>
<li>incrby / decrby <key> &lt;步长&gt; 将 key 中储存的数字值增减。自定义步长。</li>
</ul>
<p><strong>原子性</strong></p>
<ul>
<li>mset <key1> <value1> <key2> <value2> ….. 同时设置一个或多个 key-value对 </li>
<li>mget <key1> <key2> <key3> ….. 同时获取一个或多个 value </li>
<li>msetnx <key1> <value1> <key2> <value2> ….. 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</li>
</ul>
<p><strong>以上三个具有原子性，有一个失败则都失败</strong></p>
<ul>
<li>getrange <key> &lt;起始位置&gt; &lt;结束位置&gt; 获得值的范围，类似java中的substring，<strong>前包，后包</strong></li>
<li>setrange <key> &lt;起始位置&gt; <value> 用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0开始</strong>)。</li>
<li>setex <key> &lt;过期时间&gt; <value> 设置键值的同时，设置过期时间，单位秒。</li>
<li>getset <key><value> 以新换旧，设置了新值同时获得旧值。</li>
</ul>
<h3 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3.数据结构"></a>3.数据结构</h3><blockquote>
<p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p>
</blockquote>
<h2 id="3-3Redis列表-List"><a href="#3-3Redis列表-List" class="headerlink" title="3.3Redis列表(List)"></a>3.3Redis列表(List)</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>单键多值</p>
<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>
<p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p>
</blockquote>
<h3 id="2-常用命令-1"><a href="#2-常用命令-1" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><ul>
<li>lpush/rpush <key><value1><value2><value3> …. 从左边/右边插入一个或多个值。</li>
<li>lpop/rpop <key>从左边/右边吐出一个值。<strong>值在键在，值光键亡。</strong></li>
<li>rpoplpush <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边。</li>
<li>lrange <key><start><stop> 按照索引下标获得元素(从左到右)</li>
<li>lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）</li>
<li>lindex <key><index>按照索引下标获得元素(从左到右)</li>
<li>llen <key>获得列表长度 </li>
<li>linsert <key> before <value><newvalue>在<value>的后面插入<newvalue>插入值</li>
<li>lrem <key><n><value>从左边删除n个value(从左到右)</li>
<li>lset<key><index><value>将列表key下标为index的值替换成value</li>
</ul>
<h3 id="3-数据结构-1"><a href="#3-数据结构-1" class="headerlink" title="3.数据结构"></a>3.数据结构</h3><blockquote>
<p>List的数据结构为快速链表quickList。</p>
<p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p>
<p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p>
<p>当数据量比较多的时候才会改成quicklist。</p>
<p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p>
<p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>
</blockquote>
<h2 id="3-4Redis集合-Set"><a href="#3-4Redis集合-Set" class="headerlink" title="3.4Redis集合(Set)"></a>3.4Redis集合(Set)</h2><h3 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p>
<p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的**复杂度都是O(1)**。</p>
<p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p>
</blockquote>
<h3 id="2-常用命令-2"><a href="#2-常用命令-2" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><ul>
<li>sadd <key><value1><value2> ….. 将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</li>
<li>smembers <key>取出该集合的所有值。</li>
<li>sismember <key><value>判断集合<key>是否为含有该<value>值，有1，没有0</li>
<li>scard<key>返回该集合的元素个数。</li>
<li>srem <key><value1><value2> …. 删除集合中的某个元素。</li>
<li>spop <key><strong>随机从该集合中吐出一个值。</strong></li>
<li>srandmember <key><n>随机从该集合中取出n个值。不会从集合中删除 。</li>
<li>smove <source><destination>value把集合中一个值从一个集合移动到另一个集合</li>
<li>sinter <key1><key2>返回两个集合的交集元素。</li>
<li>sunion <key1><key2>返回两个集合的并集元素。</li>
<li>sdiff <key1><key2>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</li>
</ul>
<h3 id="3-数据结构-2"><a href="#3-数据结构-2" class="headerlink" title="3.数据结构"></a>3.数据结构</h3><blockquote>
<p>Set数据结构是dict字典，字典是用哈希表实现的。</p>
<p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p>
</blockquote>
<h2 id="3-5Redis哈希-Hash"><a href="#3-5Redis哈希-Hash" class="headerlink" title="3.5Redis哈希(Hash)"></a>3.5Redis哈希(Hash)</h2><h3 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>Redis hash 是一个键值对集合。</p>
<p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<p>类似Java里面的Map&lt;String,Object&gt;</p>
</blockquote>
<h3 id="2-常用命令-3"><a href="#2-常用命令-3" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><ul>
<li>hset <key><field><value>给<key>集合中的 <field>键赋值<value></li>
<li>hget <key1><field>从<key1>集合<field>取出 value </li>
<li>hmset <key1><field1><value1><field2><value2>… 批量设置hash的值</li>
<li>hexists<key1><field>查看哈希表 key 中，给定域 field 是否存在。 </li>
<li>hkeys <key>列出该hash集合的所有field</li>
<li>hvals <key>列出该hash集合的所有value</li>
<li>hincrby <key><field><increment>为哈希表 key 中的域 field 的值加上增量 1  -1</li>
<li>hsetnx <key><field><value>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</li>
</ul>
<h3 id="3-数据结构-3"><a href="#3-数据结构-3" class="headerlink" title="3.数据结构"></a>3.数据结构</h3><blockquote>
<p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p>
</blockquote>
<h2 id="3-6Redis有序集合Zset-sorted-set"><a href="#3-6Redis有序集合Zset-sorted-set" class="headerlink" title="3.6Redis有序集合Zset(sorted set)"></a>3.6Redis有序集合Zset(sorted set)</h2><h3 id="1-简介-4"><a href="#1-简介-4" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p>
<p>不同之处是有序集合的每个成员都关联了一个<strong>评分（score）</strong>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p>
<p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p>
<p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p>
</blockquote>
<h3 id="2-常用命令-4"><a href="#2-常用命令-4" class="headerlink" title="2.常用命令"></a>2.常用命令</h3><ul>
<li>zadd <key><score1><value1><score2><value2>…将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</li>
<li><strong>zrange <key><start><stop> [WITHSCORES]</strong>  返回有序集 key 中，下标在<start><stop>之间的元素,带WITHSCORES，可以让分数一起和值返回到结果集。</li>
<li>zrangebyscore key minmax [withscores] [limit offset count] 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </li>
<li>zrevrangebyscore key maxmin [withscores] [limit offset count] 同上，改为从大到小排列。 </li>
<li>zincrby <key><increment><value>   为元素的score加上增量</li>
<li>zrem <key><value>删除该集合下，指定值的元素</li>
<li>zcount <key><min><max>统计该集合，分数区间内的元素个数 </li>
<li>zrank <key><value>返回该值在集合中的排名，从0开始。</li>
</ul>
<h3 id="3-数据结构-4"><a href="#3-数据结构-4" class="headerlink" title="3.数据结构"></a>3.数据结构</h3><blockquote>
<p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p>
<p>zset底层使用了两个数据结构</p>
<p>（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p>
<p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p>
</blockquote>
<h1 id="4-Redis6配置文件详解"><a href="#4-Redis6配置文件详解" class="headerlink" title="4.Redis6配置文件详解"></a>4.Redis6配置文件详解</h1><h2 id="4-1Units单位"><a href="#4-1Units单位" class="headerlink" title="4.1Units单位"></a>4.1Units单位</h2><blockquote>
<p>配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit</p>
<p>大小写不敏感</p>
</blockquote>
<h2 id="4-2INCLUDES"><a href="#4-2INCLUDES" class="headerlink" title="4.2INCLUDES"></a>4.2INCLUDES</h2><blockquote>
<p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p>
</blockquote>
<h2 id="4-3网络相关配置"><a href="#4-3网络相关配置" class="headerlink" title="4.3网络相关配置"></a>4.3网络相关配置</h2><h3 id="1-bind"><a href="#1-bind" class="headerlink" title="1.bind"></a>1.bind</h3><blockquote>
<p>默认情况bind=127.0.0.1只能接受本机的访问请求</p>
<p>不写的情况下，无限制接受任何ip地址的访问</p>
<p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p>
</blockquote>
<p>==如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应==</p>
<h3 id="2-protected-mode"><a href="#2-protected-mode" class="headerlink" title="2.protected-mode"></a>2.protected-mode</h3><blockquote>
<p>将本机访问保护模式设置no</p>
</blockquote>
<h3 id="3-port"><a href="#3-port" class="headerlink" title="3.port"></a>3.port</h3><blockquote>
<p>端口号，默认 6379</p>
</blockquote>
<h3 id="4-tcp-backlog"><a href="#4-tcp-backlog" class="headerlink" title="4.tcp-backlog"></a>4.tcp-backlog</h3><blockquote>
<p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。</p>
<p>在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p>
<p>注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</p>
</blockquote>
<h3 id="5-timeout"><a href="#5-timeout" class="headerlink" title="5.timeout"></a>5.timeout</h3><blockquote>
<p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即永不关闭。</p>
</blockquote>
<h3 id="6-tcp-keepalive"><a href="#6-tcp-keepalive" class="headerlink" title="6.tcp-keepalive"></a>6.tcp-keepalive</h3><blockquote>
<p>对访问客户端的一种心跳检测，每个n秒检测一次。</p>
<p>单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60 </p>
</blockquote>
<h2 id="4-4GENERAL通用"><a href="#4-4GENERAL通用" class="headerlink" title="4.4GENERAL通用"></a>4.4GENERAL通用</h2><h3 id="1-daemonize"><a href="#1-daemonize" class="headerlink" title="1.daemonize"></a>1.daemonize</h3><blockquote>
<p>是否为后台进程，设置为yes</p>
<p>守护进程，后台启动</p>
</blockquote>
<h3 id="2-pidfile"><a href="#2-pidfile" class="headerlink" title="2.pidfile"></a>2.pidfile</h3><blockquote>
<p>存放pid文件的位置，每个实例会产生一个不同的pid文件</p>
</blockquote>
<h3 id="3-loglevel"><a href="#3-loglevel" class="headerlink" title="3.loglevel"></a>3.loglevel</h3><blockquote>
<p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为<strong>notice</strong></p>
</blockquote>
<p>==四个级别根据使用阶段来选择，生产环境选择notice 或者warning==</p>
<h3 id="4-logfile"><a href="#4-logfile" class="headerlink" title="4.logfile"></a>4.logfile</h3><blockquote>
<p>日志文件名称</p>
</blockquote>
<h3 id="5-databases-16"><a href="#5-databases-16" class="headerlink" title="5.databases 16"></a>5.databases 16</h3><blockquote>
<p>设定库的数量 默认16，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id</p>
</blockquote>
<h2 id="4-5SECURITY安全"><a href="#4-5SECURITY安全" class="headerlink" title="4.5SECURITY安全"></a>4.5SECURITY安全</h2><h3 id="1-设置密码"><a href="#1-设置密码" class="headerlink" title="1.设置密码"></a>1.设置密码</h3><blockquote>
<p>访问密码的查看、设置和取消</p>
<p>在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。</p>
<p>永久设置，需要再配置文件中进行设置。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config get requirepass</span><br><span class="line"></span><br><span class="line">config set requirepass &quot;123456&quot;</span><br><span class="line"></span><br><span class="line">auth 123456</span><br></pre></td></tr></table></figure>

<h2 id="4-6LIMITS-限制"><a href="#4-6LIMITS-限制" class="headerlink" title="4.6LIMITS(限制)"></a>4.6LIMITS(限制)</h2><h3 id="1-maxclients"><a href="#1-maxclients" class="headerlink" title="1.maxclients"></a>1.maxclients</h3><blockquote>
<p>设置redis同时可以与多少个客户端进行连接。</p>
<p>默认情况下为10000个客户端。</p>
<p>如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</p>
</blockquote>
<h3 id="2-maxmemory"><a href="#2-maxmemory" class="headerlink" title="2.maxmemory"></a>2.maxmemory</h3><blockquote>
<p>建议<strong>必须设置</strong>，否则，将内存占满，造成服务器宕机</p>
<p>设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</p>
<p>如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPSH等。</p>
<p>但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</p>
</blockquote>
<h3 id="3-maxmemory-policy"><a href="#3-maxmemory-policy" class="headerlink" title="3.maxmemory-policy"></a>3.maxmemory-policy</h3><ul>
<li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</li>
<li>allkeys-lru：在所有集合key中，使用LRU算法移除key</li>
<li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</li>
<li>allkeys-random：在所有集合key中，移除随机的key</li>
<li>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</li>
<li>noeviction：不进行移除。针对写操作，只是返回错误信息</li>
</ul>
<h3 id="4-maxmemory-samples"><a href="#4-maxmemory-samples" class="headerlink" title="4.maxmemory-samples"></a>4.maxmemory-samples</h3><blockquote>
<p>设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。</p>
<p>一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。</p>
</blockquote>
<h1 id="5-Redis6的发布和订阅"><a href="#5-Redis6的发布和订阅" class="headerlink" title="5.Redis6的发布和订阅"></a>5.Redis6的发布和订阅</h1><h2 id="5-1什么是发布和订阅"><a href="#5-1什么是发布和订阅" class="headerlink" title="5.1什么是发布和订阅"></a>5.1什么是发布和订阅</h2><blockquote>
<p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p>
</blockquote>
<h2 id="5-2Redis的发布和订阅"><a href="#5-2Redis的发布和订阅" class="headerlink" title="5.2Redis的发布和订阅"></a>5.2Redis的发布和订阅</h2><p>1.客户端可以订阅频道如下图</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E8%AE%A2%E9%98%85.png"></p>
<p>2.当给这个频道发布消息后，消息就会发送给订阅的客户端</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E5%8F%91%E5%B8%83.png"></p>
<h2 id="5-3发布订阅命令行实现"><a href="#5-3发布订阅命令行实现" class="headerlink" title="5.3发布订阅命令行实现"></a>5.3发布订阅命令行实现</h2><ol>
<li>打开一个客户端订阅channel1</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SUBSCRIBE channel1</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开另一个客户端，给channel1发布消息hello</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">publish channel1 hello</span><br></pre></td></tr></table></figure>

<p>返回的1是订阅者数量</p>
<ol start="3">
<li>打开第一个客户端可以看到发送的消息</li>
</ol>
<p>==注:发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息==</p>
<h1 id="6-Redis6新数据类型"><a href="#6-Redis6新数据类型" class="headerlink" title="6.Redis6新数据类型"></a>6.Redis6新数据类型</h1><h2 id="6-1Bitmaps"><a href="#6-1Bitmaps" class="headerlink" title="6.1Bitmaps"></a>6.1Bitmaps</h2><h3 id="1-简介-5"><a href="#1-简介-5" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011</p>
<p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p>
<p>   Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p>
<p>​    （1）Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p>
<p>​    （2）Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数        组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p>
</blockquote>
<h3 id="2-命令"><a href="#2-命令" class="headerlink" title="2.命令"></a>2.命令</h3><ul>
<li>setbit<key><offset><value>设置Bitmaps中某个偏移量的值（0或1）,offset:偏移量从0开始</li>
<li>getbit<key><offset> 获取Bitmaps中某个偏移量的值</li>
<li>bitcount<key>[start end] 统计字符串从start字节到end字节比特值为1的数量</li>
<li>bitop and(or/not/xor) <destkey> [key…] bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</li>
</ul>
<h2 id="6-2HyperLogLog"><a href="#6-2HyperLogLog" class="headerlink" title="6.2HyperLogLog"></a>6.2HyperLogLog</h2><h3 id="1-简介-6"><a href="#1-简介-6" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p>
<p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p>
<p>解决基数问题有很多种方案：</p>
<p>（1）数据存储在MySQL表中，使用distinct count计算不重复个数</p>
<p>（2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p>
<p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p>
<p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p>
<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>
<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
<p>什么是基数?</p>
<p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>
</blockquote>
<h3 id="2-命令-1"><a href="#2-命令-1" class="headerlink" title="2.命令"></a>2.命令</h3><ul>
<li>pfadd <key>&lt; element&gt; [element …]  添加指定元素到 HyperLogLog 中</li>
<li>pfcount<key> [key …] 计算HLL的近似基数，可以计算多个HLL</li>
<li>pfmerge<destkey><sourcekey> [sourcekey …] 将一个或多个HLL合并后的结果存储在另一个HLL中</li>
</ul>
<h2 id="6-3Geospatial"><a href="#6-3Geospatial" class="headerlink" title="6.3Geospatial"></a>6.3Geospatial</h2><h3 id="1-简介-7"><a href="#1-简介-7" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote>
<p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p>
</blockquote>
<h3 id="2-命令-2"><a href="#2-命令-2" class="headerlink" title="2.命令"></a>2.命令</h3><ul>
<li><p>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]  添加地理位置（经度，纬度，名称）</p>
<p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p>
<p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p>
<p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p>
<p>已经添加的数据，是无法再次往里面添加的。</p>
</li>
<li><p>geopos <key><member> [member…] 获得指定地区的坐标值</p>
</li>
<li><p>geodist<key><member1><member2> [m|km|ft|mi ] 获取两个位置之间的直线距离</p>
</li>
<li><p>georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi  以给定的经纬度为中心，找出某一半径内的元素</p>
</li>
</ul>
<h1 id="7-Jedis操作Redis6"><a href="#7-Jedis操作Redis6" class="headerlink" title="7.Jedis操作Redis6"></a>7.Jedis操作Redis6</h1><h2 id="7-1-Redis-Jedis-测试"><a href="#7-1-Redis-Jedis-测试" class="headerlink" title="7.1 Redis_Jedis_测试"></a>7.1 Redis_Jedis_测试</h2><h3 id="1-创建Maven工程-导入依赖"><a href="#1-创建Maven工程-导入依赖" class="headerlink" title="1.创建Maven工程,导入依赖"></a>1.创建Maven工程,导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Jedis对象</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;192.168.244.131&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        String ping = jedis.ping();</span><br><span class="line">        System.out.println(ping);<span class="comment">//输出PONG,说明连接Redis成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h3><p>(1)redis.conf中注释掉bind 127.0.0.1,然后修改protected-mode的值为no,<strong>重启Redis</strong></p>
<p>(2)禁用Linux的防火墙:Linux(CentOS7)里执行命令</p>
<p>关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<p>禁止firewall开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<h2 id="7-2-测试相关数据类型"><a href="#7-2-测试相关数据类型" class="headerlink" title="7.2 测试相关数据类型"></a>7.2 测试相关数据类型</h2><h3 id="Jedis-API-Key"><a href="#Jedis-API-Key" class="headerlink" title="Jedis-API: Key"></a>Jedis-API: Key</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置键值对</span></span><br><span class="line">jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;14&quot;</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="comment">//通过键获取值</span></span><br><span class="line">String name = jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line"><span class="comment">//获取所有的键</span></span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : keys)&#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否存在某个键</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否存在name:&quot;</span>+jedis.exists(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="comment">//查看键失效的时间</span></span><br><span class="line">System.out.println(<span class="string">&quot;name的失效时间:&quot;</span>+jedis.ttl(<span class="string">&quot;name&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">张三</span><br><span class="line">gender</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">是否存在name:true</span><br><span class="line">name的失效时间:-1</span><br></pre></td></tr></table></figure>

<h3 id="Jedis-API-String"><a href="#Jedis-API-String" class="headerlink" title="Jedis-API:  String"></a>Jedis-API:  String</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置多个键值对</span></span><br><span class="line">jedis.mset(<span class="string">&quot;str1&quot;</span>,<span class="string">&quot;v1&quot;</span>,<span class="string">&quot;str2&quot;</span>,<span class="string">&quot;v2&quot;</span>,<span class="string">&quot;str3&quot;</span>,<span class="string">&quot;v3&quot;</span>);</span><br><span class="line">System.out.println(jedis.mget(<span class="string">&quot;str1&quot;</span>,<span class="string">&quot;str2&quot;</span>,<span class="string">&quot;str3&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<p>[v1, v2, v3]</p>
<h3 id="Jedis-API-List"><a href="#Jedis-API-List" class="headerlink" title="Jedis-API:  List"></a>Jedis-API:  List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向列表添加元素</span></span><br><span class="line">jedis.lpush(<span class="string">&quot;list&quot;</span>, <span class="string">&quot;l1&quot;</span>, <span class="string">&quot;l2&quot;</span>, <span class="string">&quot;l3&quot;</span>);</span><br><span class="line"><span class="comment">//获取列表</span></span><br><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">&quot;list&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<p>[l3, l2, l1]</p>
<h3 id="Jedis-API-set"><a href="#Jedis-API-set" class="headerlink" title="Jedis-API:  set"></a>Jedis-API:  set</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向集合添加元素</span></span><br><span class="line">jedis.sadd(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">jedis.sadd(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kitty&quot;</span>);</span><br><span class="line"><span class="comment">//获取集合中的元素</span></span><br><span class="line">Set&lt;String&gt; name = jedis.smembers(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<p>[lucy, kitty]</p>
<h3 id="Jedis-API-hash"><a href="#Jedis-API-hash" class="headerlink" title="Jedis-API:  hash"></a>Jedis-API:  hash</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jedis.hset(<span class="string">&quot;users&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">String age = jedis.hget(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">System.out.println(age);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<p>20</p>
<h3 id="Jedis-API-zset"><a href="#Jedis-API-zset" class="headerlink" title="Jedis-API:  zset"></a>Jedis-API:  zset</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jedis.zadd(<span class="string">&quot;china&quot;</span>,<span class="number">100d</span>,<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">Set&lt;String&gt; china = jedis.zrange(<span class="string">&quot;china&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(china);</span><br></pre></td></tr></table></figure>

<p><strong>输出结果</strong></p>
<p>[上海]</p>
<h1 id="8-Redis6与SpringBoot整合"><a href="#8-Redis6与SpringBoot整合" class="headerlink" title="8.Redis6与SpringBoot整合"></a>8.Redis6与SpringBoot整合</h1><h2 id="整合步骤"><a href="#整合步骤" class="headerlink" title="整合步骤"></a>整合步骤</h2><ol>
<li>在pom.xml文件中引入Redis相关依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>application.yml中配置Redis</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.244</span><span class="number">.131</span>     <span class="comment">#Redis服务器地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>                <span class="comment">#Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span>               <span class="comment">#Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">connect-timeout:</span> <span class="number">1800000</span>  <span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">20</span>        <span class="comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">5</span>           <span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span>          <span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>           <span class="comment">#连接池中的最小空闲连接</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>添加redis配置类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/redis&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        String name = (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-Redis6的事务操作"><a href="#9-Redis6的事务操作" class="headerlink" title="9.Redis6的事务操作"></a>9.Redis6的事务操作</h1><h2 id="Redis的事务定义"><a href="#Redis的事务定义" class="headerlink" title="Redis的事务定义"></a>Redis的事务定义</h2><blockquote>
<p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>
<p>Redis事务的主要作用就是串联多个命令防止别的命令插队。</p>
</blockquote>
<h2 id="Multi、Exec、discard"><a href="#Multi、Exec、discard" class="headerlink" title="Multi、Exec、discard"></a>Multi、Exec、discard</h2><blockquote>
<p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p>
<p>组队的过程中可以通过discard来放弃组队。 </p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E4%BA%8B%E5%8A%A1.png"></p>
<h2 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h2><blockquote>
<p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p>
<p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p>
</blockquote>
<h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><blockquote>
<p><strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p>
</blockquote>
<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><blockquote>
<p><strong>乐观锁(Optimistic Lock),</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p>
</blockquote>
<h2 id="WATCH-key-key-…"><a href="#WATCH-key-key-…" class="headerlink" title="WATCH key [key …]"></a>WATCH key [key …]</h2><blockquote>
<p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务**执行之前这个(**<strong>或这些) key</strong> <strong>被其他命令所改动，那么事务将被打断。</strong></p>
</blockquote>
<h2 id="unwatch"><a href="#unwatch" class="headerlink" title="unwatch"></a>unwatch</h2><blockquote>
<p>取消 WATCH 命令对所有 key 的监视。</p>
<p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p>
</blockquote>
<h2 id="Redis事务三特性"><a href="#Redis事务三特性" class="headerlink" title="Redis事务三特性"></a>Redis事务三特性</h2><ul>
<li>单独的隔离操作 <ul>
<li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
</ul>
</li>
<li>没有隔离级别的概念 <ul>
<li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li>
</ul>
</li>
<li>不保证原子性 <ul>
<li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </li>
</ul>
</li>
</ul>
<h1 id="10-Redis6持久化之RDB"><a href="#10-Redis6持久化之RDB" class="headerlink" title="10.Redis6持久化之RDB"></a>10.Redis6持久化之RDB</h1><h2 id="RDB简介"><a href="#RDB简介" class="headerlink" title="RDB简介"></a>RDB简介</h2><blockquote>
<p>在指定的时间间隔内将内存中的数据集快照写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p>
</blockquote>
<h2 id="备份是如何执行的"><a href="#备份是如何执行的" class="headerlink" title="备份是如何执行的"></a>备份是如何执行的</h2><blockquote>
<p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。<strong>RDB</strong>的缺点是最后一次持久化后的数据可能丢失。</p>
</blockquote>
<h2 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h2><ul>
<li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</li>
<li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>”</li>
<li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li>
</ul>
<h2 id="RDB持久化流程"><a href="#RDB持久化流程" class="headerlink" title="RDB持久化流程"></a>RDB持久化流程</h2><p><img src="https://fanaidi.gitee.io/blogimgs/Redis/RDB%E6%8C%81%E4%B9%85%E5%8C%96%E6%B5%81%E7%A8%8B.png"></p>
<h2 id="dump-rdb文件"><a href="#dump-rdb文件" class="headerlink" title="dump.rdb文件"></a>dump.rdb文件</h2><blockquote>
<p>在redis.conf中配置文件名称，默认为dump.rdb</p>
</blockquote>
<h3 id="1-配置位置"><a href="#1-配置位置" class="headerlink" title="1.配置位置"></a>1.配置位置</h3><blockquote>
<p>rdb文件的保存路径，也可以修改。默认为Redis启动时命令行所在的目录下</p>
<p>dir “/myredis/“</p>
</blockquote>
<h3 id="2-如何触发RDB快照；保持策略"><a href="#2-如何触发RDB快照；保持策略" class="headerlink" title="2.如何触发RDB快照；保持策略"></a>2.如何触发RDB快照；保持策略</h3><h4 id="2-1配置文件中默认的快照配置"><a href="#2-1配置文件中默认的快照配置" class="headerlink" title="2.1配置文件中默认的快照配置"></a>2.1配置文件中默认的快照配置</h4><p><img src="https://fanaidi.gitee.io/blogimgs/Redis/RDB%E5%BF%AB%E7%85%A7%E9%85%8D%E7%BD%AE.png"></p>
<h4 id="2-2命令save-VS-bgsave"><a href="#2-2命令save-VS-bgsave" class="headerlink" title="2.2命令save VS bgsave"></a>2.2命令save VS bgsave</h4><blockquote>
<p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p>
<p>bgsave：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。</p>
<p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p>
</blockquote>
<h4 id="2-3flushall命令"><a href="#2-3flushall命令" class="headerlink" title="2.3flushall命令"></a>2.3flushall命令</h4><blockquote>
<p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p>
</blockquote>
<h4 id="2-4-save"><a href="#2-4-save" class="headerlink" title="2.4 save"></a>2.4 save</h4><blockquote>
<p>格式：save 秒钟 写操作次数</p>
<p>RDB是整个内存的压缩过的Snapshot，RDB的数据结构，可以配置复合的快照触发条件，</p>
<p>默认是1分钟内改了1万次，或5分钟内改了10次，或15分钟内改了1次。</p>
<p>禁用</p>
<p>不设置save指令，或者给save传入空字符串</p>
</blockquote>
<h4 id="2-5stop-writes-on-bgsave-error"><a href="#2-5stop-writes-on-bgsave-error" class="headerlink" title="2.5stop-writes-on-bgsave-error"></a>2.5stop-writes-on-bgsave-error</h4><blockquote>
<p>当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐yes.</p>
</blockquote>
<h4 id="2-6rdbcompression压缩文件"><a href="#2-6rdbcompression压缩文件" class="headerlink" title="2.6rdbcompression压缩文件"></a>2.6rdbcompression压缩文件</h4><blockquote>
<p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</p>
<p>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐yes.</p>
</blockquote>
<h4 id="2-7rdbchecksum-检查完整性"><a href="#2-7rdbchecksum-检查完整性" class="headerlink" title="2.7rdbchecksum 检查完整性"></a>2.7rdbchecksum 检查完整性</h4><blockquote>
<p>在存储快照后，还可以让redis使用CRC64算法来进行数据校验，</p>
<p>但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</p>
<p>推荐yes.</p>
</blockquote>
<h2 id="RDB的备份"><a href="#RDB的备份" class="headerlink" title="RDB的备份"></a>RDB的备份</h2><blockquote>
<p>先通过config get dir 查询rdb文件的目录 </p>
<p>将*.rdb的文件拷贝到别的地方</p>
<p>rdb的恢复</p>
<ol>
<li><p>关闭Redis</p>
</li>
<li><p>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</p>
</li>
<li><p>启动Redis, 备份数据会直接加载</p>
</li>
</ol>
</blockquote>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li><p>适合大规模的数据恢复</p>
</li>
<li><p>对数据完整性和一致性要求不高更适合使用</p>
</li>
<li><p>节省磁盘空间</p>
</li>
<li><p>恢复速度快</p>
</li>
</ul>
<h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li><p>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p>
</li>
<li><p>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</p>
</li>
<li><p>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</p>
</li>
</ul>
<h2 id="如何停止"><a href="#如何停止" class="headerlink" title="如何停止"></a>如何停止</h2><blockquote>
<p>动态停止RDB：redis-cli config set save “”#save后给空值，表示禁用保存策略</p>
</blockquote>
<h1 id="11-Redis6持久化之AOF"><a href="#11-Redis6持久化之AOF" class="headerlink" title="11.Redis6持久化之AOF"></a>11.Redis6持久化之AOF</h1><h2 id="AOF简介"><a href="#AOF简介" class="headerlink" title="AOF简介"></a>AOF简介</h2><blockquote>
<p>AOF(Append Only File)</p>
<p>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
</blockquote>
<h2 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h2><ol>
<li>客户端的请求写命令会被append追加到AOF缓冲区内；</li>
<li>AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</li>
<li>AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</li>
<li>Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</li>
</ol>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/AOF%E6%8C%81%E4%B9%85%E5%8C%96%E6%B5%81%E7%A8%8B.png"></p>
<h2 id="AOF默认不开启"><a href="#AOF默认不开启" class="headerlink" title="AOF默认不开启"></a>AOF默认不开启</h2><blockquote>
<p>可以在redis.conf中配置文件名称，默认为 appendonly.aof</p>
<p>AOF文件的保存路径，同RDB的路径一致。</p>
</blockquote>
<h2 id="AOF和RDB同时开启，redis听谁的"><a href="#AOF和RDB同时开启，redis听谁的" class="headerlink" title="AOF和RDB同时开启，redis听谁的?"></a>AOF和RDB同时开启，redis听谁的?</h2><blockquote>
<p>AOF和RDB同时开启，系统默认取AOF的数据（数据不会存在丢失）</p>
</blockquote>
<h2 id="AOF启动-修复-恢复"><a href="#AOF启动-修复-恢复" class="headerlink" title="AOF启动/修复/恢复"></a>AOF启动/修复/恢复</h2><ul>
<li><p>AOF的备份机制和性能虽然和RDB不同, 但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统即加载。</p>
</li>
<li><p>正常恢复</p>
<ul>
<li>修改默认的appendonly no，改为yes</li>
<li>将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</li>
<li>恢复：重启redis然后重新加载</li>
</ul>
</li>
<li><p>异常恢复</p>
<ul>
<li>修改默认的appendonly no，改为yes</li>
<li>如遇到<strong>AOF</strong>文件损坏**，通过/usr/local/bin/**redis-check-aof–fix appendonly.aof进行恢复</li>
<li>备份被写坏的AOF文件</li>
<li>恢复：重启redis，然后重新加载</li>
</ul>
</li>
</ul>
<h2 id="AOF同步频率设置"><a href="#AOF同步频率设置" class="headerlink" title="AOF同步频率设置"></a>AOF同步频率设置</h2><blockquote>
<p>appendfsync always</p>
<p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p>
<p>appendfsync everysec</p>
<p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p>
<p>appendfsync no</p>
<p>redis不主动进行同步，把同步时机交给操作系统。</p>
</blockquote>
<h2 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a>Rewrite压缩</h2><blockquote>
<p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p>
</blockquote>
<h2 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h2><ul>
<li><p>备份机制更稳健，丢失数据概率更低。</p>
</li>
<li><p>可读的日志文本，通过操作AOF稳健，可以处理误操作。</p>
</li>
</ul>
<h2 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li>比起RDB占用更多的磁盘空间。</li>
<li>恢复备份速度要慢。</li>
<li>每次读写都同步的话，有一定的性能压力。</li>
<li>存在个别Bug，造成恢复不能。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>官方推荐两个都启用。</p>
<p>如果对数据不敏感，可以选单独用RDB。</p>
<p>不建议单独用 AOF，因为可能会出现Bug。</p>
<p>如果只是做纯内存缓存，可以都不用。</p>
</blockquote>
<h3 id="官方建议"><a href="#官方建议" class="headerlink" title="官方建议"></a>官方建议</h3><ul>
<li>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</li>
<li>AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,AOF命令以redis协议追加保存每次写的操作到文件末尾. </li>
<li>Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大</li>
<li>只做缓存：如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.</li>
<li>同时开启两种持久化方式</li>
<li>在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据, 因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.</li>
<li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？ </li>
<li>建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</li>
<li>性能建议</li>
</ul>
<blockquote>
<p>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。</p>
<p>如果使用AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。</p>
<p>代价,一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。</p>
<p>只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。</p>
<p>默认超过原大小100%大小时重写可以改到适当的数值。</p>
</blockquote>
<h1 id="12-Redis6主从复制"><a href="#12-Redis6主从复制" class="headerlink" title="12.Redis6主从复制"></a>12.Redis6主从复制</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>主机数据更新后根据配置和策略， 自动同步到备机的master/slaver机制，<strong>Master以写为主</strong>，<strong>Slave以读为主</strong></p>
</blockquote>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>读写分离，性能扩展</li>
<li>容灾快速恢复</li>
</ul>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol start="0">
<li><p>开启daemonize yes,Appendonly 关掉</p>
</li>
<li><p>根目录下新建<strong>myredis</strong>目录,并将<strong>redis.conf</strong>文件拷贝到<strong>myredis</strong>里面</p>
</li>
<li><p>新建<strong>redis6379.conf</strong>,填写一下内容</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>新建<strong>redis6380.conf</strong>,填写的内容和步骤2类似,将所有的6379替换为6380</p>
</li>
<li><p>新建<strong>redis6381.conf</strong>,填写的内容和步骤2类似,将所有的6379替换为6381</p>
</li>
<li><p>启动三台redis服务器</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server redis6379.conf</span><br><span class="line">redis-server redis6380.conf</span><br><span class="line">redis-server redis6381.conf</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看三台服务器是否启动</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep redis</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E6%9F%A5%E7%9C%8B%E4%B8%89%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%90%A6%E5%90%AF%E5%8A%A8.jpg"></p>
<ol start="7">
<li>查看三台主机运行情况</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info replication</span><br><span class="line">打印主从复制的相关信息</span><br></pre></td></tr></table></figure>

<p>8.配从(库)不配主(库)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slaveof  &lt;ip&gt;&lt;port&gt;</span><br><span class="line">成为某个实例的从服务器</span><br><span class="line">在6380和6381上执行: slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>

<p>9.在主机上写，在从机上可以读取数据,在从机上写数据报错</p>
<p><strong>注意:</strong></p>
<blockquote>
<p>主机挂掉，重启就行，一切如初</p>
<p>从机重启需重设：slaveof 127.0.0.1 6379</p>
<p>slave-priority 10 设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认100</p>
</blockquote>
<h2 id="常用3招"><a href="#常用3招" class="headerlink" title="常用3招"></a>常用3招</h2><h3 id="一主二仆"><a href="#一主二仆" class="headerlink" title="一主二仆"></a>一主二仆</h3><blockquote>
<p><strong>1.主机不配置，从机使用slaveof声明所属主机。</strong></p>
<p><strong>2.主机如果宕机，重启后自动恢复到之前的转态，不需要再做其他任何修改，再新增加数据，从机可以读到数据。</strong></p>
<p><strong>3.从机如果宕机，再次重启后，再次读数据，读不到。需要使用slaveof再次声明所属主机，声明之后可以再次读取数据。</strong></p>
<p><strong>4.主机可写可读，从机只可以读，不可以写。</strong></p>
<p><strong>5.从机使用slaveof声明所属主机是，会发送sync到主机，获取主机的rdb文件，执行，实现数据同步，以后再增数据，使用增量复制完成同步。如果是宕机后再次声明所属主机，则使用全量复制完成同步。</strong></p>
</blockquote>
<h3 id="薪火相传"><a href="#薪火相传" class="headerlink" title="薪火相传"></a>薪火相传</h3><blockquote>
<p>上一个Slave可以是下一个slave的Master，Slave同样可以接收其他 slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</p>
<p>用 slaveof <ip><port></p>
<p>中途变更转向:会清除之前的数据，重新建立拷贝最新的</p>
<p>风险是一旦某个slave宕机，后面的slave都没法备份</p>
<p>主机挂了，从机还是从机，无法写数据了</p>
</blockquote>
<h3 id="反客为主"><a href="#反客为主" class="headerlink" title="反客为主"></a>反客为主</h3><blockquote>
<p>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。</p>
<p>用 slaveof no one  将从机变为主机。</p>
</blockquote>
<p><strong>复制原理</strong></p>
<ul>
<li>Slave启动成功连接到master后会发送一个sync命令</li>
<li>Master接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master将传送整个数据文件到slave,以完成一次完全同步</li>
<li>全量复制：而slave服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>
<li>增量复制：Master继续将新的所有收集到的修改命令依次传给slave,完成同步</li>
<li>但是只要是重新连接master,一次完全同步（全量复制)将被自动执行</li>
</ul>
<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>
</blockquote>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li>调整为一主二仆模式，6379带着6380、6381</li>
<li>自定义的/myredis目录下新建sentinel.conf文件，名字绝不能错</li>
<li>配置哨兵,填写内容</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line">其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动哨兵</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/bin</span><br><span class="line">redis-sentinel  /myredis/sentinel.conf</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>当主机挂掉，从机选举中产生新的主机</li>
</ol>
<blockquote>
<p>(大概10秒左右可以看到哨兵窗口日志，切换了新的主机)</p>
<p>哪个从机会被选举为主机呢？根据优先级别：slave-priority </p>
<p>原主机重启后会变为从机。</p>
</blockquote>
<h3 id="复制延时"><a href="#复制延时" class="headerlink" title="复制延时"></a>复制延时</h3><blockquote>
<p>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重。</p>
</blockquote>
<h3 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h3><p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E6%95%85%E9%9A%9C%E6%81%A2%E5%A4%8D.jpg"></p>
<blockquote>
<p>优先级在redis.conf中默认：slave-priority 100，值越小优先级越高</p>
<p>偏移量是指获得原主机数据最全的</p>
<p>每个redis实例启动后都会随机生成一个40位的runid</p>
</blockquote>
<h1 id="13-Redis6集群"><a href="#13-Redis6集群" class="headerlink" title="13.Redis6集群"></a>13.Redis6集群</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p>
<p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p>
</blockquote>
<p>详情请看<a href="https://www.cnblogs.com/yufeng218/p/13688582.html">https://www.cnblogs.com/yufeng218/p/13688582.html</a></p>
<h1 id="14-Redis6应用问题解决"><a href="#14-Redis6应用问题解决" class="headerlink" title="14.Redis6应用问题解决"></a>14.Redis6应用问题解决</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote>
<p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F.png"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p>
<p>解决方案：</p>
<p>（1）  <strong>对空值缓存：</strong>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p>
<p>（2）  <strong>设置可访问的名单（白名单）：</strong></p>
<p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p>
<p>（3）  <strong>采用布隆过滤器</strong>：(布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。</p>
<p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。)</p>
<p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p>
<p>（4）  <strong>进行实时监控：</strong>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote>
<p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF.png"></p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。</p>
<p>解决问题：</p>
<p>（1）预先设置热门数据：在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p>
<p> (2）实时调整：现场监控哪些数据热门，实时调整key的过期时长</p>
<p>（3）使用锁：</p>
<p>​    （1）  就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。</p>
<p>​    （2）  先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</p>
<p>​    （3）  当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</p>
<p>​    （4）  当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E8%A7%A3%E5%86%B3.png"></p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote>
<p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>
<p>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p>
</blockquote>
<p>正常访问</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE.png"></p>
<p>缓存失效瞬间</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E7%9E%AC%E9%97%B4.png"></p>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p>
<p>解决方案：</p>
<p><strong>（1）</strong>  <strong>构建多级缓存架构：</strong>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p>
<p><strong>（2）</strong>  <strong>使用锁或队列：</strong></p>
<p>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p>
<p><strong>（3）</strong>  <strong>设置过期标志更新缓存：</strong></p>
<p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p>
<p><strong>（4）</strong>  <strong>将缓存失效时间分散开：</strong></p>
<p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<h1 id="15-Redis6新功能"><a href="#15-Redis6新功能" class="headerlink" title="15.Redis6新功能"></a>15.Redis6新功能</h1><h2 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Redis ACL是Access Control List（访问控制列表）的缩写，该功能允许根据可以执行的命令和可以访问的键来限制某些连接。</p>
<p>在Redis 5版本之前，Redis 安全规则只有密码控制 还有通过rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供ACL的功能对用户进行更细粒度的权限控制 ：</p>
<p>（1）接入权限:用户名和密码 </p>
<p>（2）可以执行的命令 </p>
<p>（3）可以操作的 KEY</p>
</blockquote>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul>
<li><p>使用acl list命令展现用户权限列表</p>
<p>数据说明</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/ACL.png"></p>
</li>
<li><p>使用acl cat命令</p>
<ul>
<li><p>查看添加权限指令类别</p>
<p>​    <img src="https://fanaidi.gitee.io/blogimgs/Redis/ACL-CAT.png"></p>
</li>
<li><p>加参数类型名可以查看类型下具体命令</p>
<p>​    <img src="https://fanaidi.gitee.io/blogimgs/Redis/ACL-CAT-STRING.png"></p>
</li>
</ul>
</li>
<li><p>使用acl whoami命令查看当前用户</p>
<ul>
<li><p>~~~shell<br>acl whoami</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 使用aclsetuser命令创建和编辑用户ACL</span><br><span class="line"></span><br><span class="line">  - ACL规则</span><br><span class="line"></span><br><span class="line">    - 下面是有效ACL规则的列表。某些规则只是用于激活或删除标志，或对用户ACL执行给定更改的单个单词。其他规则是字符前缀，它们与命令或类别名称、键模式等连接在一起。</span><br><span class="line"></span><br><span class="line">    | ACL规则              |                                                              |                                                    |</span><br><span class="line">    | -------------------- | ------------------------------------------------------------ | -------------------------------------------------- |</span><br><span class="line">    | 类型                 | 参数                                                         | 说明                                               |</span><br><span class="line">    | 启动和禁用用户       | **on**                                                       | 激活某用户账号                                     |</span><br><span class="line">    | **off**              | 禁用某用户账号。注意，已验证的连接仍然可以工作。如果默认用户被标记为off，则新连接将在未进行身份验证的情况下启动，并要求用户使用AUTH选项发送AUTH或HELLO，以便以某种方式进行身份验证。 |                                                    |</span><br><span class="line">    | 权限的添加删除       | **+&lt;command&gt;**                                               | 将指令添加到用户可以调用的指令列表中               |</span><br><span class="line">    | **-&lt;command&gt;**       | 从用户可执行指令列表移除指令                                 |                                                    |</span><br><span class="line">    | **+@&lt;category&gt;**     | 添加该类别中用户要调用的所有指令，有效类别为@admin、@set、@sortedset…等，通过调用ACL CAT命令查看完整列表。特殊类别@all表示所有命令，包括当前存在于服务器中的命令，以及将来将通过模块加载的命令。 |                                                    |</span><br><span class="line">    | -@&lt;actegory&gt;         | 从用户可调用指令中移除类别                                   |                                                    |</span><br><span class="line">    | **allcommands**      | +@all的别名                                                  |                                                    |</span><br><span class="line">    | **nocommand**        | -@all的别名                                                  |                                                    |</span><br><span class="line">    | 可操作键的添加或删除 | **~&lt;pattern&gt;**                                               | 添加可作为用户可操作的键的模式。例如~*允许所有的键 |</span><br><span class="line"></span><br><span class="line">  - 通过命令创建新用户默认权限</span><br><span class="line"></span><br><span class="line">    - ~~~shell</span><br><span class="line">      acl setuser user1</span><br></pre></td></tr></table></figure>

<ul>
<li>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用just created的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</li>
</ul>
</li>
</ul>
</li>
<li><p>设置有用户名、密码、ACL权限、并启用的用户</p>
<ul>
<li>~~~shell<br>acl setuser user2 on &gt;password ~cached:* +get<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 切换用户，验证权限</span><br><span class="line"></span><br><span class="line">  - ~~~shell</span><br><span class="line">    auth user2 password</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="IO多线程"><a href="#IO多线程" class="headerlink" title="IO多线程"></a>IO多线程</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>IO多线程其实指<strong>客户端交互部分</strong>的<strong>网络IO</strong>交互处理模块<strong>多线程</strong>，而非<strong>执行命令多线程</strong>。Redis6执行命令依然是单线程。</p>
<p>另外，多线程IO默认也是不开启的，需要再配置文件中配置</p>
<p>io-threads-do-reads yes </p>
<p>io-threads 4</p>
</blockquote>
<h3 id="原理架构"><a href="#原理架构" class="headerlink" title="原理架构"></a>原理架构</h3><blockquote>
<p>Redis 6 加入多线程,但跟 Memcached 这种从 IO处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:</p>
</blockquote>
<p><img src="https://fanaidi.gitee.io/blogimgs/Redis/IO%E5%8E%9F%E7%90%86%E6%9E%B6%E6%9E%84.png"></p>
<h2 id="工具支持Cluster"><a href="#工具支持Cluster" class="headerlink" title="工具支持Cluster"></a>工具支持Cluster</h2><blockquote>
<p>之前老版Redis想要搭集群需要单独安装ruby环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。另外官方 redis-benchmark 工具开始支持 cluster 模式了，通过多线程的方式对多个分片进行压测。</p>
</blockquote>
]]></content>
      <categories>
        <category>NOSQL</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2021/08/02/SpringBoot/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="SpringBoot介绍"><a href="#SpringBoot介绍" class="headerlink" title="SpringBoot介绍"></a>SpringBoot介绍</h1><h2 id="为什么用SpringBoot"><a href="#为什么用SpringBoot" class="headerlink" title="为什么用SpringBoot"></a>为什么用SpringBoot</h2><blockquote>
<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>
<p>能快速创建出生产级别的Spring应用</p>
</blockquote>
<h2 id="SpringBoot优点"><a href="#SpringBoot优点" class="headerlink" title="SpringBoot优点"></a>SpringBoot优点</h2><ul>
<li><p>Create stand-alone Spring applications</p>
</li>
<li><ul>
<li>创建独立Spring应用</li>
</ul>
</li>
<li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p>
</li>
<li><ul>
<li>内嵌web服务器</li>
</ul>
</li>
<li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p>
</li>
<li><ul>
<li>自动starter依赖，简化构建配置</li>
</ul>
</li>
<li><p>Automatically configure Spring and 3rd party libraries whenever possible</p>
</li>
<li><ul>
<li>自动配置Spring以及第三方功能</li>
</ul>
</li>
<li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p>
</li>
<li><ul>
<li>提供生产级别的监控、健康检查及外部化配置</li>
</ul>
</li>
<li><p>Absolutely no code generation and no requirement for XML configuration</p>
</li>
<li><ul>
<li>无代码生成、无需编写XML</li>
</ul>
</li>
</ul>
<blockquote>
<p>pringBoot是整合Spring技术栈的一站式框架</p>
<p>SpringBoot是简化Spring技术栈的快速开发脚手架</p>
</blockquote>
<h2 id="SpringBoot缺点"><a href="#SpringBoot缺点" class="headerlink" title="SpringBoot缺点"></a>SpringBoot缺点</h2><blockquote>
<ul>
<li>人称版本帝，迭代快，需要时刻关注变化</li>
<li>封装太深，内部原理复杂，不容易精通</li>
</ul>
</blockquote>
<h1 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h1><h2 id="1-SpringBoot特点"><a href="#1-SpringBoot特点" class="headerlink" title="1.SpringBoot特点"></a>1.SpringBoot特点</h2><h3 id="1-1依赖管理"><a href="#1-1依赖管理" class="headerlink" title="1.1依赖管理"></a>1.1依赖管理</h3><ul>
<li>父项目做依赖管理</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">依赖管理    </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目</span><br><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制</span><br></pre></td></tr></table></figure>

<ul>
<li>开发导入starter场景启动器</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、见到很多 spring-boot-starter-* ： *就某种场景</span><br><span class="line">2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</span><br><span class="line">3、SpringBoot所有支持的场景</span><br><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</span><br><span class="line">4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</span><br><span class="line">5、所有场景启动器最底层的依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>需关注版本号，自动版本仲裁</li>
</ul>
<blockquote>
<p>1、引入依赖默认都可以不写版本 </p>
<p>2、引入非版本仲裁的jar，要写版本号。</p>
</blockquote>
<ul>
<li>可以修改默认版本号</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</span><br><span class="line">2、在当前项目里面重写配置</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2自动装配"><a href="#1-2自动装配" class="headerlink" title="1.2自动装配"></a>1.2自动装配</h3><blockquote>
<p>1.自动配好Tomcat</p>
<p>2.自动配好SpringMVC</p>
<p>​    引入SpringMVC全套组件</p>
<p>​    自动配好SpringMVC常用组件</p>
<p>3.自动配好Web常见功能,如:字符编码问题</p>
<p>​    SpringBoot帮我们配好了所有web开发的常见场景</p>
<p>4.默认的包结构</p>
<p>​    主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</p>
<p>​    无需以前的包扫描配置</p>
<p>​    想要改变包扫描路径,@SpringBootApplication(scanBasePackages=”com.xxx”)</p>
<p>​    或者@ComponentScan指定扫描路径</p>
<p>5.各种配置拥有默认值</p>
<ul>
<li><p>默认配置最终都是映射到某个类上，如：MultipartProperties</p>
</li>
<li><p>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</p>
</li>
</ul>
<p>6.按需加载所有自动配置项</p>
<ul>
<li><p>非常多的starter</p>
</li>
<li><p>引入了哪些场景这个场景的自动配置才会开启</p>
</li>
<li><p>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</p>
</li>
</ul>
</blockquote>
<h2 id="2-容器功能"><a href="#2-容器功能" class="headerlink" title="2.容器功能"></a>2.容器功能</h2><h3 id="2-1组件添加"><a href="#2-1组件添加" class="headerlink" title="2.1组件添加"></a>2.1组件添加</h3><h4 id="1-Configuration"><a href="#1-Configuration" class="headerlink" title="1.@Configuration"></a>1.@Configuration</h4><blockquote>
<p>Full模式与Lite模式<br>    配置类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断<br>   配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、配置类里面使用<span class="doctag">@Bean</span>标注在方法上给容器注册组件，默认也是单实例的</span></span><br><span class="line"><span class="comment"> * 2、配置类本身也是组件</span></span><br><span class="line"><span class="comment"> * 3、proxyBeanMethods：代理bean的方法</span></span><br><span class="line"><span class="comment"> *      Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是单实例的】</span></span><br><span class="line"><span class="comment"> *      Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span>方法被调用多少次返回的组件都是新创建的】</span></span><br><span class="line"><span class="comment"> *      组件依赖必须使用Full模式默认。其他默认是否Lite模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        <span class="keyword">return</span> zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-Import"><a href="#2-Import" class="headerlink" title="2.@Import"></a>2.@Import</h4><blockquote>
<p>@Import({User.class, DBHelper.class})</p>
<p>给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</p>
</blockquote>
<h4 id="3-Conditional"><a href="#3-Conditional" class="headerlink" title="3.@Conditional"></a>3.@Conditional</h4><blockquote>
<p>条件装配：满足Conditional指定的条件，则进行组件注入</p>
<p>例:@ConditionalOnMissingBean(name = “tom”)</p>
</blockquote>
<h3 id="2-2原生文件引入"><a href="#2-2原生文件引入" class="headerlink" title="2.2原生文件引入"></a>2.2原生文件引入</h3><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><blockquote>
<p>@ImportResource(“classpath:beans.xml”)</p>
<p>public class MyConfig {} </p>
</blockquote>
<h3 id="2-3配置绑定"><a href="#2-3配置绑定" class="headerlink" title="2.3配置绑定"></a>2.3配置绑定</h3><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；</p>
<h4 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Integer price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-自动配置原理"><a href="#3-自动配置原理" class="headerlink" title="3.自动配置原理"></a>3.自动配置原理</h2><p>总结</p>
<ul>
<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>
</li>
<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>
</li>
<li><p>生效的配置类就会给容器中装配很多组件</p>
</li>
<li><p>只要容器中有这些组件，相当于这些功能就有了</p>
</li>
<li><p>定制化配置</p>
</li>
<li><ul>
<li>用户直接自己@Bean替换底层的组件</li>
<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>
</ul>
</li>
<li><p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>
</li>
</ul>
<h2 id="4-开发技巧"><a href="#4-开发技巧" class="headerlink" title="4.开发技巧"></a>4.开发技巧</h2><h3 id="4-1Lombok"><a href="#4-1Lombok" class="headerlink" title="4.1Lombok"></a>4.1Lombok</h3><p>简化JavaBean开发</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2dev-tools"><a href="#4-2dev-tools" class="headerlink" title="4.2dev-tools"></a>4.2dev-tools</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目或者页面修改以后：Ctrl+F9</p>
<h3 id="4-3Spring-Initailizr（项目初始化向导）"><a href="#4-3Spring-Initailizr（项目初始化向导）" class="headerlink" title="4.3Spring Initailizr（项目初始化向导）"></a>4.3Spring Initailizr（项目初始化向导）</h3><blockquote>
<p>可以做什么?</p>
<p>1.选择我们需要的开发场景</p>
<p>2.自动依赖引入</p>
<p>3.自动依赖引入</p>
<p>4.自动编写好主配置类</p>
</blockquote>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="1-文件类型"><a href="#1-文件类型" class="headerlink" title="1.文件类型"></a>1.文件类型</h2><h3 id="1-1-properties"><a href="#1-1-properties" class="headerlink" title="1.1 properties"></a>1.1 properties</h3><blockquote>
<p>同以前的properties用法</p>
</blockquote>
<h3 id="1-2-yaml"><a href="#1-2-yaml" class="headerlink" title="1.2 yaml"></a>1.2 yaml</h3><h4 id="1-2-1、简介"><a href="#1-2-1、简介" class="headerlink" title="1.2.1、简介"></a>1.2.1、简介</h4><blockquote>
<p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>
<p>非常适合用来做以数据为中心的配置文件</p>
</blockquote>
<h4 id="1-2-2、基本语法"><a href="#1-2-2、基本语法" class="headerlink" title="1.2.2、基本语法"></a>1.2.2、基本语法</h4><ul>
<li><p>key: value；kv之间有空格</p>
</li>
<li><p>大小写敏感</p>
</li>
<li><p>使用缩进表示层级关系</p>
</li>
<li><p>缩进不允许使用tab，只允许空格</p>
</li>
<li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p>
</li>
<li><p>‘#’表示注释</p>
</li>
<li><p>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义/不转义</p>
</li>
</ul>
<h4 id="1-2-3、数据类型"><a href="#1-2-3、数据类型" class="headerlink" title="1.2.3、数据类型"></a>1.2.3、数据类型</h4><ul>
<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">k:</span> <span class="string">v</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象：键值对的集合。map、hash、set、object </li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> &#123;<span class="string">k1:v1</span>,<span class="string">k2:v2</span>,<span class="string">k3:v3</span>&#125;</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">  <span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line">  <span class="attr">k3:</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组：一组按次序排列的值。array、list、queue</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行内写法：</span>  <span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">v3</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-4示例"><a href="#1-2-4示例" class="headerlink" title="1.2.4示例"></a>1.2.4示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  <span class="keyword">private</span> Boolean boss;</span><br><span class="line">  <span class="keyword">private</span> Date birth;</span><br><span class="line">  <span class="keyword">private</span> Integer age;</span><br><span class="line">  <span class="keyword">private</span> Pet pet;</span><br><span class="line">  <span class="keyword">private</span> String[] interests;</span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; animal;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Object&gt; score;</span><br><span class="line">  <span class="keyword">private</span> Set&lt;Double&gt; salarys;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yaml表示以上对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">userName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2019</span><span class="string">/12/12</span> <span class="number">20</span><span class="string">:12:33</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">pet:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">weight:</span> <span class="number">23.4</span></span><br><span class="line">  <span class="attr">interests:</span> [<span class="string">篮球</span>,<span class="string">游泳</span>]</span><br><span class="line">  <span class="attr">animal:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">jerry</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mario</span></span><br><span class="line">  <span class="attr">score:</span></span><br><span class="line">    <span class="attr">english:</span> </span><br><span class="line">      <span class="attr">first:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">second:</span> <span class="number">40</span></span><br><span class="line">      <span class="attr">third:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">math:</span> [<span class="number">131</span>,<span class="number">140</span>,<span class="number">148</span>]</span><br><span class="line">    <span class="attr">chinese:</span> &#123;<span class="attr">first:</span> <span class="number">128</span>,<span class="attr">second:</span> <span class="number">136</span>&#125;</span><br><span class="line">  <span class="attr">salarys:</span> [<span class="number">3999</span>,<span class="number">4999.98</span>,<span class="number">5999.99</span>]</span><br><span class="line">  <span class="attr">allPets:</span></span><br><span class="line">    <span class="attr">sick:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tom</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">jerry</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;</span><br><span class="line">    <span class="attr">health:</span> [&#123;<span class="attr">name:</span> <span class="string">mario</span>,<span class="attr">weight:</span> <span class="number">47</span>&#125;]</span><br></pre></td></tr></table></figure>

<h2 id="2-配置提示"><a href="#2-配置提示" class="headerlink" title="2.配置提示"></a>2.配置提示</h2><blockquote>
<p>自定义的类和配置文件绑定一般没有提示。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h1><h2 id="1-SpringMVC自动配置概览"><a href="#1-SpringMVC自动配置概览" class="headerlink" title="1.SpringMVC自动配置概览"></a>1.SpringMVC自动配置概览</h2><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
<ul>
<li>内容协商视图解析器和BeanName视图解析器</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p>
<ul>
<li>静态资源（包括webjars）</li>
</ul>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
<ul>
<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>
</ul>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p>
<ul>
<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p>
<ul>
<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>
</ul>
</li>
<li><p>Static <code>index.html</code> support.</p>
<ul>
<li>静态index.html 页支持</li>
</ul>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p>
<ul>
<li>自定义 <code>Favicon</code>  </li>
</ul>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p>
<ul>
<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>
</ul>
</li>
</ul>
<blockquote>
<p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>
<p><strong>不用@EnableWebMvc注解。使用</strong> <strong>@Configuration</strong> <strong>+</strong> <strong>WebMvcConfigurer</strong> <strong>自定义规则</strong></p>
</blockquote>
<blockquote>
<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>
<p><strong>声明</strong> <strong>WebMvcRegistrations</strong> <strong>改变默认底层组件</strong></p>
</blockquote>
<blockquote>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>
<p><strong>使用</strong> <strong>@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</strong></p>
</blockquote>
<h2 id="2-简单功能分析"><a href="#2-简单功能分析" class="headerlink" title="2.简单功能分析"></a>2.简单功能分析</h2><h3 id="2-1静态资源访问"><a href="#2-1静态资源访问" class="headerlink" title="2.1静态资源访问"></a>2.1静态资源访问</h3><h4 id="1-静态资源访问"><a href="#1-静态资源访问" class="headerlink" title="1.静态资源访问"></a>1.静态资源访问</h4><blockquote>
<p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>
<p>访问 ： 当前项目根路径/ + 静态资源名 </p>
<p>原理： 静态映射/**。</p>
<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>
</blockquote>
<p>改变默认的静态资源路径</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>

<h4 id="2-静态资源访问前缀"><a href="#2-静态资源访问前缀" class="headerlink" title="2.静态资源访问前缀"></a>2.静态资源访问前缀</h4><p>默认无前缀</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/res/**</span></span><br></pre></td></tr></table></figure>

<p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p>
<h4 id="3、webjar"><a href="#3、webjar" class="headerlink" title="3、webjar"></a>3、webjar</h4><p>自动映射 /<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">webjars</a>/**</p>
<p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.webjars&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;jquery&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;3.5.1&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p>
<h3 id="2-2欢迎页支持"><a href="#2-2欢迎页支持" class="headerlink" title="2.2欢迎页支持"></a>2.2欢迎页支持</h3><ul>
<li><p>静态资源路径下  index.html</p>
</li>
<li><ul>
<li>可以配置静态资源路径</li>
<li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>controller能处理/index</li>
</ul>
<h3 id="2-3自定义-Favicon"><a href="#2-3自定义-Favicon" class="headerlink" title="2.3自定义 Favicon"></a>2.3自定义 <code>Favicon</code></h3><blockquote>
<p>favicon.ico 放在静态资源目录下即可。</p>
</blockquote>
<h3 id="2-4静态资源配置原理"><a href="#2-4静态资源配置原理" class="headerlink" title="2.4静态资源配置原理"></a>2.4静态资源配置原理</h3><ul>
<li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li>
<li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li>
</ul>
<h2 id="3-请求参数处理"><a href="#3-请求参数处理" class="headerlink" title="3.请求参数处理"></a>3.请求参数处理</h2><h3 id="请求映射"><a href="#请求映射" class="headerlink" title="请求映射"></a>请求映射</h3><h4 id="1-rest使用与原理"><a href="#1-rest使用与原理" class="headerlink" title="1.rest使用与原理"></a>1.rest使用与原理</h4><ul>
<li><p>@xxxMapping</p>
<ul>
<li>@GetMapping</li>
<li>PostMapping</li>
<li>PutMapping</li>
<li>DeleteMapping</li>
</ul>
</li>
<li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p>
<ul>
<li>以前：<ul>
<li><em>/getUser</em>  获取用户</li>
<li>/deleteUser 删除用户</li>
<li>/editUser  修改用户</li>
<li>/saveUser  保存用户</li>
</ul>
</li>
<li><em>现在： /user</em>    <ul>
<li>GET-获取用户</li>
<li>DELETE-删除用户     </li>
<li>PUT-修改用户     </li>
<li>POST-保存用户</li>
</ul>
</li>
<li>核心Filter；HiddenHttpMethodFilter</li>
<li></li>
<li>SpringBoot中手动开启</li>
</ul>
</li>
<li><p>用法</p>
<ul>
<li>开启页面表单的Rest功能</li>
<li>页面form的属性method=post,隐藏域_method=put、delete等（如果直接get或post,无需隐藏域）</li>
<li>编写请求映射</li>
</ul>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-GET提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-POST提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-DELETE 提交&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/user&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;REST-PUT提交&quot;</span><span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PutMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rest原理（表单提交要使用REST的时候）"><a href="#rest原理（表单提交要使用REST的时候）" class="headerlink" title="rest原理（表单提交要使用REST的时候）"></a>rest原理（表单提交要使用REST的时候）</h4><ul>
<li><p>表单提交会带上**_method=PUT**</p>
</li>
<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>
<ul>
<li><p>请求是否正常，并且是POST</p>
<ul>
<li>获取到**_method**的值。</li>
<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>
<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>
<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用</strong>requesWrapper的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Rest使用客户端工具</strong></p>
<ul>
<li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li>
</ul>
<h2 id="4-视图解析-Thymeleaf初体验"><a href="#4-视图解析-Thymeleaf初体验" class="headerlink" title="4.视图解析-Thymeleaf初体验"></a>4.视图解析-Thymeleaf初体验</h2><h3 id="thymeleaf使用"><a href="#thymeleaf使用" class="headerlink" title="thymeleaf使用"></a>thymeleaf使用</h3><p><strong>引入stater</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<blockquote>
<p>所有thymeleaf的配置值都在 ThymeleafProperties</p>
<p>配置好了 <strong>SpringTemplateEngine</strong></p>
<p>配好了 <strong>ThymeleafViewResolver</strong></p>
<p>我们只需要直接开发页面</p>
</blockquote>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><table>
<thead>
<tr>
<th>表达式名字</th>
<th>语法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>变量取值</td>
<td>${…}</td>
<td>获取请求域、session域、对象等值</td>
</tr>
<tr>
<td>选择变量</td>
<td>*{…}</td>
<td>获取上下文对象值</td>
</tr>
<tr>
<td>消息</td>
<td>#{…}</td>
<td>获取国际化等值</td>
</tr>
<tr>
<td>链接</td>
<td>@{…}</td>
<td>生成链接</td>
</tr>
<tr>
<td>片段表达式</td>
<td>~{…}</td>
<td>jsp:include 作用，引入公共页面片段</td>
</tr>
</tbody></table>
<h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ul>
<li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li>
<li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li>
<li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li>
<li>空值: <strong>null</strong></li>
<li>变量： one，two，… 变量不能有空格</li>
</ul>
<h4 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h4><ul>
<li>字符串拼接: +</li>
<li>变量替换: |The name is ${name}|</li>
</ul>
<h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><ul>
<li>运算符: + , - , * , / , %</li>
</ul>
<h4 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h4><ul>
<li>运算符: <strong>and</strong> <strong>,</strong> <strong>or</strong></li>
<li>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong></li>
</ul>
<h4 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h4><ul>
<li>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;=</strong> <strong>,</strong> <strong>&lt;=</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong></li>
<li>等式: <strong>==</strong> <strong>,</strong> <strong>!=</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong></li>
</ul>
<h4 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h4><ul>
<li>If-then: <strong>(if) ? (then)</strong></li>
<li>If-then-else: <strong>(if) ? (then) : (else)</strong></li>
<li>Default: (value) <strong>?: (defaultvalue)</strong></li>
</ul>
<h4 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h4><ul>
<li>无操作： _</li>
</ul>
<h3 id="设置属性值-th-attr"><a href="#设置属性值-th-attr" class="headerlink" title="设置属性值-th:attr"></a>设置属性值-th:attr</h3><ul>
<li>设置单个值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;subscribe.html&quot;</span> <span class="attr">th:attr</span>=<span class="string">&quot;action=@&#123;/subscribe&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Subscribe!&quot;</span> <span class="attr">th:attr</span>=<span class="string">&quot;value=#&#123;subscribe.submit&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置多个值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../images/gtvglogo.png&quot;</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">th:attr</span>=<span class="string">&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;prod : $&#123;prods&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.price&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="条件运算-1"><a href="#条件运算-1" class="headerlink" title="条件运算"></a>条件运算</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;comments.html&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="属性优先级"><a href="#属性优先级" class="headerlink" title="属性优先级"></a>属性优先级</h4><table>
<thead>
<tr>
<th align="left">Order</th>
<th align="left">Feature</th>
<th align="left">Attributes</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">Fragment inclusion</td>
<td align="left"><code>th:insert</code> <code>th:replace</code></td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">Fragment iteration</td>
<td align="left"><code>th:each</code></td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">Conditional evaluation</td>
<td align="left"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">Local variable definition</td>
<td align="left"><code>th:object</code> <code>th:with</code></td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">General attribute modification</td>
<td align="left"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">Specific attribute modification</td>
<td align="left"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">Text (tag body modification)</td>
<td align="left"><code>th:text</code> <code>th:utext</code></td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">Fragment specification</td>
<td align="left"><code>th:fragment</code></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">Fragment removal</td>
<td align="left"><code>th:remove</code></td>
</tr>
</tbody></table>
<h2 id="5-拦截器"><a href="#5-拦截器" class="headerlink" title="5.拦截器"></a>5.拦截器</h2><blockquote>
<p>编写的拦截器需要实现<code>HandlerInterceptor</code>接口</p>
<p>拦截器注册到容器中（实现<code>WebMvcConfigurer</code>的<code>addInterceptors()</code>）</p>
<p>指定拦截规则（注意，如果是拦截所有，静态资源也会被拦截)</p>
</blockquote>
<p>拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行之前</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle拦截的请求路径是&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        Object loginUser = session.getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(loginUser != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截住。未登录。跳转到登录页</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先登录&quot;</span>);</span><br><span class="line"><span class="comment">//        re.sendRedirect(&quot;/&quot;);</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行完成以后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染以后</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拦截器注册到容器中 &amp;&amp; 指定拦截规则：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor())<span class="comment">//拦截器注册到容器中</span></span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  <span class="comment">//所有请求都被拦截包括静态资源</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/fonts/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/aa/**&quot;</span>); <span class="comment">//放行的请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-文件上传-单文件与多文件上传的使用"><a href="#6-文件上传-单文件与多文件上传的使用" class="headerlink" title="6.文件上传-单文件与多文件上传的使用"></a>6.文件上传-单文件与多文件上传的使用</h2><p>视图层</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upload&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputEmail1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter email&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputPassword1&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headerImg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;exampleInputFile&quot;</span>&gt;</span>生活照<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> Check me out</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>控制层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/form_layouts&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">form_layouts</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;form/form_layouts&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImg,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;，username=&#123;&#125;，headerImg=&#123;&#125;，photos=&#123;&#125;&quot;</span>,</span><br><span class="line">                 email,username,headerImg.getSize(),photos.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!headerImg.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//保存到文件服务器，OSS服务器</span></span><br><span class="line">            String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">            headerImg.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;H:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(photos.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!photo.isEmpty())&#123;</span><br><span class="line">                    String originalFilename = photo.getOriginalFilename();</span><br><span class="line">                    photo.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;H:\\cache\\&quot;</span>+originalFilename));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件大小相关配置项：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="meta">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB</span></span><br></pre></td></tr></table></figure>

<h2 id="7-错误处理"><a href="#7-错误处理" class="headerlink" title="7.错误处理"></a>7.错误处理</h2><h3 id="默认规则："><a href="#默认规则：" class="headerlink" title="默认规则："></a>默认规则：</h3><ul>
<li><p>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</p>
</li>
<li><p>机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</p>
</li>
<li><p>要对其进行自定义，添加View解析为error</p>
</li>
<li><p>要完全替换默认行为，可以实现 ErrorController并注册该类型的Bean定义，或添加ErrorAttributes类型的组件以使用现有机制但替换其内容。</p>
</li>
<li><p>/templates/error/下的4xx，5xx页面会被自动解析</p>
</li>
</ul>
<h2 id="8-数据访问"><a href="#8-数据访问" class="headerlink" title="8.数据访问"></a>8.数据访问</h2><p>导入jdbc依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入数据库依赖(根据需求选择)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long aLong = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from student&quot;</span>, Long.class);</span><br><span class="line">        log.info(<span class="string">&quot;总记录数:&#123;&#125;&quot;</span>,aLong);</span><br><span class="line">        log.info(<span class="string">&quot;数据源类型:&#123;&#125;&quot;</span>,dataSource.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义方式整合druid数据源"><a href="#自定义方式整合druid数据源" class="headerlink" title="自定义方式整合druid数据源"></a>自定义方式整合druid数据源</h3><h4 id="druid简介"><a href="#druid简介" class="headerlink" title="druid简介"></a>druid简介</h4><blockquote>
<p>它是数据库连接池，它能够提供强大的监控和扩展功能。</p>
</blockquote>
<h4 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h4><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置Druid数据源：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认的自动配置是判断容器中没有才会配@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    <span class="comment">//加入监控功能</span></span><br><span class="line">    <span class="comment">//druidDataSource.setFilters(&quot;stat,wall&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> druidDataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置Druid的监控页功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置druid的监控页功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StatViewServlet statViewServlet = <span class="keyword">new</span> StatViewServlet();</span><br><span class="line">    ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(statViewServlet,<span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">    registrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    registrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebStatFilter 用于采集web-jdbc关联监控的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    WebStatFilter webStatFilter = <span class="keyword">new</span> WebStatFilter();</span><br><span class="line">    FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;(webStatFilter);</span><br><span class="line">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">    filterRegistrationBean.addInitParameter(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="druid数据源starter整合方式"><a href="#druid数据源starter整合方式" class="headerlink" title="druid数据源starter整合方式"></a>druid数据源starter整合方式</h4><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>分析自动配置：</p>
<ul>
<li>扩展配置项 spring.datasource.druid</li>
<li>自动配置类DruidDataSourceAutoConfigure</li>
<li>DruidSpringAopConfiguration.class, 监控SpringBean的；配置项：spring.datasource.druid.aop-patterns</li>
<li>DruidStatViewServletConfiguration.class, 监控页的配置。spring.datasource.druid.stat-view-servlet默认开启。</li>
<li>DruidWebStatFilterConfiguration.class，web监控配置。spring.datasource.druid.web-stat-filter默认开启。</li>
<li>DruidFilterConfiguration.class所有Druid的filter的配置：</li>
</ul>
<p>配置示例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">com.jjf.boot.*</span>  <span class="comment">#监控springBean</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span>      <span class="comment"># 底层开启功能,stat(sql监控),wall(防火墙)</span></span><br><span class="line">      <span class="attr">filter:</span> <span class="comment">#对上面filters的详细配置</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span> <span class="comment">#配置监控页功能</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">password</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span> <span class="comment">#监控web</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h3><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置模式:</p>
<ul>
<li><p>全局配置文件</p>
</li>
<li><p>SqlSessionFactory：自动配置好了</p>
</li>
<li><p>SqlSession：自动配置了SqlSessionTemplate 组合了SqlSession</p>
</li>
<li><p>@Import(AutoConfiguredMapperScannerRegistrar.class)</p>
</li>
<li><p>Mapper： 只要我们写的操作MyBatis的接口标准了@Mapper就会被自动扫描进来</p>
</li>
</ul>
<p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置MyBatis的规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span>   <span class="comment">#全局配置文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>        <span class="comment">#sql映射文件位置</span></span><br></pre></td></tr></table></figure>

<p>mybatis-config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!-- 由于Spring Boot自动配置缘故，此处不必配置，只用来做做样。--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Mapper接口：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jjf.boot.mapper.StudentMapper&quot;</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.jjf.boot.bean.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注解版</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into student(name,email,age) values(#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/student&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">saveStudent</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line">        studentService.saveStudent(student);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sql&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryFromDb</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Long aLong = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from student&quot;</span>, Long.class);</span><br><span class="line">        <span class="keyword">return</span> aLong.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/student/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentService.getStudentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getStudentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentMapper.saveStudent(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置MyBatis的规则</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="comment">#  config-location: classpath:mybatis/mybatis-config.xml   #全局配置文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span>        <span class="comment">#sql映射文件位置</span></span><br><span class="line">  <span class="comment">#指定MyBatis全局配置文件中的相关配置项</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span>                    <span class="comment">#开启驼峰命名规则</span></span><br></pre></td></tr></table></figure>

<p>database</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1009</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into student(name,email,age) values(#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveStudent</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>

<p>注意</p>
<blockquote>
<p>简单DAO方法就写在注解上。复杂的就写在配置文件里。</p>
<p>使用<code>@MapperScan(&quot;com.lun.boot.mapper&quot;)</code> 简化，Mapper接口就可以不用标注<code>@Mapper</code>注解。</p>
</blockquote>
<h2 id="9-整合MyBatisPlus操作数据库"><a href="#9-整合MyBatisPlus操作数据库" class="headerlink" title="9.整合MyBatisPlus操作数据库"></a>9.整合MyBatisPlus操作数据库</h2><h3 id="MyBatisPlus简介"><a href="#MyBatisPlus简介" class="headerlink" title="MyBatisPlus简介"></a>MyBatisPlus简介</h3><blockquote>
<p>MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
</blockquote>
<p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>MybatisPlusAutoConfiguration配置类，MybatisPlusProperties配置项绑定。</p>
</li>
<li><p>SqlSessionFactory自动配置好，底层是容器中默认的数据源。</p>
</li>
<li><p>mapperLocations自动配置好的，有默认值classpath*:/mapper/**/*.xml，这表示任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。 建议以后sql映射文件放在 mapper下。</p>
</li>
<li><p>容器中也自动配置好了SqlSessionTemplate。</p>
</li>
<li><p>@Mapper 标注的接口也会被自动扫描，建议直接 @MapperScan(“com.lun.boot.mapper”)批量扫描。</p>
</li>
<li><p>MyBatisPlus优点之一：只需要我们的Mapper继承MyBatisPlus的BaseMapper 就可以拥有CRUD能力，减轻开发工作。</p>
</li>
</ul>
<p>视图</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;display table table-bordered table-striped&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dynamic-table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">&quot;gradeX&quot;</span> <span class="attr">th:each</span>=<span class="string">&quot;user,status:$&#123;page.records&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status.count&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;center hidden-phone&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/delete/&#123;id&#125;(id=$&#123;user.id&#125;,pageNum=$&#123;page.current&#125;)&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;)</span> Integer pageNum,</span></span></span><br><span class="line"><span class="params"><span class="function">            Model model</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.list();</span><br><span class="line">        <span class="comment">//分页查询数据</span></span><br><span class="line">        Page&lt;User&gt; userPage = <span class="keyword">new</span> Page&lt;&gt;(pageNum,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//分页查询的结果</span></span><br><span class="line">        Page&lt;User&gt; page = userService.page(userPage, <span class="keyword">null</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;page&quot;</span>,page);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dynamic_table&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@PathVariable(&quot;id&quot;)</span>Long id,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@RequestParam(value = &quot;pageNum&quot;,defaultValue = &quot;1&quot;)</span> Integer pageNum,</span></span></span><br><span class="line"><span class="params"><span class="function">            RedirectAttributes ra</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>&#123;</span><br><span class="line">        userService.removeById(id);</span><br><span class="line">        ra.addAttribute(<span class="string">&quot;pageNum&quot;</span>,pageNum);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h2><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.244</span><span class="number">.131</span>     <span class="comment">#Redis服务器地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span>                <span class="comment">#Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span>               <span class="comment">#Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">connect-timeout:</span> <span class="number">1800000</span>  <span class="comment">#连接超时时间（毫秒）</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">20</span>        <span class="comment">#连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">5</span>           <span class="comment">#连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span>          <span class="comment">#最大阻塞等待时间(负数表示没限制)</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span>           <span class="comment">#连接池中的最小空闲连接</span></span><br></pre></td></tr></table></figure>

<p>config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/redis&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置值到redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        <span class="comment">//从redis获取值</span></span><br><span class="line">        String name = (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><blockquote>
<p>注意:</p>
<p>SpringBoot 2.4 以上版本移除了默认对Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</p>
<p>JUnit 5’s Vintage Engine Removed from spring-boot-starter-test,如果需要继续兼容junit4需要自行引入vintage</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常用测试注解"><a href="#常用测试注解" class="headerlink" title="常用测试注解"></a>常用测试注解</h2><ul>
<li>@Test：表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li>
<li>@ParameterizedTest：表示方法是参数化测试。</li>
<li>@RepeatedTest：表示方法可重复执行。</li>
<li>@DisplayName：为测试类或者测试方法设置展示名称。</li>
<li>@BeforeEach：表示在每个单元测试之前执行。</li>
<li>@AfterEach：表示在每个单元测试之后执行。</li>
<li>@BeforeAll：表示在所有单元测试之前执行。</li>
<li>@AfterAll：表示在所有单元测试之后执行。</li>
<li>@Tag：表示单元测试类别，类似于JUnit4中的@Categories。</li>
<li>@Disabled：表示测试类或测试方法不执行，类似于JUnit4中的@Ignore。</li>
<li>@Timeout：表示测试方法运行如果超过了指定时间将会返回错误。</li>
<li>@ExtendWith：为测试类或测试方法提供扩展类引用。</li>
</ul>
<h2 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a>断言机制</h2><blockquote>
<p>断言Assertion是测试方法中的核心部分，用来对测试需要满足的条件进行验证。这些断言方法都是org.junit.jupiter.api.Assertions的静态方法。检查业务逻辑返回的数据是否合理。所有的测试运行结束以后，会有一个详细的测试报告。</p>
</blockquote>
<h3 id="简单断言"><a href="#简单断言" class="headerlink" title="简单断言"></a>简单断言</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>assertEquals</td>
<td>判断两个对象或两个原始类型是否相等</td>
</tr>
<tr>
<td>assertNotEquals</td>
<td>判断两个对象或两个原始类型是否不相等</td>
</tr>
<tr>
<td>assertSame</td>
<td>判断两个对象引用是否指向同一个对象</td>
</tr>
<tr>
<td>assertNotSame</td>
<td>判断两个对象引用是否指向不同的对象</td>
</tr>
<tr>
<td>assertTrue</td>
<td>判断给定的布尔值是否为 true</td>
</tr>
<tr>
<td>assertFalse</td>
<td>判断给定的布尔值是否为 false</td>
</tr>
<tr>
<td>assertNull</td>
<td>判断给定的对象引用是否为 null</td>
</tr>
<tr>
<td>assertNotNull</td>
<td>判断给定的对象引用是否不为 null</td>
</tr>
</tbody></table>
<h3 id="数组断言"><a href="#数组断言" class="headerlink" title="数组断言"></a>数组断言</h3><blockquote>
<p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;array assertion&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">array</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合断言"><a href="#组合断言" class="headerlink" title="组合断言"></a>组合断言</h3><blockquote>
<p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;assert all&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">all</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> assertAll(<span class="string">&quot;Math&quot;</span>,</span><br><span class="line">    () -&gt; assertEquals(<span class="number">2</span>, <span class="number">1</span> + <span class="number">1</span>),</span><br><span class="line">    () -&gt; assertTrue(<span class="number">1</span> &gt; <span class="number">0</span>)</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h3><blockquote>
<p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule<strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式</strong>Assertions.assertThrows()** ,配合函数式编程就可以进行使用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;异常测试&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArithmeticException exception = Assertions.assertThrows(</span><br><span class="line">           <span class="comment">//扔出断言异常</span></span><br><span class="line">            ArithmeticException.class, () -&gt; System.out.println(<span class="number">1</span> % <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="超时断言"><a href="#超时断言" class="headerlink" title="超时断言"></a>超时断言</h3><blockquote>
<p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;超时测试&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeoutTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果测试方法时间超过1s将会异常</span></span><br><span class="line">    Assertions.assertTimeout(Duration.ofMillis(<span class="number">1000</span>), () -&gt; Thread.sleep(<span class="number">500</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h3><blockquote>
<p>通过 fail 方法直接使得测试失败</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;fail&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> fail(<span class="string">&quot;This should fail&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前置条件（assumptions）"><a href="#前置条件（assumptions）" class="headerlink" title="前置条件（assumptions）"></a>前置条件（assumptions）</h2><blockquote>
<p>JUnit 5 中的前置条件（<strong>assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;前置条件&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssumptionsTest</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String environment = <span class="string">&quot;DEV&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="meta">@DisplayName(&quot;simple&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleAssume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assumeTrue(Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;DEV&quot;</span>));</span><br><span class="line">    assumeFalse(() -&gt; Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;PROD&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="meta">@DisplayName(&quot;assume then do&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assumeThenDo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assumingThat(</span><br><span class="line">       Objects.equals(<span class="keyword">this</span>.environment, <span class="string">&quot;DEV&quot;</span>),</span><br><span class="line">       () -&gt; System.out.println(<span class="string">&quot;In DEV&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p>
</blockquote>
<h2 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h2><blockquote>
<p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;A stack&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingAStackDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isInstantiatedWithNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WhenNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">createNewStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">throwsExceptionWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AfterPushing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            String anElement = <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">pushAnElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">isNotEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">returnElementWhenPeeked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><blockquote>
<p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p>
<p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p>
</blockquote>
<ul>
<li><p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</p>
</li>
<li><p><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</p>
</li>
<li><p><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</p>
</li>
<li><p><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</p>
</li>
<li><p><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p>
</li>
</ul>
<blockquote>
<p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;参数化测试1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parameterizedTest1</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">    System.out.println(string);</span><br><span class="line">    Assertions.assertTrue(StringUtils.isNotBlank(string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;method&quot;)</span>    <span class="comment">//指定方法名</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;方法来源参数&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithExplicitLocalMethodSource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    Assertions.assertNotNull(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h2><p>在进行迁移的时候需要注意如下的变化：</p>
<ul>
<li><p>注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。</p>
</li>
<li><p>把@Before 和@After 替换成@BeforeEach 和@AfterEach。</p>
</li>
<li><p>把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。</p>
</li>
<li><p>把@Ignore 替换成@Disabled。</p>
</li>
<li><p>把@Category 替换成@Tag。</p>
</li>
<li><p>把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。</p>
</li>
</ul>
<h1 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h1><blockquote>
<p>未来每一个微服务在云上部署以后，我们都需要对其进行监控、追踪、审计、控制等。SpringBoot就抽取了Actuator场景，使得我们每个微服务快速引用即可获得生产级别的应用监控、审计等功能。</p>
</blockquote>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol>
<li>添加依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>访问<code>http://localhost:8080/actuator/**</code>。</p>
</li>
<li><p>暴露所有监控信息为HTTP。</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment">#暴露所有端点信息</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span>  <span class="comment">#以web方式暴露</span></span><br></pre></td></tr></table></figure>

<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><blockquote>
<p><a href="https://github.com/codecentric/spring-boot-admin">https://github.com/codecentric/spring-boot-admin</a></p>
</blockquote>
<h2 id="常使用的端点及开启与禁用"><a href="#常使用的端点及开启与禁用" class="headerlink" title="常使用的端点及开启与禁用"></a>常使用的端点及开启与禁用</h2><table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>auditevents</code></td>
<td>暴露当前应用程序的审核事件信息。需要一个<code>AuditEventRepository组件</code>。</td>
</tr>
<tr>
<td><code>beans</code></td>
<td>显示应用程序中所有Spring Bean的完整列表。</td>
</tr>
<tr>
<td><code>caches</code></td>
<td>暴露可用的缓存。</td>
</tr>
<tr>
<td><code>conditions</code></td>
<td>显示自动配置的所有条件信息，包括匹配或不匹配的原因。</td>
</tr>
<tr>
<td><code>configprops</code></td>
<td>显示所有<code>@ConfigurationProperties</code>。</td>
</tr>
<tr>
<td><code>env</code></td>
<td>暴露Spring的属性<code>ConfigurableEnvironment</code></td>
</tr>
<tr>
<td><code>flyway</code></td>
<td>显示已应用的所有Flyway数据库迁移。 需要一个或多个<code>Flyway</code>组件。</td>
</tr>
<tr>
<td><code>health</code></td>
<td>显示应用程序运行状况信息。</td>
</tr>
<tr>
<td><code>httptrace</code></td>
<td>显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个<code>HttpTraceRepository</code>组件。</td>
</tr>
<tr>
<td><code>info</code></td>
<td>显示应用程序信息。</td>
</tr>
<tr>
<td><code>integrationgraph</code></td>
<td>显示Spring <code>integrationgraph</code> 。需要依赖<code>spring-integration-core</code>。</td>
</tr>
<tr>
<td><code>loggers</code></td>
<td>显示和修改应用程序中日志的配置。</td>
</tr>
<tr>
<td><code>liquibase</code></td>
<td>显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>组件。</td>
</tr>
<tr>
<td><code>metrics</code></td>
<td>显示当前应用程序的“指标”信息。</td>
</tr>
<tr>
<td><code>mappings</code></td>
<td>显示所有<code>@RequestMapping</code>路径列表。</td>
</tr>
<tr>
<td><code>scheduledtasks</code></td>
<td>显示应用程序中的计划任务。</td>
</tr>
<tr>
<td><code>sessions</code></td>
<td>允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td>
</tr>
<tr>
<td><code>shutdown</code></td>
<td>使应用程序正常关闭。默认禁用。</td>
</tr>
<tr>
<td><code>startup</code></td>
<td>显示由<code>ApplicationStartup</code>收集的启动步骤数据。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td>
</tr>
<tr>
<td><code>threaddump</code></td>
<td>执行线程转储。</td>
</tr>
</tbody></table>
<p>如果您的应用程序是Web应用程序（Spring MVC，Spring WebFlux或Jersey），则可以使用以下附加端点：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>heapdump</code></td>
<td>返回<code>hprof</code>堆转储文件。</td>
</tr>
<tr>
<td><code>jolokia</code></td>
<td>通过HTTP暴露JMX bean（需要引入Jolokia，不适用于WebFlux）。需要引入依赖<code>jolokia-core</code>。</td>
</tr>
<tr>
<td><code>logfile</code></td>
<td>返回日志文件的内容（如果已设置<code>logging.file.name</code>或<code>logging.file.path</code>属性）。支持使用HTTP<code>Range</code>标头来检索部分日志文件的内容。</td>
</tr>
<tr>
<td><code>prometheus</code></td>
<td>以Prometheus服务器可以抓取的格式公开指标。需要依赖<code>micrometer-registry-prometheus</code>。</td>
</tr>
</tbody></table>
<p>最常用的Endpoint</p>
<ul>
<li><p><strong>Health：监控状况</strong></p>
</li>
<li><p><strong>Metrics：运行时指标</strong></p>
</li>
<li><p><strong>Loggers：日志记录</strong></p>
</li>
</ul>
<h2 id="管理Endpoints"><a href="#管理Endpoints" class="headerlink" title="管理Endpoints"></a>管理Endpoints</h2><h3 id="开启与禁用Endpoints"><a href="#开启与禁用Endpoints" class="headerlink" title="开启与禁用Endpoints"></a>开启与禁用Endpoints</h3><ul>
<li>默认所有的Endpoint除过shutdown都是开启的。</li>
<li>需要开启或者禁用某个Endpoint。配置模式为  <strong>management.endpoint.<strong><strong><endpointName></strong></strong>.enabled = true</strong></li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">beans:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>或者禁用所有的Endpoint然后手动开启指定的Endpoint</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">beans:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端框架</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2021/09/08/Vue/</url>
    <content><![CDATA[<p>[toc]</p>
<span id="more"></span>

<h1 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h1><blockquote>
<p>初识Vue：<br>    1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；<br>    2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；<br>    3.root容器里的代码被称为【Vue模板】；<br>    4.Vue实例和容器是一一对应的；<br>    5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；<br>    6.中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；<br>    7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</p>
<p>​    注意区分：js表达式 和 js代码(语句)<br>​    1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：<br>​        (1). a<br>​        (2). a+b<br>​        (3). demo(1)<br>​        (4). x === y ? ‘a’ : ‘b’</p>
<p>​    2.js代码(语句)<br>​        (1). if(){}<br>​        (2). for(){}</p>
</blockquote>
<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><blockquote>
<p>Vue模板语法有2大类：<br>    1.插值语法：<br>        功能：用于解析标签体内容。<br>        写法：，xxx是js表达式，且可以直接读取到data中的所有属性。<br>    2.指令语法：<br>        功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）。<br>        举例：v-bind:href=”xxx” 或  简写为 :href=”xxx”，xxx同样要写js表达式， 且可以直接读取到data中的所有属性。<br>        备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--准备一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;search.url&quot;</span>&gt;</span>去&#123;&#123;search.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--简写--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;a :href=&quot;url&quot;&gt;百度&lt;/a&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.config.productionTip = <span class="literal">false</span>;<span class="comment">//设置为 false 以阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> x = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,  <span class="comment">//el用于指定当前Vue实例为哪个容器服务,值通常为css选择器字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;        <span class="comment">//data中用于存储数据,数据供el所指定的容器去使用</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&quot;jake&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">search</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&quot;https://www.baidu.com&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><blockquote>
<p>Vue中有2种数据绑定的方式：<br>    1.单向绑定(v-bind)：数据只能从data流向页面。<br>    2.双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。<br>        备注：<br>            1.双向绑定一般都应用在表单类元素上（如：input、select等）<br>            2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--准备一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  单向数据绑定:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">  双向数据绑定:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  Vue.config.productionTip = <span class="literal">false</span>;<span class="comment">//设置为 false 以阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> x = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,  <span class="comment">//el用于指定当前Vue实例为哪个容器服务,值通常为css选择器字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;        <span class="comment">//data中用于存储数据,数据供el所指定的容器去使用</span></span></span><br><span class="line"><span class="javascript">      <span class="attr">name</span>:<span class="string">&quot;尚硅谷&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="el和data的两种写法"><a href="#el和data的两种写法" class="headerlink" title="el和data的两种写法"></a>el和data的两种写法</h1><p>data与el的2种写法<br>    1.el有2种写法<br>        (1).new Vue时候配置el属性。<br>        (2).先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。<br>    2.data有2种写法<br>        (1).对象式<br>        (2).函数式<br>    如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。<br>    3.一个重要的原则：<br>        由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--准备一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hell,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.config.productionTip = <span class="literal">false</span>;<span class="comment">//设置为 false 以阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> v = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//el: &quot;#root&quot;, //第一种写法</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">//data的第一种写法:对象式</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// data:&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     name:&quot;尚硅谷&quot;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//data的第一种写法:函数式</span></span></span><br><span class="line"><span class="javascript">		<span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&quot;尚硅谷&quot;</span></span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">        v.$mount(<span class="string">&quot;#root&quot;</span>);<span class="comment">//第二种写法</span></span></span><br><span class="line"><span class="javascript">	&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="理解MVVM"><a href="#理解MVVM" class="headerlink" title="理解MVVM"></a>理解MVVM</h1><blockquote>
<p>MVVM模型</p>
<p>​    M：模型(Model) ：data中的数据</p>
<p>​    V：视图(View) ：模板代码</p>
<p>​    VM：视图模型(ViewModel)：Vue实例<br>观察发现：<br>​    1.data中所有的属性，最后都出现在了vm身上。<br>​    2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</p>
</blockquote>
<h1 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h1><blockquote>
<p>1.Vue中的数据代理：<br>    通过vm对象来代理data对象中属性的操作（读/写）<br>2.Vue中数据代理的好处：<br>    更加方便的操作data中的数据<br>3.基本原理：<br>    通过Object.defineProperty()把data对象中所有属性添加到vm上。<br>    为每一个添加到vm上的属性，都指定一个getter/setter。<br>    在getter/setter内部去操作（读/写）data中对应的属性。</p>
</blockquote>
<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--准备一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hell,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--简写形式--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.config.productionTip = <span class="literal">false</span>;<span class="comment">//设置为 false 以阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">		<span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">		<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&quot;尚硅谷&quot;</span></span></span><br><span class="line"><span class="javascript">		&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">showInfo1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;你好1&quot;</span>);</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo2</span>(<span class="params">event,number</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event,number)</span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert(&quot;你好2&quot;);</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">	&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><blockquote>
<p>Vue中的事件修饰符：<br>    1.prevent：阻止默认事件（常用）；<br>    2.stop：阻止事件冒泡（常用）；<br>    3.once：事件只触发一次（常用）；<br>    4.capture：使用事件的捕获模式；<br>    5.self：只有event.target是当前操作的元素时才触发事件；<br>    6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">			*&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-class">.demo1</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">height</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-class">.box1</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">padding</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">background-color</span>: skyblue;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-class">.box2</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">padding</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">background-color</span>: orange;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-class">.list</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">background-color</span>: peru;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">overflow</span>: auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">			<span class="selector-tag">li</span>&#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">				<span class="attribute">height</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- 阻止默认事件（常用） --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- 事件只触发一次（常用） --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">				div1</span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">					div2</span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">			&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="function"><span class="title">showInfo</span>(<span class="params">e</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					alert(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					<span class="comment">// console.log(e.target)</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="function"><span class="title">showMsg</span>(<span class="params">msg</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					<span class="built_in">console</span>.log(msg)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				<span class="function"><span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">						<span class="built_in">console</span>.log(<span class="string">&#x27;#&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">					<span class="built_in">console</span>.log(<span class="string">&#x27;累坏了&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">				&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><blockquote>
<p>1.Vue中常用的按键别名：<br>    回车 =&gt; enter<br>    删除 =&gt; delete (捕获“删除”和“退格”键)<br>    退出 =&gt; esc<br>    空格 =&gt; space<br>    换行 =&gt; tab (特殊，必须配合keydown去使用)<br>    上 =&gt; up<br>    下 =&gt; down<br>    左 =&gt; left<br>    右 =&gt; right</p>
<p>2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</p>
<p>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta<br>    (1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。<br>    (2).配合keydown使用：正常触发事件。</p>
<p>4.也可以使用keyCode去指定具体的按键（不推荐）<br>5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</p>
</blockquote>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><blockquote>
<p>计算属性：<br>    1.定义：要用的属性不存在，要通过已有属性计算得来。<br>    2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。<br>    3.get函数什么时候执行？<br>        (1).初次读取时会执行一次。<br>        (2).当依赖的数据发生改变时会被再次调用。<br>    4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。<br>    5.备注：<br>        1.计算属性最终会出现在vm上，直接读取使用即可。<br>        2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例_计算属性实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    测试：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;x&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">x</span>:<span class="string">&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// fullName:&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     //get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     //get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     get()&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         console.log(&#x27;get被调用了&#x27;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         // console.log(this) //此处的this是vm</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         return this.firstName + &#x27;-&#x27; + this.lastName</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;,</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     //set什么时候调用? 当fullName被修改时。</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     set(value)&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         console.log(&#x27;set&#x27;,value)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         const arr = value.split(&#x27;-&#x27;)</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         this.firstName = arr[0]</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         this.lastName = arr[1]</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//简写</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;get被调用了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h1><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><blockquote>
<p>监视属性watch：<br>    1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作<br>    2.监视的属性必须存在，才能进行监视！！<br>    3.监视的两种写法：<br>        (1).new Vue时传入watch配置<br>        (2).通过vm.$watch监视</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例_监视属性_简写<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">info</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.isHot ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">changeWeather</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isHot = !<span class="built_in">this</span>.isHot</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">/* isHot:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          // immediate:true, //初始化时让handler调用一下</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          // deep:true,//深度监视</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          handler(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">              console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      &#125;, */</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//简写</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">/* isHot(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      &#125; */</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">/* vm.$watch(&#x27;isHot&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      immediate:true, //初始化时让handler调用一下</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      deep:true,//深度监视</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      handler(newValue,oldValue)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">          console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      &#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">  &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">//简写</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">/* vm.$watch(&#x27;isHot&#x27;,(newValue,oldValue)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">      console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">  &#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h2><blockquote>
<p>深度监视：</p>
<p>​    (1).Vue中的watch默认不监测对象内部值的改变（一层）。<br>​    (2).配置deep:true可以监测对象内部值改变（多层）。<br>备注：<br>​    (1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！<br>​    (2).使用watch时根据数据的具体结构，决定是否采用深度监视。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>天气案例_深度监视<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是:&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是:&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers = &#123;a:666,b:888&#125;&quot;</span>&gt;</span>彻底替换掉numbers<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			&#123;&#123;numbers.c.d.e&#125;&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">a</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">b</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">c</span>:&#123;</span></span><br><span class="line"><span class="javascript">						<span class="attr">d</span>:&#123;</span></span><br><span class="line"><span class="javascript">							<span class="attr">e</span>:<span class="number">100</span></span></span><br><span class="line"><span class="javascript">						&#125;</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">info</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">return</span> <span class="built_in">this</span>.isHot ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">changeWeather</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.isHot = !<span class="built_in">this</span>.isHot</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">isHot</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// immediate:true, //初始化时让handler调用一下</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">//handler什么时候调用？当isHot发生改变时。</span></span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="comment">//监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">/* &#x27;numbers.a&#x27;:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					handler()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">						console.log(&#x27;a被改变了&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				&#125; */</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">//监视多级结构中所有属性的变化</span></span></span><br><span class="line"><span class="javascript">				<span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">deep</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(<span class="string">&#x27;numbers改变了&#x27;</span>)</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="watch和computed对比"><a href="#watch和computed对比" class="headerlink" title="watch和computed对比"></a>watch和computed对比</h2><blockquote>
<p>computed和watch之间的区别：<br>    1.computed能完成的功能，watch都可以完成。<br>    2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。<br>两个重要的小原则：<br>    1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。<br>    2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，<br>    这样this的指向才是vm 或 组件实例对象。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>姓名案例_watch实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">			名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">			全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">fullName</span>:<span class="string">&#x27;张-三&#x27;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">firstName</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="built_in">console</span>.log(<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript">						<span class="built_in">this</span>.fullName = val + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">					&#125;,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">lastName</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + val</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="绑定class样式"><a href="#绑定class样式" class="headerlink" title="绑定class样式"></a>绑定class样式</h1><blockquote>
<ol>
<li>class样式<br>写法:class=”xxx” xxx可以是字符串、对象、数组。<br>字符串写法适用于：类名不确定，要动态获取。<br>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。<br>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li>
<li>style样式<br>:style=”{fontSize: xxx}”其中xxx是动态值。<br>:style=”[a,b]”其中a、b是样式对象。</li>
</ol>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>绑定样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-class">.basic</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			</span></span><br><span class="line"><span class="css">			<span class="selector-class">.happy</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span></span><br><span class="line"><span class="css">				<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.sad</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.normal</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-class">.atguigu1</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.atguigu2</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">				<span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">			<span class="selector-class">.atguigu3</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			绑定样式：</span></span><br><span class="line"><span class="comment">					1. class样式</span></span><br><span class="line"><span class="comment">								写法:class=&quot;xxx&quot; xxx可以是字符串、对象、数组。</span></span><br><span class="line"><span class="comment">										字符串写法适用于：类名不确定，要动态获取。</span></span><br><span class="line"><span class="comment">										对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</span></span><br><span class="line"><span class="comment">										数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</span></span><br><span class="line"><span class="comment">					2. style样式</span></span><br><span class="line"><span class="comment">								:style=&quot;&#123;fontSize: xxx&#125;&quot;其中xxx是动态值。</span></span><br><span class="line"><span class="comment">								:style=&quot;[a,b]&quot;其中a、b是样式对象。</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">classArr</span>:[<span class="string">&#x27;atguigu1&#x27;</span>,<span class="string">&#x27;atguigu2&#x27;</span>,<span class="string">&#x27;atguigu3&#x27;</span>],</span></span><br><span class="line"><span class="javascript">				<span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">atguigu1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">atguigu2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">styleObj2</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">styleArr</span>:[</span></span><br><span class="line"><span class="javascript">					&#123;</span></span><br><span class="line"><span class="javascript">						<span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						<span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					&#125;,</span></span><br><span class="line"><span class="javascript">					&#123;</span></span><br><span class="line"><span class="javascript">						<span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				]</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">changeMood</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span></span><br><span class="line"><span class="javascript">					<span class="keyword">const</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">3</span>)</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.mood = arr[index]</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><blockquote>
<p>条件渲染：<br>1.v-if<br>    写法：<br>        (1).v-if=”表达式”<br>        (2).v-else-if=”表达式”<br>        (3).v-else=”表达式”<br>    适用于：切换频率较低的场景。<br>    特点：不展示的DOM元素直接被移除。<br>    注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</p>
<p>2.v-show<br>    写法：v-show=”表达式”<br>    适用于：切换频率较高的场景。<br>    特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p>
<p>3.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- v-else和v-else-if --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span></span><br><span class="line"><span class="comment">			&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span></span><br><span class="line"><span class="comment">			&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span></span><br><span class="line"><span class="comment">			&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- v-if与template的配合使用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">n</span>:<span class="number">0</span></span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h2><blockquote>
<p>v-for指令:<br>    1.用于展示列表数据<br>    2.语法：v-for=”(item, index) in xxx” :key=”yyy”<br>    3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>基本列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">					&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) of car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">					&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- 遍历字符串 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历字符串（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) of str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">					&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 遍历指定次数 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试遍历指定次数（用得少）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) of 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">					&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">			<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="javascript">					],</span></span><br><span class="line"><span class="javascript">					<span class="attr">car</span>:&#123;</span></span><br><span class="line"><span class="javascript">						<span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						<span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span></span><br><span class="line"><span class="javascript">						<span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span></span><br><span class="line"><span class="javascript">					&#125;,</span></span><br><span class="line"><span class="javascript">					<span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;)</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a>key的原理</h2><blockquote>
<p>面试题：react、vue中的key有什么作用？（key的内部原理）</p>
<p>​    1.虚拟DOM中key的作用：</p>
<p>​            key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p>
<p>​    2.对比规则：</p>
<p>​        (1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</p>
<p>​                ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</p>
<p>​                ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p>
<p>​        (2).旧虚拟DOM中未找到与新虚拟DOM相同的key</p>
<p>​                创建新的真实DOM，随后渲染到到页面。</p>
<p>​    3.用index作为key可能会引发的问题：</p>
<p>​            1.若对数据进行：逆序添加、逆序删除等破坏顺序操作:</p>
<p>​                    会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</p>
<p>​            2.如果结构中还包含输入类的DOM：</p>
<p>​                    会产生错误DOM更新 ==&gt; 界面有问题。</p>
<p>​    4.开发中如何选择key?:</p>
<p>​            1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</p>
<p>​            2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</p>
<p>​            使用index作为key是没有问题的。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>key的原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 遍历数组 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="javascript">      ]</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.persons.unshift(p)</span></span><br><span class="line"><span class="javascript">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>列表过滤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPerons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">					&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">			<span class="comment">//用watch实现</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">//#region </span></span></span><br><span class="line"><span class="javascript">			<span class="comment">/* new Vue(&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				data:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					keyWord:&#x27;&#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					persons:[</span></span></span><br><span class="line"><span class="comment"><span class="javascript">						&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">						&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">						&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">						&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					],</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					filPerons:[]</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				watch:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					keyWord:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">						immediate:true,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">						handler(val)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">							this.filPerons = this.persons.filter((p)=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">								return p.name.indexOf(val) !== -1</span></span></span><br><span class="line"><span class="comment"><span class="javascript">							&#125;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">						&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			&#125;) */</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">//#endregion</span></span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">			<span class="comment">//用computed实现</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">					]</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="title">filPerons</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">return</span> <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">return</span> p.name.indexOf(<span class="built_in">this</span>.keyWord) !== -<span class="number">1</span></span></span><br><span class="line"><span class="javascript">						&#125;)</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;) </span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>列表排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPerons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">					&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">			<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">sortType</span>:<span class="number">0</span>, <span class="comment">//0原顺序 1降序 2升序</span></span></span><br><span class="line"><span class="javascript">					<span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">31</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">						&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">					]</span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="title">filPerons</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">const</span> arr = <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">return</span> p.name.indexOf(<span class="built_in">this</span>.keyWord) !== -<span class="number">1</span></span></span><br><span class="line"><span class="javascript">						&#125;)</span></span><br><span class="line"><span class="javascript">						<span class="comment">//判断一下是否需要排序</span></span></span><br><span class="line"><span class="javascript">						<span class="keyword">if</span>(<span class="built_in">this</span>.sortType)&#123;</span></span><br><span class="line"><span class="javascript">							arr.sort(<span class="function">(<span class="params">p1,p2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">								<span class="keyword">return</span> <span class="built_in">this</span>.sortType === <span class="number">1</span> ? p2.age-p1.age : p1.age-p2.age</span></span><br><span class="line"><span class="javascript">							&#125;)</span></span><br><span class="line"><span class="javascript">						&#125;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">return</span> arr</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;) </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结Vue数据监测"><a href="#总结Vue数据监测" class="headerlink" title="总结Vue数据监测"></a>总结Vue数据监测</h2><blockquote>
<p>Vue监视数据的原理：<br>                1. vue会监视data中所有层次的数据。</p>
<pre><code>            2. 如何监测对象中的数据？
                            通过setter实现监视，且要在new Vue时就传入要监测的数据。
                                (1).对象中后追加的属性，Vue默认不做响应式处理
                                (2).如需给后添加的属性做响应式，请使用如下API：
                                                Vue.set(target，propertyName/index，value) 或 
                                                vm.$set(target，propertyName/index，value)
                                       
            3. 如何监测数组中的数据？
                                通过包裹数组更新元素的方法实现，本质就是做了两件事：
                                    (1).调用原生对应的方法对数组进行更新。
                                    (2).重新解析模板，进而更新页面。
                                       
            4.在Vue修改数组中的某个元素一定要用如下方法：
                        1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()
                        2.Vue.set() 或 vm.set()
                                                    
            特别注意：Vue.set() 和 vm.set() 不能给vm 或 vm的根数据对象 添加属性！！！
</code></pre>
</blockquote>
<h1 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h1><blockquote>
<p>收集表单数据：<br>    若：<input type="text"/>，则v-model收集的是value值，用户输入的就是value值。<br>    若：<input type="radio"/>，则v-model收集的是value值，且要给标签配置value值。<br>    若：<input type="checkbox"/><br>    1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）<br>    2.配置input的value属性:<br>        (1)v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）<br>        (2)v-model的初始值是数组，那么收集的的就是value组成的数组<br>    备注：v-model的三个修饰符：<br>    lazy：失去焦点再收集数据<br>    number：输入字符串转为有效的数字<br>    trim：输入首尾空格过滤</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>收集表单数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">				账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">				密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">				年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">				性别：</span><br><span class="line">				男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">				女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">				爱好：</span><br><span class="line">				学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">				打游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">				吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">				所属校区</span><br><span class="line">				<span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">				其他信息：</span><br><span class="line">				<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">userInfo</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="javascript">					<span class="attr">city</span>:<span class="string">&#x27;beijing&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">demo</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.userInfo))</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><blockquote>
<p>过滤器：<br>    定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。<br>    语法：<br>        1.注册过滤器：Vue.filter(name,callback) 或 new Vue{filters:{}}<br>        2.使用过滤器：<code>&#123;&#123; xxx | 过滤器名 &#125;&#125;</code>  或  v-bind:属性 = “xxx | 过滤器名”<br>    备注：<br>        1.过滤器也可以接收额外参数、多个过滤器也可以串联<br>        2.并没有改变原本的数据, 是产生新的对应的数据</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示格式化后的时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 计算属性实现 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;fmtTime&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- methods实现 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;getFmtTime()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 过滤器实现 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 过滤器实现（传参） --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h3</span> <span class="attr">:x</span>=<span class="string">&quot;msg | mySlice&quot;</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="javascript">		Vue.filter(<span class="string">&#x27;mySlice&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">return</span> value.slice(<span class="number">0</span>,<span class="number">4</span>)</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">time</span>:<span class="number">1621561377603</span>, <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="javascript">				<span class="attr">msg</span>:<span class="string">&#x27;你好，尚硅谷&#x27;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">fmtTime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">return</span> dayjs(<span class="built_in">this</span>.time).format(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">getFmtTime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">return</span> dayjs(<span class="built_in">this</span>.time).format(<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span>)</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="javascript">			<span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">timeFormater</span>(<span class="params">value,str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">// console.log(&#x27;@&#x27;,value)</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">return</span> dayjs(value).format(str)</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">msg</span>:<span class="string">&#x27;hello,atguigu!&#x27;</span></span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h1><blockquote>
<p>我们学过的指令：<br>    v-bind    : 单向绑定解析表达式, 可简写为 :xxx<br>    v-model    : 双向数据绑定<br>    v-for      : 遍历数组/对象/字符串<br>    v-on       : 绑定事件监听, 可简写为@<br>    v-if          : 条件渲染（动态控制节点是否存存在）<br>    v-else     : 条件渲染（动态控制节点是否存存在）<br>    v-show     : 条件渲染 (动态控制节点是否展示)</p>
</blockquote>
<h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><blockquote>
<p>v-text指令：<br>    1.作用：向其所在的节点中渲染文本内容。<br>    2.与插值语法的区别：v-text会替换掉节点中的内容，则不会。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-text指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><blockquote>
<p>v-html指令：<br>    1.作用：向指定节点中渲染包含html结构的内容。<br>    2.与插值语法的区别：<br>        (1).v-html会替换掉节点中所有的内容，则不会。<br>        (2).v-html可以识别html结构。<br>    3.严重注意：v-html有安全性问题！！！！<br>        (1).在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。<br>        (2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-html指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">str2</span>:<span class="string">&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><blockquote>
<p>v-cloak指令（没有值）：<br>    1.本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性。<br>    2.使用css配合v-cloak可以解决网速慢时页面展示出的问题。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-cloak指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">			<span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="css">			&#125;</span></span><br><span class="line"><span class="css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/resource/5s/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="built_in">console</span>.log(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><blockquote>
<p>v-once指令：<br>    1.v-once所在节点在初次动态渲染后，就视为静态内容了。<br>    2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-once指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>初始化的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><blockquote>
<p>v-pre指令：<br>    1.跳过其所在节点的编译过程。<br>    2.可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>v-pre指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Vue其实很简单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> &gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><blockquote>
<p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。<br>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。<br>    自定义指令总结：<br>    一、定义语法：<br>        (1).局部指令：<br>            new Vue({                                new Vue({<br>                directives:{指令名:配置对象}   或           directives{指令名:回调函数}<br>            })                                         })<br>        (2).全局指令：<br>            Vue.directive(指令名,配置对象) 或   Vue.directive(指令名,回调函数)</p>
<p>​    二、配置对象中常用的3个回调：<br>​        (1).bind：指令与元素成功绑定时调用。<br>​        (2).inserted：指令所在元素被插入页面时调用。<br>​        (3).update：指令所在模板结构被重新解析时调用。</p>
<p>​    三、备注：<br>​        1.指令定义时不加v-，但使用时要加v-；<br>​        2.指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//定义全局指令</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			//指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			bind(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				element.value = binding.value</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			inserted(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				element.focus()</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			&#125;,</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			update(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				element.value = binding.value</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			&#125;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		&#125;) */</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="comment">//big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span></span></span><br><span class="line"><span class="javascript">				<span class="comment">/* &#x27;big-number&#x27;(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					// console.log(&#x27;big&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="javascript">					element.innerText = binding.value * 10</span></span></span><br><span class="line"><span class="comment"><span class="javascript">				&#125;, */</span></span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">big</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&#x27;big&#x27;</span>,<span class="built_in">this</span>) <span class="comment">//注意此处的this是window</span></span></span><br><span class="line"><span class="javascript">					<span class="comment">// console.log(&#x27;big&#x27;)</span></span></span><br><span class="line"><span class="javascript">					element.innerText = binding.value * <span class="number">10</span></span></span><br><span class="line"><span class="javascript">				&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="javascript">					<span class="comment">//指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="title">bind</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						element.value = binding.value</span></span><br><span class="line"><span class="javascript">					&#125;,</span></span><br><span class="line"><span class="javascript">					<span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="title">inserted</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						element.focus()</span></span><br><span class="line"><span class="javascript">					&#125;,</span></span><br><span class="line"><span class="javascript">					<span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="title">update</span>(<span class="params">element,binding</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">						element.value = binding.value</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><img src="https://fanaidi.gitee.io/blogimgs/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p>
<blockquote>
<p>生命周期：<br>    1.又名：生命周期回调函数、生命周期函数、生命周期钩子。<br>    2.是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。<br>    3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。<br>    4.生命周期函数中的this指向是vm 或 组件实例对象。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>引出生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		 <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">a</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">opacity</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">				</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="built_in">console</span>.log(<span class="string">&#x27;mounted&#x27;</span>,<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript">				<span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">this</span>.opacity -= <span class="number">0.01</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">if</span>(<span class="built_in">this</span>.opacity &lt;= <span class="number">0</span>) <span class="built_in">this</span>.opacity = <span class="number">1</span></span></span><br><span class="line"><span class="javascript">				&#125;,<span class="number">16</span>)</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//通过外部的定时器实现（不推荐）</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">/* setInterval(() =&gt; &#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			vm.opacity -= 0.01</span></span></span><br><span class="line"><span class="comment"><span class="javascript">			if(vm.opacity &lt;= 0) vm.opacity = 1</span></span></span><br><span class="line"><span class="comment"><span class="javascript">		&#125;,16) */</span></span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>常用的生命周期钩子：<br>    1.mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。<br>    2.beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</p>
</blockquote>
<pre><code>关于销毁Vue实例
    1.销毁后借助Vue开发者工具看不到任何信息。
    2.销毁后自定义事件会失效，但原生DOM事件依然有效。
    3.一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。
</code></pre>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><blockquote>
<p>Vue中使用组件的三大步骤：<br>        一、定义组件(创建组件)<br>        二、注册组件<br>        三、使用组件(写组件标签)</p>
<p>一、如何定义一个组件？<br>    使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；区别如下：<br>        1.el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。<br>        2.data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。<br>        备注：使用template可以配置组件结构。</p>
<p>二、如何注册组件？<br>    1.局部注册：靠new Vue的时候传入components选项<br>    2.全局注册：靠Vue.component(‘组件名’,组件)</p>
<p>三、编写组件标签：<br><school></school></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//第一步：创建school组件</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> school = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;div class=&quot;demo&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;	</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">			`</span>,</span></span><br><span class="line"><span class="javascript">			<span class="comment">// el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">schoolName</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">address</span>:<span class="string">&#x27;北京昌平&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					alert(<span class="built_in">this</span>.schoolName)</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//第一步：创建student组件</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> student = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">			`</span>,</span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">studentName</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="comment">//第一步：创建hello组件</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> hello = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;div&gt;	</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">			`</span>,</span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">name</span>:<span class="string">&#x27;Tom&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="comment">//第二步：全局注册组件</span></span></span><br><span class="line"><span class="javascript">		Vue.component(<span class="string">&#x27;hello&#x27;</span>,hello)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//创建vm</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="comment">//第二步：注册组件（局部注册）</span></span></span><br><span class="line"><span class="javascript">			<span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">				school,</span></span><br><span class="line"><span class="javascript">				student</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><blockquote>
<p>几个注意点：<br>    1.关于组件名:<br>        一个单词组成：<br>            第一种写法(首字母小写)：school<br>            第二种写法(首字母大写)：School<br>        多个单词组成：<br>            第一种写法(kebab-case命名)：my-school<br>            第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)<br>    备注：<br>        (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。<br>        (2).可以使用name配置项指定组件在开发者工具中呈现的名字。</p>
</blockquote>
<pre><code>2.关于组件标签:
    第一种写法：&lt;school&gt;&lt;/school&gt;
    第二种写法：&lt;school/&gt;
    备注：不用使用脚手架时，&lt;school/&gt;会导致后续组件不能渲染。

3.一个简写方式：
    const school = Vue.extend(options) 可简写为：const school = options
</code></pre>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>几个注意点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> s = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;	</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;	</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">			`</span>,</span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">msg</span>:<span class="string">&#x27;欢迎学习Vue!&#x27;</span></span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">school</span>:s</span></span><br><span class="line"><span class="javascript">			&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		//定义student组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			name:&#x27;student&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			`,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			data()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					name:&#x27;尚硅谷&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		&#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		//定义school组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			name:&#x27;school&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					<span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>	</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					<span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			`,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			data()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					name:&#x27;尚硅谷&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					address:&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			&#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			//注册组件（局部）</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				student</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		&#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		//定义hello组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			template:`<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			data()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					msg:&#x27;欢迎来到尚硅谷学习！&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		&#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		//定义app组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		const app = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				<span class="tag">&lt;<span class="name">div</span>&gt;</span>	</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">					<span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			`,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				school,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">				hello</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		&#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		//创建vm</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			template:&#x27;<span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			//注册组件（局部）</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">			components:&#123;app&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">		&#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">	</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h2><blockquote>
<p>关于VueComponent：<br>    1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p>
</blockquote>
<pre><code>2.我们只需要写&lt;school/&gt;或&lt;school&gt;&lt;/school&gt;，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new                         VueComponent(options)。

3.特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！

4.关于this指向：
    (1).组件配置中：
        data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。
    (2).new Vue(options)配置中：
        data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。

5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。
Vue的实例对象，以后简称vm。
</code></pre>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>VueComponent<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">		Vue.config.productionTip = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="comment">//定义school组件</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> school = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;	</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;	</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">			`</span>,</span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="title">showName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">&#x27;showName&#x27;</span>,<span class="built_in">this</span>)</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> test = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">template</span>:<span class="string">`&lt;span&gt;atguigu&lt;/span&gt;`</span></span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//定义hello组件</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> hello = Vue.extend(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">					&lt;test&gt;&lt;/test&gt;	</span></span></span><br><span class="line"><span class="string"><span class="javascript">				&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">			`</span>,</span></span><br><span class="line"><span class="javascript">			<span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">				<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">					<span class="attr">msg</span>:<span class="string">&#x27;你好啊！&#x27;</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;,</span></span><br><span class="line"><span class="javascript">			<span class="attr">components</span>:&#123;test&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">// console.log(&#x27;@&#x27;,school)</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">// console.log(&#x27;#&#x27;,hello)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//创建vm</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">			<span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">			<span class="attr">components</span>:&#123;school,hello&#125;</span></span><br><span class="line"><span class="javascript">		&#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="一个重要的内置关系"><a href="#一个重要的内置关系" class="headerlink" title="一个重要的内置关系"></a>一个重要的内置关系</h2><p><img src="https://fanaidi.gitee.io/blogimgs/Vue/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB.jpg"></p>
<blockquote>
<p>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype<br>2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2021/06/25/SpringMVC/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>
<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>
<p>JavaBean分为两类：</p>
<ul>
<li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li>
<li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li>
</ul>
<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>
<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>
<p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>
<blockquote>
<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p>
</blockquote>
<h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul>
<li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li>
<li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p>
<p>构建工具：maven3.5.4</p>
<p>服务器：tomcat7</p>
<p>Spring版本：5.3.1</p>
<h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img001.png" alt="images"></p>
<h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p>
<h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-扩展配置方式"><a href="#b-gt-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">		而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">		因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>&lt;url-pattern&gt;标签中使用/和/*的区别：</p>
<p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p>
<p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p>
<p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p>
</blockquote>
<h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p>
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p>
<p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p>
<p>处理get请求的映射–&gt;@GetMapping</p>
<p>处理post请求的映射–&gt;@PostMapping</p>
<p>处理put请求的映射–&gt;@PutMapping</p>
<p>处理delete请求的映射–&gt;@DeleteMapping</p>
<p>2、常用的请求方式有get，post，put，delete</p>
<p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p>
<p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p>
</blockquote>
<h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p>
<p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p>
</blockquote>
<h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p>
<p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
<p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p>
<p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p>
<p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p>
<p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p>
<h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p>
<p>*：表示任意的0个或多个字符</p>
<p>**：表示任意的一层或多层目录</p>
<p>注意：在使用**时，只能使用/**/xxx的方式</p>
<h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p>
<p>rest方式：/deleteUser/1</p>
<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure>

<h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>
<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>
<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>
</blockquote>
<h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<p>value：指定为形参赋值的请求参数的参数名</p>
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p>
<h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p>
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p>
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testPOJO</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModel</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelMap</span><span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSession</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testApplication</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">	ServletContext application = session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p>
<p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p>
<p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p>
<p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img002.png"></p>
<h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p>
<p>SpringMVC中创建转发视图的情况：</p>
<p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<p>例如”forward:/“，”forward:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img003.png" alt="image-20210706201316593"></p>
<h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<p>例如”redirect:/“，”redirect:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img004.png" alt="image-20210706201602267"></p>
<blockquote>
<p>注：</p>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p>
</blockquote>
<h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">	view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p>
<p>&lt;mvc:annotation-driven /&gt;</p>
</blockquote>
<h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>
<h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody><tr>
<td>查询操作</td>
<td>getUserById?id=1</td>
<td>user/1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id=1</td>
<td>user/1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody></table>
<h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post</p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong> </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p>
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<p>原因：</p>
<ul>
<li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p>
</li>
<li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p>
</li>
<li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p>
</li>
<li><p>```<br>String paramValue = request.getParameter(this.methodParam);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 八、RESTful案例</span><br><span class="line"></span><br><span class="line">### 1、准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line"></span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line"> ```java</span><br><span class="line"> package com.atguigu.mvc.bean;</span><br><span class="line"> </span><br><span class="line"> public class Employee &#123;</span><br><span class="line"> </span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line"> </span><br><span class="line">    private String email;</span><br><span class="line">    //1 male, 0 female</span><br><span class="line">    private Integer gender;</span><br><span class="line">    </span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">       return id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">       return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">       return email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">       this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Integer getGender() &#123;</span><br><span class="line">       return gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setGender(Integer gender) &#123;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee(Integer id, String lastName, String email, Integer gender) &#123;</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">       this.email = email;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<ul>
<li><p>准备dao模拟数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">      employees = <span class="keyword">new</span> HashMap&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">      employees.put(<span class="number">1001</span>, <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1002</span>, <span class="keyword">new</span> Employee(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1003</span>, <span class="keyword">new</span> Employee(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1004</span>, <span class="keyword">new</span> Employee(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1005</span>, <span class="keyword">new</span> Employee(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Integer initId = <span class="number">1006</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(employee.getId() == <span class="keyword">null</span>)&#123;</span><br><span class="line">         employee.setId(initId++);</span><br><span class="line">      &#125;</span><br><span class="line">      employees.put(employee.getId(), employee);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.values();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.get(id);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">      employees.remove(id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table>
<thead>
<tr>
<th>功能</th>
<th>URL 地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>访问首页√</td>
<td>/</td>
<td>GET</td>
</tr>
<tr>
<td>查询全部数据√</td>
<td>/employee</td>
<td>GET</td>
</tr>
<tr>
<td>删除√</td>
<td>/employee/2</td>
<td>DELETE</td>
</tr>
<tr>
<td>跳转到添加数据页面√</td>
<td>/toAdd</td>
<td>GET</td>
</tr>
<tr>
<td>执行保存√</td>
<td>/employee</td>
<td>POST</td>
</tr>
<tr>
<td>跳转到更新数据页面√</td>
<td>/employee/2</td>
<td>GET</td>
</tr>
<tr>
<td>执行更新√</td>
<td>/employee</td>
<td>PUT</td>
</tr>
</tbody></table>
<h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeList</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过vue处理点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">deleteEmployee</span>:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> delete_form = <span class="built_in">document</span>.getElementById(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="javascript">                delete_form.action = event.target.href;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="javascript">                delete_form.submit();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="javascript">                event.preventDefault();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmployee</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span></span>&#123;</span><br><span class="line">    Employee employee = employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmployee</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p>
<p>ResponseEntity</p>
<h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>requestBody:username=admin&amp;password=123456</p>
<h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age=0”, sec-ch-ua:”” Not A;Brand”;v=”99”, “Chromium”;v=”90”, “Google Chrome”;v=”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080&quot;">http://localhost:8080&quot;</a>, user-agent:”Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”]<br>requestBody:username=admin&amp;password=123</p>
<h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testResponseBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：浏览器页面显示success</p>
<h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p>
<p>a&gt;导入jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure>

<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testResponseUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器的页面中展示的结果：</p>
<p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p>
<h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;通过vue和axios处理点击事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">testAjax</span>:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                axios(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>:event.target.href,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(response.data);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">                event.preventDefault();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAjax</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>
<h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
<h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    String realPath = servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    HttpStatus statusCode = HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=”multipart/form-data”</p>
<p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p>
<p>上传步骤：</p>
<p>a&gt;添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    String fileName = photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    String hzName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    String photoPath = servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    String finalPath = photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> File(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p>
<p>SpringMVC中的拦截器需要实现HandlerInterceptor</p>
<p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p>
<p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p>
<p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p>
<p>b&gt;若某个拦截器的preHandle()返回了false</p>
<p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p>
<h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>
<p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p>
<p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        		properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        		properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        	--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p>
<h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebInit</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        CharacterEncodingFilter encodingFilter = <span class="keyword">new</span> CharacterEncodingFilter();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="keyword">true</span>);</span><br><span class="line">        HiddenHttpMethodFilter hiddenHttpMethodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">	<span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        FirstInterceptor firstInterceptor = <span class="keyword">new</span> FirstInterceptor();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ITemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        ServletContextTemplateResolver templateResolver = <span class="keyword">new</span> ServletContextTemplateResolver(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> </span>&#123;</span><br><span class="line">        SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class="line">        ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul>
<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<ul>
<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler：<strong>处理器</strong>，需要工程师开发</li>
</ul>
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<ul>
<li>View：<strong>视图</strong></li>
</ul>
<p>作用：将模型数据通过页面展示给用户</p>
<h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img005.png" alt="images"></p>
<h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebApplicationContext rootContext =</span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    WebApplicationContext wac = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="keyword">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        String attrName = getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    ConfigurableWebApplicationContext wac =</span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    String configLocation = getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            String attrName = (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.flashMapManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RequestPath requestPath = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            	handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            	interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            	interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           	<span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            String method = request.getMethod();</span><br><span class="line">            <span class="keyword">boolean</span> isGet = <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol>
<li><p>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p>
</li>
<li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p>
</li>
</ol>
<p>a) 不存在</p>
<p>i. 再判断是否配置了mvc:default-servlet-handler</p>
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img006.png" alt="image-20210709214911404"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img007.png" alt="image-20210709214947432"></p>
<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img008.png" alt="image-20210709215255693"></p>
<p><img src="https://fanaidi.gitee.io/blogimgs/SpringMVC/img009.png" alt="image-20210709215336097"></p>
<p>b) 存在则执行下面的流程</p>
<ol start="3">
<li><p>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p>
</li>
<li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p>
</li>
<li><p>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p>
</li>
<li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p>
</li>
</ol>
<p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p>
<p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p>
<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>
<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<ol start="7">
<li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p>
</li>
<li><p>此时将开始执行拦截器的postHandle(…)方法【逆向】。</p>
</li>
<li><p>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</p>
</li>
<li><p>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p>
</li>
<li><p>将渲染结果返回给客户端。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2021/04/07/Java/</url>
    <content><![CDATA[<p>[TOC]</p>
<span id="more"></span>

<h3 id="一-java四种访问权限修饰符"><a href="#一-java四种访问权限修饰符" class="headerlink" title="一. java四种访问权限修饰符"></a>一. java四种访问权限修饰符</h3><h4 id="1-四种访问权限修饰符的范围"><a href="#1-四种访问权限修饰符的范围" class="headerlink" title="1.四种访问权限修饰符的范围"></a>1.四种访问权限修饰符的范围</h4><table>
<thead>
<tr>
<th></th>
<th>public</th>
<th>protected</th>
<th>(default)</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td>同一个类</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>同一个包</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>子孙类</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>不同包非子类</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>（说明：其中√表示可访问×表示不可访问 ，default为默认修饰符，并不是关键字，不用写）<br>四种修饰符按权限大小：public&gt;protected&gt;(default)&gt;private</p>
<h3 id="二-final关键字"><a href="#二-final关键字" class="headerlink" title="二. final关键字"></a>二. final关键字</h3><h4 id="1-用来修饰一个类"><a href="#1-用来修饰一个类" class="headerlink" title="1.用来修饰一个类"></a>1.用来修饰一个类</h4><p>如果引用为基本数据类型，则该引用为常量，该值无法修改；<br>如果引用为引用数据类型，比如对象、数组，则该对象、数组本身可以修改，但指向该对象或数组的地址的引用不能修改。<br>如果引用为类的成员变量，则必须当场赋值，否则编译会报错。</p>
<h4 id="2-用来修饰一个方法"><a href="#2-用来修饰一个方法" class="headerlink" title="2.用来修饰一个方法"></a>2.用来修饰一个方法</h4><p>当使用final修饰方法时，这个方法将成为最终方法，无法被子类重写。但是，该方法仍然可以被继承。</p>
<h4 id="3-用来修饰类"><a href="#3-用来修饰类" class="headerlink" title="3.用来修饰类"></a>3.用来修饰类</h4><p>当用final修改类时，该类成为最终类，无法被继承。简称为“断子绝孙类”。</p>
<h3 id="三-基本数据类型对应的包装类"><a href="#三-基本数据类型对应的包装类" class="headerlink" title="三. 基本数据类型对应的包装类"></a>三. 基本数据类型对应的包装类</h3><h4 id="1-基本数据类型对应的包装类"><a href="#1-基本数据类型对应的包装类" class="headerlink" title="1.基本数据类型对应的包装类"></a>1.基本数据类型对应的包装类</h4><table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
<h4 id="2-基本数据类型-gt-字符串"><a href="#2-基本数据类型-gt-字符串" class="headerlink" title="2.基本数据类型 -&gt; 字符串"></a>2.基本数据类型 -&gt; 字符串</h4><p>(1)基本数据类型的值+““（最简单的方式）<br>(2)使用包装类中的静态方法：static String toString(int i) 返回表示指定整数的 String对象。<br>(3)使用String类中的静态方法：static String valueOf(int i) 返回 int参数的字符串表示形式。 </p>
<h4 id="3-字符串-gt-基本数据类型"><a href="#3-字符串-gt-基本数据类型" class="headerlink" title="3.字符串 -&gt; 基本数据类型"></a>3.字符串 -&gt; 基本数据类型</h4><p>(1)使用包装类中的静态方法parseXX(“字符串”)<br>(2)static int parseInt(String s) 将字符串参数解析为带符号的十进制整数。<br>(3)static double parseDouble(String s) 返回一个新 double初始化为指定的代表的值 String ，如通过执行 valueOf类的方法 Double 。 </p>
<h3 id="四-集合"><a href="#四-集合" class="headerlink" title="四.集合"></a>四.集合</h3><h4 id="1-List"><a href="#1-List" class="headerlink" title="1.List"></a>1.List</h4><table>
<thead>
<tr>
<th></th>
<th>底层数据结构</th>
<th>查询速度</th>
<th>增删速度</th>
<th>线程安全</th>
<th>效率</th>
<th>是否可以存储重复元素</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayList</td>
<td>数组</td>
<td>快</td>
<td>慢</td>
<td>不安全</td>
<td>高</td>
<td>可以</td>
</tr>
<tr>
<td>LinkedList</td>
<td>链表</td>
<td>慢</td>
<td>快</td>
<td>不安全</td>
<td>高</td>
<td>可以</td>
</tr>
<tr>
<td>Vector</td>
<td>数组</td>
<td>快</td>
<td>满</td>
<td>安全</td>
<td>低</td>
<td>可以</td>
</tr>
</tbody></table>
<p>（注意：Vector：它的方法上加了synchronized关键字，所以它是线程安全的，但也因此，它的效率很低，几乎已经被淘汰了。</p>
<p><strong>适用场景分析</strong>：当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。）</p>
<h4 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h4><table>
<thead>
<tr>
<th></th>
<th>底层数据结构</th>
<th>元素顺序</th>
<th>线程安全</th>
<th>效率</th>
<th>是否可以存储null元素</th>
</tr>
</thead>
<tbody><tr>
<td>HashSet</td>
<td>哈希表</td>
<td>无序</td>
<td>不安全</td>
<td>高</td>
<td>可以</td>
</tr>
<tr>
<td>LinkedHashSet</td>
<td>链表和哈希表共同实现</td>
<td>有序</td>
<td>不安全</td>
<td>高</td>
<td>可以</td>
</tr>
<tr>
<td>TreeSet</td>
<td>二叉树</td>
<td>无序</td>
<td></td>
<td></td>
<td>不可以</td>
</tr>
</tbody></table>
<p>（注意：HashSet：元素的唯一性是靠所存储元素类型是否重写hashCode()和equals()方法来保证的，如果没有重写这两个方法，则无法保证元素的唯一性.</p>
<p>TreeSet:元素唯一且已经排好序；唯一性同样需要重写</p>
<p>LinkedHashSet：是HashSet的子类，链表保证元素的添加顺序，哈希表保证元素的唯一性。</p>
<p><strong>适用场景分析</strong>：HashSet是基于Hash算法实现的，其性能通常都优于TreeSet。为快速查找而设计的Set，我们通常都应该使用HashSet，在我们需要排序的功能时，我们才使用TreeSet。）</p>
<h4 id="3-Map"><a href="#3-Map" class="headerlink" title="3.Map"></a>3.Map</h4><p>Map用于保存具有映射关系的数据，Map里保存着两组数据：key和value，它们都可以使任何引用类型的数据，但key不能重复。所以通过指定的key就可以取出对应的value。</p>
<table>
<thead>
<tr>
<th></th>
<th>key值是否有序</th>
<th>key值是否排序</th>
<th>key值是否排序</th>
<th>key值是否可以为NULL</th>
</tr>
</thead>
<tbody><tr>
<td>HashMap</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>LinkedHashMap</td>
<td>是</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>TreeMap</td>
<td>否</td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<p>（注意：存入TreeMap中的元素要么实现了Comparatable接口；要么使用Comparator接口作为构造参数创建Set对象。）</p>
<p><strong>适用场景分析</strong>：如果更新时不需要保持元素的顺序，就使用HashMap，如果需要保持元素的插入顺序或者访问顺序，就使用LinkedHashMap，如果需要使图按照键值排序，就使用TreeMap。</p>
<p>HashMap：适用于Map中插入、删除和定位元素。<br>Treemap：适用于按自然顺序或自定义顺序遍历键(key)。</p>
<h4 id="4-List和Set总结"><a href="#4-List和Set总结" class="headerlink" title="4.List和Set总结"></a>4.List和Set总结</h4><p>1.List,Set都是继承自Collection接口，Map则不是<br>2.List特点：元素有放入顺序，元素可重复 ，Set特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的，加入Set 的Object必须定义equals()方法 ，另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值。）<br>3.Set和List对比：<br>Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。<br>List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变。<br>4.ArrayList与LinkedList的区别和适用场景<br>Arraylist：<br>优点：ArrayList是实现了基于动态数组的数据结构,因为地址连续，一旦数据存储好了，查询操作效率会比较高（在内存里是连着放的）。<br>缺点：因为地址连续， ArrayList要移动数据,所以插入和删除操作效率比较低。</p>
<p>LinkedList：<br>优点：LinkedList基于链表的数据结构,地址是任意的，所以在开辟内存空间的时候不需要等一个连续的地址，对于新增和删除操作add和remove，LinkedList比较占优势。LinkedList 适用于要头尾操作或插入指定位置的场景<br>缺点：因为LinkedList要移动指针,所以查询操作性能比较低。</p>
<p><strong>适用场景分析</strong>：<br>当需要对数据进行对此访问的情况下选用ArrayList，当需要对数据进行多次增加删除修改时采用LinkedList。</p>
<h3 id="五-泛型"><a href="#五-泛型" class="headerlink" title="五. 泛型"></a>五. 泛型</h3><h4 id="1-含有泛型的方法："><a href="#1-含有泛型的方法：" class="headerlink" title="1.含有泛型的方法："></a>1.含有泛型的方法：</h4><p>格式：修饰符 &lt;泛型&gt; 返回值类型 方法名（参数列表（可以使用泛型））{}<br>或 修饰符 static &lt;泛型&gt; 返回值类型 方法名（参数列表（可以使用泛型））{}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span> </span>&#123;</span><br><span class="line">    <span class="comment">//含有泛型的普通方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//含有泛型的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;M&gt; <span class="function"><span class="keyword">void</span> <span class="title">method01</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-含有泛型的类："><a href="#2-含有泛型的类：" class="headerlink" title="2.含有泛型的类："></a>2.含有泛型的类：</h4><p>格式：修饰符 class 类名&lt;泛型&gt;{}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">含有泛型的类：变量的类型是泛型，方法的参数类型和返回值类型也是泛型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> E name;</span><br><span class="line"><span class="keyword">private</span> E password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenericClass</span><span class="params">(E name, E password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(E name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(E password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-含有泛型的接口"><a href="#3-含有泛型的接口" class="headerlink" title="3.含有泛型的接口"></a>3.含有泛型的接口</h4><p>格式：修饰符 interface 接口名&lt;泛型&gt;{}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">含有泛型的接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGeneric</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">(E e)</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">含有泛型的接口的实现类：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第一种表示方式：实现接口，并指定泛型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericImp1</span> <span class="keyword">implements</span> <span class="title">IGeneric</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">含有接口的实现类：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二种表示方式：接口使用什么类型，实现类就使用什么类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">就相当于定义了一个含有泛型的类，创建对象时指定泛型的类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericImp2</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">IGeneric</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-泛型的通配符"><a href="#4-泛型的通配符" class="headerlink" title="4.泛型的通配符"></a>4.泛型的通配符</h4><p>如果不知道数据类型，可以用？代替，只能在传参的时候使用通配符，定义的时候不能使用通配符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">泛型通配符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTpf</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    arrayList.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    arrayList.add(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    ArrayList&lt;Integer&gt; arrayList1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    arrayList1.add(<span class="number">1</span>);</span><br><span class="line">    arrayList1.add(<span class="number">2</span>);</span><br><span class="line">    printArray(arrayList);</span><br><span class="line">    printArray(arrayList1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; arrayList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用迭代器遍历</span></span><br><span class="line">    Iterator&lt;?&gt; it = arrayList.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">        <span class="comment">//it.next()方法，取出的元素是Object类型</span></span><br><span class="line">        Object next = it.next();</span><br><span class="line">        System.out.println(next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-泛型的限定"><a href="#5-泛型的限定" class="headerlink" title="5.泛型的限定"></a>5.泛型的限定</h4><p>泛型的上限限定：？extends E 代表使用的泛型只能是E类型的子类或本身<br>泛型的下限限定：? super E 代表使用的泛型只能是E类型的父类或本身</p>
<h3 id="六-异常"><a href="#六-异常" class="headerlink" title="六. 异常"></a>六. 异常</h3><h4 id="1-异常关系图"><a href="#1-异常关系图" class="headerlink" title="1.异常关系图"></a>1.异常关系图</h4><p><img src="https://fanaidi.gitee.io/blogimgs/Java/%E5%BC%82%E5%B8%B8%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" alt="异常"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//编译期异常，进行编码（写代码），程序出现异常</span></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;YYYY-MM-DD&quot;</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = simpleDateFormat.parse(<span class="string">&quot;1999-11&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//运行期异常，Java程序运行过程中出现的错误</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">OutOfMemoryError 内存溢出错误，后续代码不会执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">    System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-throw"><a href="#2-throw" class="headerlink" title="2.throw"></a>2.throw</h4><p><strong>格式：</strong>throw new xxxException(“异常产生的原因”);<br><strong>作用：</strong>使用throw关键字在指定的方法中抛出指定的异常<br><strong>注意：</strong>throw关键字必须写在方法的内部<br>     throw关键字后面new的对象必须是Exception或者Exception的子类<br>     throw关键字抛出指定的异常对象，我们就必须处理这个异常对象<br>     throw关键字后面创建的是RuntimeException或RuntimeException的子类对象，我们可以不处理，默认交给JVM处理（打印异常对象，中断程序）<br>     throw关键字后面创建的编译异常（写代码的时候报错），我们就必须处理这个异常，要么throws，要么try…catch</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int[] arr = null;</span></span><br><span class="line"><span class="comment">//        test001(arr,0);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        test001(arr2,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//传入一个数组和下标，输出指定的值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test001</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对传入的arr进行合法性校验</span></span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;数组为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对传入的index进行合法性校验</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index &gt;arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;数组溢出&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用Objects.requireNonNull()方法对参数进行合法性判断（判断参数是否为NULL）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test001(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test001</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(o,<span class="string">&quot;传入的值不能为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-throws"><a href="#3-throws" class="headerlink" title="3.throws"></a>3.throws</h4><p><strong>格式：</strong></p>
<blockquote>
<p>在方法声明时使用<br>修饰符 返回值类型 方法名（参数列表） throws AAAException,BBBException…{<br>throw new AAAException(“产生原因”);<br>throw new BBBException(“产生原因”);<br>}</p>
</blockquote>
<p><strong>作用：</strong></p>
<blockquote>
<p>当方法内部抛出异常对象的时候，那么我们就必须处理这个异常对象可以使用throws关键字处理异常对象，会把异常对象声明抛出给方法的调用者处（自己不处理，让别人处理），最终交给JVM处理（中断处理）</p>
</blockquote>
<p><strong>注意</strong></p>
<blockquote>
<p>(1).throws关键字必须写在方法声明处<br>(2).throws关键字后面声明的异常必须是Exception或Exception的子类<br>(3).方法内部如果抛出了多个异常对象，那么throws后面也必须声明多个异常。如果抛出的异常有子父类关系，那么直接声明父类异常即可。<br>(4).调用了一个声明抛出异常的方法，我们就必须处理声明的异常。要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM。要么         try…catch..自己处理</p>
</blockquote>
<h5 id="a-异常处理的第一种方式（交给别人处理）"><a href="#a-异常处理的第一种方式（交给别人处理）" class="headerlink" title="a.异常处理的第一种方式（交给别人处理）"></a>a.异常处理的第一种方式（交给别人处理）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line">   <span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsTest</span> </span>&#123;</span><br><span class="line">       <span class="comment">//FileNotFoundException extends IOException</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">           test001(<span class="string">&quot;c://a.tx&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断文件路径的合法性</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test001</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">           <span class="comment">//判断路径</span></span><br><span class="line">           <span class="keyword">if</span>(!fileName.equals(<span class="string">&quot;c://a.txt&quot;</span>))&#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;找不到c:/a.txt&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;找到了&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-异常处理的第二种方式（自己处理）try…catch"><a href="#b-异常处理的第二种方式（自己处理）try…catch" class="headerlink" title="b.异常处理的第二种方式（自己处理）try…catch"></a>b.异常处理的第二种方式（自己处理）try…catch</h5><p><strong>格式：</strong></p>
<blockquote>
<p>try{<br>可能产生异常的代码<br>}catch(定义一个异常的变量，用来接收try中接收的异常对象){<br>异常的处理逻辑，获取异常对象后，怎么处理异常对象<br>一般在工作中，会把异常的信息记录到日志中<br>}<br>…<br>catch(异常类型名 变量名){</p>
<p>}</p>
</blockquote>
<p><strong>注意：</strong></p>
<blockquote>
<p>(1).try中可能会抛出多个异常对象，那么就可以使用多个catch处理这些异常对象<br>(2).如果try中产生了异常，就会执行catch中的异常处理逻辑，执行完毕catch中的异常处理逻辑，就会执行try…catch之后的代码。<br>(3).如果try中没有产生异常，就不会执行catch中的异常处理逻辑。执行完try中的代码，继续执行try…catch之后的代码。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//FileNotFoundException extends IOException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可能产生异常的代码</span></span><br><span class="line">            test001(<span class="string">&quot;c://a.tx&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;<span class="comment">//try中抛出什么异常对象，catch就定义什么异常变量，用来接收这个异常变量</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后续代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断文件路径的合法性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test001</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">        <span class="comment">//判断路径</span></span><br><span class="line">        <span class="keyword">if</span>(!fileName.equals(<span class="string">&quot;c://a.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;找不到c:/a.txt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-异常处理方法"><a href="#4-异常处理方法" class="headerlink" title="4.异常处理方法"></a>4.异常处理方法</h4><blockquote>
<p>getMessage() 返回此可抛出的简短描述。<br>toString() 返回此throwable的详细消息字符串。<br>printStackTrace() 将此throwable和其追溯打印到标准错误流。（JVM打印异常对象，默认此方法，打印的异常信息是最全面的） </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//FileNotFoundException extends IOException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可能产生异常的代码</span></span><br><span class="line">            test001(<span class="string">&quot;c://a.txt&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;<span class="comment">//try中抛出什么异常对象，catch就定义什么异常变量，用来接收这个异常变量</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            e.getMessage();</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后续代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断文件路径的合法性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test001</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">        <span class="comment">//判断路径</span></span><br><span class="line">        <span class="keyword">if</span>(!fileName.equals(<span class="string">&quot;c://a.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;找不到c:/a.txt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test002</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//判断后缀是不是.txt结尾</span></span><br><span class="line">        <span class="keyword">if</span>(!fileName.endsWith(<span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;文件不是以.txt结尾&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-finally代码块"><a href="#5-finally代码块" class="headerlink" title="5.finally代码块"></a>5.finally代码块</h4><p><strong>格式：</strong></p>
<blockquote>
<p>try{<br>可能产生异常的代码<br>}catch(定义一个异常的变量，用来接收try中接收的异常对象){<br>异常的处理逻辑，获取异常对象后，怎么处理异常对象<br>一般在工作中，会把异常的信息记录到日志中<br>}finall{<br>无论是否出现异常都会执行<br>}</p>
</blockquote>
<p><strong>注意：</strong></p>
<blockquote>
<p>(1).finally不能单独使用，必须和try一起使用<br>(2).finally一般用于资源释放，无论程序是否出现异常，都要释放资源（IO）<br>(3).如果finally有return语句，永远返回finally里面的结果，避免该情况</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//FileNotFoundException extends IOException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//可能产生异常的代码</span></span><br><span class="line">            test002(<span class="string">&quot;c://a.tx&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;<span class="comment">//try中抛出什么异常对象，catch就定义什么异常变量，用来接收这个异常变量</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"><span class="comment">//            e.getMessage();</span></span><br><span class="line"><span class="comment">//            System.out.println(e.toString());</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;释放资源&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后续代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;后续代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断文件路径的合法性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test001</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">        <span class="comment">//判断路径</span></span><br><span class="line">        <span class="keyword">if</span>(!fileName.equals(<span class="string">&quot;c://a.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;找不到c:/a.txt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test002</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//判断后缀是不是.txt结尾</span></span><br><span class="line">        <span class="keyword">if</span>(!fileName.endsWith(<span class="string">&quot;.txt&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;文件不是以.txt结尾&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-异常的注意事项"><a href="#6-异常的注意事项" class="headerlink" title="6.异常的注意事项"></a>6.异常的注意事项</h4><p>(1).多个异常分别处理<br>(2).多个异常一次捕获，多次处理（注意：catch里面定义的异常变量，如果有子父类关系，那么子类的异常变量必须在上面，否则就会报错<br>ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException）<br>解析：try中如果出现了异常对象，会把异常对象抛出给catch处理，抛出的异常对象会从上往下依次赋值给catch中定义的异常变量。如果上面是父类的异常对象，抛出的异常对象都会赋值给父类的异常对象，子类的异常对象就不会被使用。（多态）<br>(3).一次捕获，一次处理（运行时异常被抛出可以不处理，即不捕获也不声明，默认给虚拟机处理，终止程序，什么时候不抛出运行时异常了，再继续执行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptiZhuYi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多个异常分别处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);<span class="comment">//ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            System.out.println(list.get(<span class="number">3</span>));<span class="comment">//IndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//多个异常一次捕获，多次处理</span></span><br><span class="line">        <span class="comment">//ArrayIndexOutOfBoundsException extends IndexOutOfBoundsException</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);<span class="comment">//ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">            List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            System.out.println(list.get(<span class="number">3</span>));<span class="comment">//IndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一次捕获，一次处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);<span class="comment">//ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">            List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            System.out.println(list.get(<span class="number">3</span>));<span class="comment">//IndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//运行时异常被抛出可以不处理，即不捕获也不声明</span></span><br><span class="line">        <span class="comment">//默认给虚拟机处理，终止程序，什么时候不抛出运行时异常了，再继续执行</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);<span class="comment">//ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">3</span>));<span class="comment">//IndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-子父类异常"><a href="#7-子父类异常" class="headerlink" title="7.子父类异常"></a>7.子父类异常</h4><p>  (1)如果父类抛出了多个异常，子类重写父类方法时，抛出和父类相同的异常或父类异常的子类或不抛出<br>  (2)父类方法没有抛出异常，子类重写父类方法时也不能抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出。<br>  注意：父类什么样子，子类就什么样子</p>
<h4 id="8-自定义异常类"><a href="#8-自定义异常类" class="headerlink" title="8.自定义异常类"></a>8.自定义异常类</h4><p><strong>格式:</strong> </p>
<blockquote>
<p>public class xxxException extends Exception|RuntimeException{<br> 添加一个空参数的构造方法<br> 添加一个带异常信息的构造方法<br> }</p>
</blockquote>
<p> <strong>注意：</strong></p>
<blockquote>
<p>(1).自定义异常类一般是以Exception结尾，说明该类是一个异常类<br>(2).自定义异常类必须继承Exception或RuntimeException<br>(3).继承Exception：要么自定义的异常类就是一个编译器异常类，如果方法内部抛出了编译器异常，就必须处理这个异常，要么throws，要么try..catch<br>(4).继承RuntimeException: 要么自定义的异常类就是一个运行期异常，无需处理，交给虚拟机处理。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="七-线程和进程"><a href="#七-线程和进程" class="headerlink" title="七. 线程和进程"></a>七. 线程和进程</h3><h4 id="1-并发和并行"><a href="#1-并发和并行" class="headerlink" title="1.并发和并行"></a>1.并发和并行</h4><p>并发：交替执行<br>并行：同时执行</p>
<h4 id="2-线程和进程"><a href="#2-线程和进程" class="headerlink" title="2.线程和进程"></a>2.线程和进程</h4><p>线程：是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>
<p>进程：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</p>
<h4 id="3-创建多线程"><a href="#3-创建多线程" class="headerlink" title="3.创建多线程"></a>3.创建多线程</h4><h5 id="a-创建多线程的第一种方式："><a href="#a-创建多线程的第一种方式：" class="headerlink" title="a.创建多线程的第一种方式："></a>a.创建多线程的第一种方式：</h5><p>​    1.创建Thread类的子类</p>
<p>​    2.在Thread类的子类中重写Thread类的run方法，设置线程任务</p>
<p>​    3.创建Thread类的子类对象</p>
<p>​    4.调用Thread类的start方法，开启新的线程，执行run方法</p>
<p>​    <strong>注意：</strong></p>
<p>​    public void start()</p>
<p>​    导致此线程开始执行;Java虚拟机调用此线程的<code>run</code>方法。</p>
<p>​    结果是两个线程同时运行：当前线程（从调用返回到start方法）和另一个线程（执行其run方法）。 </p>
<p>​    不止一次启动线程是不合法的。 特别地，一旦线程完成执行就可能不会重新启动。 </p>
<h5 id="b-创建线程的第二种方式："><a href="#b-创建线程的第二种方式：" class="headerlink" title="b.创建线程的第二种方式："></a>b.创建线程的第二种方式：</h5><p>​    1.创建runable接口的实现类</p>
<p>​    2.在实现类中重写runable接口的run方法 ，设置线程任务</p>
<p>​    3.创建runable接口的实现类对象</p>
<p>​    4.创建Thread类对象，构造方法中传递runable接口的实现类对象</p>
<p>​    5.调用Thread类对象的start方法，开启新线程执行run方法</p>
<h5 id="c-匿名内部类方式实现线程的创建"><a href="#c-匿名内部类方式实现线程的创建" class="headerlink" title="c.匿名内部类方式实现线程的创建"></a>c.匿名内部类方式实现线程的创建</h5><p><strong>匿名内部类作用：</strong>简化代码</p>
<p><strong>解析：</strong>把子类继承父类，重写父类的方法，创建子类对象合一步完成。</p>
<p>​                把实现类实现接口，重写接口中的方法，创建实现类对象合成一步完成。</p>
<p><strong>匿名内部类的最终产物：</strong>子类/实现类对象，而这个类没有名字。</p>
<p><strong>格式：</strong></p>
<p>new 父类/接口（）{</p>
<p>​    重写父类/接口中的方法</p>
<p>}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.threadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程的父类Thread</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="comment">//重写run方法，设置线程任务</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;  &quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="comment">//线程的接口Runnable</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;  &quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-Thread和Runable的区别"><a href="#4-Thread和Runable的区别" class="headerlink" title="4.Thread和Runable的区别"></a>4.Thread和Runable的区别</h4><p>​    实现Runnable接口创建多线程的好处：</p>
<p>​    1.避免了单线程的局限性（实现Runnable接口，还可以继承其他类，实现其他接口）</p>
<p>​    2.增强程序的扩展性，降低程序的耦合性（实现Runnable接口的方式，把设置线程任务和开启新线程进行了分离。实现类中重写了run方法：用来设置线程任务。创建Thread类对象，调用start方法，开启新的线程执行run方法）</p>
<h4 id="5-线程安全"><a href="#5-线程安全" class="headerlink" title="5.线程安全"></a>5.线程安全</h4><h5 id="1-线程安全"><a href="#1-线程安全" class="headerlink" title="1.线程安全"></a>1.线程安全</h5><ul>
<li>单线程程序是不会出现安全问题的</li>
<li>多线程程序，没有访问共享数据，不会产生问题</li>
<li>多线程访问了共享的数据，会产生线程安全问题</li>
</ul>
<h5 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2.线程同步"></a>2.线程同步</h5><p>有三种方式完成同步操作：</p>
<ul>
<li>同步代码块</li>
<li>同步方法</li>
<li>锁机制</li>
</ul>
<h5 id="3-同步代码块"><a href="#3-同步代码块" class="headerlink" title="3.同步代码块"></a>3.同步代码块</h5><p>synchronized关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。</p>
<p><strong>格式：</strong></p>
<blockquote>
<p>synchronized(同步锁){<br>需要同步操作的代码<br>}</p>
</blockquote>
<p>同步锁：对象的同步锁只是一个概念，可以想象为在对象上标记了一个锁。</p>
<p>1.锁对象可以是任意类型</p>
<p>2.多个线程对象 要使用同一把锁。</p>
<p>（注意：在任何时候，最多允许一个线程拥有同步锁，谁拿到锁就进入代码块，其他的线程只能在外面等着（BLOCKED））</p>
<h5 id="4-同步方法"><a href="#4-同步方法" class="headerlink" title="4.同步方法"></a>4.同步方法</h5><p><strong>格式：</strong></p>
<blockquote>
<p>修饰符 synchronized 返回值类型 方法名（参数列表）{<br>可能会出现线程安全问题的代码<br>}</p>
</blockquote>
<p><strong>解析：</strong>同步方法会把方法内部的代码锁住，只让一个线程执行，同步方法的锁对象就是实现类对象。</p>
<p><strong>4.1静态的同步方法</strong></p>
<p><strong>格式:</strong></p>
<blockquote>
<p>修饰符 static synchronized 返回值类型 方法名（参数列表）{<br>可能会出现线程安全问题的代码<br>}</p>
</blockquote>
<p><strong>解析：</strong>锁对象是谁？不能是this，this是创建对象之后产生的，静态方法优先于对象，静态方法的锁对象是本类的class属性–&gt;class文件对象（反射)</p>
<h5 id="5-Lock锁"><a href="#5-Lock锁" class="headerlink" title="5.Lock锁"></a>5.Lock锁</h5><p><strong>使用步骤：</strong></p>
<blockquote>
<p>1.在成员位置创建ReentrantLock对象<br>2.在可能会出现安全问题的代码前调用Lock接口中的lock方法获取锁。<br>3.在可能会出现安全问题的代码后调用Lock接口中的unlock方法释放锁。</p>
</blockquote>
<h4 id="6-线程状态"><a href="#6-线程状态" class="headerlink" title="6.线程状态"></a>6.线程状态</h4><h5 id="1-线程状态概述"><a href="#1-线程状态概述" class="headerlink" title="1.线程状态概述"></a>1.线程状态概述</h5><ul>
<li>NEW<br>至今尚未启动的线程处于这种状态。 </li>
<li>RUNNABLE<br>正在  Java 虚拟机中执行的线程处于这种状态。 </li>
<li>BLOCKED<br>受阻塞并等待某个监视器锁的线程处于这种状态。 </li>
<li>WAITING<br>无限期地等待另一个线程来执行某一特定操作的线程处于这种状态。 </li>
<li>TIMED_WAITING<br>等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。 </li>
<li>TERMINATED<br>已退出的线程处于这种状态。 </li>
</ul>
<p><img src="https://fanaidi.gitee.io/blogimgs/Java/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="线程状态图"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建锁对象保证唯一</span></span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="comment">//创建顾客线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;顾客：告知老板要的包子数量&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//唤醒之后执行的代码</span></span><br><span class="line">                System.out.println(<span class="string">&quot;顾客：开吃&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="comment">//创建老板线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                      System.out.println(<span class="string">&quot;老板：花了五秒做包子,做好之后，告知顾客可以吃了&quot;</span>);</span><br><span class="line">                      obj.notify();</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-调用wait和notify方法需要注意的细节"><a href="#7-调用wait和notify方法需要注意的细节" class="headerlink" title="7.调用wait和notify方法需要注意的细节"></a>7.调用wait和notify方法需要注意的细节</h4><blockquote>
<p>1.wait方法和notify方法必须由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。<br>2.wait方法和notify方法是属于Object类的方法。因为：锁对象可以是任意对象，而任意对象的所属类都是继承Object类<br>3.wait方法和notify方法必须要在同步代码块或是同步函数中使用。因为：必须通过锁对象调用这两个方法。</p>
</blockquote>
<h4 id="8-线程池"><a href="#8-线程池" class="headerlink" title="8.线程池"></a>8.线程池</h4><p><img src="https://fanaidi.gitee.io/blogimgs/Java/%E7%BA%BF%E7%A8%8B%E6%B1%A0.jpg"></p>
<p>线程池：JDK1.5之后提供的</p>
<p>java.util.concurrent.Executors：线程池的工厂类，用来生成线程池。</p>
<p>static ExecutorService newFixedThreadPool(int nThreads)<br>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。 </p>
<p><strong>线程池的使用步骤：</strong></p>
<ol>
<li>使用线程池的工厂类Executors里面提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池</li>
<li>创建一个类，实现Runnable接口，重写run方法，设置线程任务</li>
<li>调用ExecutorService中的方法submit，传递线程任务（实现类），开启线程，执行run方法</li>
<li>调用ExecutorService中的方法shutdown销毁线程池（不建议执行）</li>
</ol>
<h3 id="八-Lambda表达式"><a href="#八-Lambda表达式" class="headerlink" title="八.Lambda表达式"></a>八.Lambda表达式</h3><h4 id="Lambda表达式的标准格式"><a href="#Lambda表达式的标准格式" class="headerlink" title="Lambda表达式的标准格式"></a>Lambda表达式的标准格式</h4><blockquote>
<p>由三部分组成：<br>1.一些参数<br>2.一个箭头<br>3.一段代码<br>格式：（参数列表）-&gt;{重写方法的代码};<br>解析：<br>（）:接口中抽象方法的参数列表，没有参数，就空着，有参数就写出参数，多个参数使用逗号分隔，<br>-&gt;:传递的意思，把参数传递给方法体{}<br>{}:重写接口的抽象方法的方法体</p>
</blockquote>
<h4 id="Lambda表达式的省略格式"><a href="#Lambda表达式的省略格式" class="headerlink" title="Lambda表达式的省略格式"></a>Lambda表达式的省略格式</h4><p><strong>可以省略的内容：</strong></p>
<ol>
<li>（参数列表）：括号中参数列表的数据类型，可以省略不写</li>
<li>（参数列表）：括号中的参数如果只有一个，那么类型和（）都可以省略</li>
<li>{一些代码}：如果{}中的代码只有一行，无论是否有返回值，都可以省略（{}，return，分号）<br>注意：要省略{}，return，分号必须一起省略</li>
</ol>
<h4 id="Lambda表达式的使用前提"><a href="#Lambda表达式的使用前提" class="headerlink" title="Lambda表达式的使用前提"></a>Lambda表达式的使用前提</h4><ol>
<li>使用Lambda必须具有接口，且要求接口中有且仅有一个抽象方法。</li>
<li>使用Lambda必须具有上下文推断（也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为接口的实例）<br>注意：有且仅有一个方法的接口，称为函数式接口。</li>
</ol>
<h3 id="九-File类"><a href="#九-File类" class="headerlink" title="九.File类"></a>九.File类</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><blockquote>
<p>java.io.File类<br>文件和目录路径名的抽象表示形式。<br>Java把电脑中的文件和文件夹（目录）封装为了一个File类，我们可以使用File类对文件和文件夹进行操作<br>我们可以使用File类的方法：<br>1.创建一个文件/文件夹<br>2.删除一个文件/文件夹<br>3.获取一个文件/文件夹<br>4.判断文件夹是否存在<br>5.对文件夹进行遍历<br>6.获取文件的大小<br>注意：File类是一个与系统无关的类，任何的操作系统都可以使用这个类中的方法<br>重点：记住三个单词<br>file：文件<br>directory：文件夹/目录<br>path：路径</p>
</blockquote>
<h4 id="2-File类的静态成员变量"><a href="#2-File类的静态成员变量" class="headerlink" title="2.File类的静态成员变量"></a>2.File类的静态成员变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> String pathSeparator <span class="comment">//与系统有关的路径分隔符，为了方便，它被表示为一个字符串。路径分割符：windows(;)linux(:)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> pathSeparatorChar <span class="comment">//与系统有关的路径分隔符。 文件名称分隔符：windows(反斜杠\)linux(/)</span></span><br><span class="line"><span class="keyword">static</span> String separator <span class="comment">//与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。 windows(\)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> separatorChar <span class="comment">//与系统有关的默认名称分隔符。  windows(\)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-绝对路径和相对路径"><a href="#3-绝对路径和相对路径" class="headerlink" title="3.绝对路径和相对路径"></a>3.绝对路径和相对路径</h4><p><strong>绝对路径：</strong>是一个完整的路径（以盘符（C:/D:）开始的路径）<br><strong>相对路径：</strong>是一个简化的路径（相对路劲是相对于当前项目的根路径，路径可以简化书写）<br><strong>注意：</strong></p>
<ol>
<li>路径是不区分大小写的</li>
<li>路径中的文件名称分隔符，windows使用反斜杠（\），反斜杠是转义字符，两个反斜杠代表一个普通的反斜杠</li>
</ol>
<h4 id="4-File类的构造方法"><a href="#4-File类的构造方法" class="headerlink" title="4.File类的构造方法"></a>4.File类的构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。 </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意：参数:String pathname是字符串的路径名称</span></span><br><span class="line"><span class="comment">		 路径可以是以文件结尾，也可以是以文件夹结尾</span></span><br><span class="line"><span class="comment">		 路径可以是相对路径也可以是绝对路径</span></span><br><span class="line"><span class="comment">		 路径可以是存在的，也可以是不存在的</span></span><br><span class="line"><span class="comment">		 创建File对象，只是把字符串封装为File对象，不考虑路径的真假情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">File(String pathname) </span><br><span class="line">          </span><br><span class="line"><span class="comment">//根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。 </span></span><br><span class="line">File(File parent, String child) </span><br><span class="line">    </span><br><span class="line"><span class="comment">//根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。 </span></span><br><span class="line">File(String parent, String child) </span><br><span class="line">    </span><br><span class="line"><span class="comment">//通过将给定的 file: URI 转换为一个抽象路径名来创建一个新的 File 实例。           </span></span><br><span class="line">File(URI uri) </span><br></pre></td></tr></table></figure>

<h4 id="5-File类获取功能的方法"><a href="#5-File类获取功能的方法" class="headerlink" title="5.File类获取功能的方法"></a>5.File类获取功能的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无论构造方法中传递的是相对路径还是绝对路径，getAbsolutePath方法返回的都是绝对路径</span></span><br><span class="line">  <span class="function">String <span class="title">getAbsolutePath</span><span class="params">()</span>  <span class="comment">//抽象路径名的绝对路径名字符串。</span></span></span><br><span class="line"><span class="function"><span class="comment">//构造方法中传递的是什么，getPath方法返回的就是什么</span></span></span><br><span class="line"><span class="function">  String <span class="title">getPath</span><span class="params">()</span> <span class="comment">//抽象路径名转换为一个路径名字符串。 </span></span></span><br><span class="line"><span class="function"><span class="comment">//获取的就是构造方法中传递的路径的结尾部分（文件/文件夹）</span></span></span><br><span class="line"><span class="function">  String <span class="title">getName</span><span class="params">()</span> <span class="comment">//由此抽象路径名表示的文件或目录的名称。 </span></span></span><br><span class="line"><span class="function"><span class="comment">//获取文件的大小，以字节为单位，文件夹是没有大小概念的，不能获取文件夹的大小（返回的是0），如果路径不存在，则返回0</span></span></span><br><span class="line"><span class="function">  <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span> <span class="comment">//由此抽象路径名表示的文件的长度。 </span></span></span><br></pre></td></tr></table></figure>

<h4 id="6-File类判断功能的方法"><a href="#6-File类判断功能的方法" class="headerlink" title="6.File类判断功能的方法"></a>6.File类判断功能的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span> <span class="comment">//测试此抽象路径名表示的文件或目录是否存在。 </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span> <span class="comment">//测试此抽象路径名表示的文件是否是一个目录。 </span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span> <span class="comment">//测试此抽象路径名表示的文件是否是一个标准文件。 </span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h4 id="7-File类创建删除功能的方法"><a href="#7-File类创建删除功能的方法" class="headerlink" title="7.File类创建删除功能的方法"></a>7.File类创建删除功能的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此方法只能创建文件，不能创建文件夹，创建文件的路径必须存在，否则会抛出异常，如果文件存在，返回false</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span> <span class="comment">//当且仅当不存在具有此抽象路径名指定名称的文件时，不可分地创建一个新的空文件。</span></span></span><br><span class="line"><span class="function"><span class="comment">//----------------------------------------------------------------------------------------</span></span></span><br><span class="line"><span class="function"><span class="comment">//只能创建单级文件夹</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span> <span class="comment">//创建此抽象路径名指定的目录。 </span></span></span><br><span class="line"><span class="function"><span class="comment">//既可以创建单级，也可以创建多级</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span> <span class="comment">//创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。 </span></span></span><br><span class="line"><span class="function"><span class="comment">//返回值 true：文件不存在，创建文件，返回true   false：文件存在，不会创建，返回false</span></span></span><br><span class="line"><span class="function"><span class="comment">//注意：只能创建文件夹，不能创建文件，创建文件的路径必须存在，否则会抛出异常，如果文件存在，返回false</span></span></span><br><span class="line"><span class="function"><span class="comment">//-----------------------------------------------------------------------------</span></span></span><br><span class="line"><span class="function"><span class="comment">//文件/文件夹删除成功，返回true，文件夹中有内容，不会删除返回false，构造方法中路径不存在返回false</span></span></span><br><span class="line"><span class="function"><span class="comment">//删除成功后不会到回收站</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span> <span class="comment">//删除此抽象路径名表示的文件或目录。 </span></span></span><br></pre></td></tr></table></figure>

<h4 id="8-File类遍历目录功能"><a href="#8-File类遍历目录功能" class="headerlink" title="8.File类遍历目录功能"></a>8.File类遍历目录功能</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回File类型的数组，</span></span><br><span class="line">File[] listFiles() <span class="comment">//返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。 </span></span><br><span class="line"><span class="comment">//返回String类型的数组，数组中存储的是文件或文件夹的名称</span></span><br><span class="line">String[] list() <span class="comment">//返回一个字符串数组，这些字符串指定此抽象路径名表示的目录中的文件和目录。 </span></span><br><span class="line"><span class="comment">//注意：1. tFiles和list方法遍历的是构造方法中给出的目录。</span></span><br><span class="line"><span class="comment">//2.如果构造方法中给出的路径的目录不存在，会抛出空指针异常。</span></span><br><span class="line"><span class="comment">//3.如果构造方法中给出的路径不是一个目录，会抛出空指针异常。</span></span><br><span class="line"><span class="comment">//4.可以获取隐藏的文件或文件夹的名称</span></span><br></pre></td></tr></table></figure>

<h4 id="9-递归打印多级目录-amp-搜索文件"><a href="#9-递归打印多级目录-amp-搜索文件" class="headerlink" title="9.递归打印多级目录&amp;搜索文件"></a>9.递归打印多级目录&amp;搜索文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiWenJianJia</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\aaaaa&quot;</span>);</span><br><span class="line">        getAllFiles(file);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        getAppointFiles(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAppointFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file1.isDirectory()) &#123;</span><br><span class="line">                <span class="comment">//System.out.println(file1.getName());</span></span><br><span class="line">                getAllFiles(file1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//String path = file1.getPath();</span></span><br><span class="line">                <span class="comment">//String s = file1.toString();</span></span><br><span class="line">                String name = file1.getName();</span><br><span class="line">                <span class="keyword">boolean</span> b = name.endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (b) &#123;</span><br><span class="line">                    System.out.println(file1.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取要遍历的目录虾下面的所有文件和目录的名称</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file1.isDirectory()) &#123;</span><br><span class="line">                System.out.println(file1.getName());</span><br><span class="line">                getAllFiles(file1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(file1.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-FileFilter过滤器"><a href="#10-FileFilter过滤器" class="headerlink" title="10.FileFilter过滤器"></a>10.FileFilter过滤器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**FileFilter是用于抽象路径名的过滤器。是一个接口，有一个抽象方法accept。</span></span><br><span class="line"><span class="comment">*boolean accept(File pathname)测试指定抽象路径名是否应该包含在某个路径名列表中。 </span></span><br><span class="line"><span class="comment">*参数：File pathname：使用fileLists遍历目录，获取每个文件对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">File[] listFiles(FileFilter filter)<span class="comment">//返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*FilenameFilter 实现此接口的类实例可用于过滤器文件名。</span></span><br><span class="line"><span class="comment">*作用：用于过滤文件名称</span></span><br><span class="line"><span class="comment">*抽象方法：boolean accept(File dir, String name) 测试指定文件是否应该包含在某一文件列表中。</span></span><br><span class="line"><span class="comment">*参数：File dir：构造方法中传递的被遍历的目录， String name：使用fileLists遍历目录，获取每个文件/文件夹的名称</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">File[] listFiles(FilenameFilter filter)<span class="comment">//返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。 </span></span><br></pre></td></tr></table></figure>

<h5 id="1-使用FileFilter-FilenameFilter获取指定文件"><a href="#1-使用FileFilter-FilenameFilter获取指定文件" class="headerlink" title="1.使用FileFilter|FilenameFilter获取指定文件"></a>1.使用FileFilter|FilenameFilter获取指定文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用过滤器获取指定文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFilterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;D:\\aaaaa&quot;</span>);</span><br><span class="line">        getAppointFiles(file);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        getAppointFiles01(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAppointFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * FilenameFilter实现</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (pathname.isDirectory()) &#123;</span><br><span class="line">                    getAppointFiles(pathname);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> pathname.getName().toLowerCase().endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAppointFiles01</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * FilenameFilter实现</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        File[] files1 = dir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> File(dir,name).isDirectory())&#123;</span><br><span class="line">                    getAppointFiles(<span class="keyword">new</span> File(dir,name));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> name.toLowerCase().endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files1) &#123;</span><br><span class="line">            System.out.println(file1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十-IO流"><a href="#十-IO流" class="headerlink" title="十.IO流"></a>十.IO流</h3><h4 id="1-IO概述"><a href="#1-IO概述" class="headerlink" title="1.IO概述"></a>1.IO概述</h4><blockquote>
<p>i：input<br>o：output<br>流：数据（字符，字节）一个字符=2个字节 一个字节 = 8个二进制位<br>字节流的顶级父类：InputStream，OutputStream<br>字符流的顶级父类：Reader，Writer</p>
</blockquote>
<h4 id="2-字节输出流"><a href="#2-字节输出流" class="headerlink" title="2.字节输出流"></a>2.字节输出流</h4><h5 id="1-FileOutputStream"><a href="#1-FileOutputStream" class="headerlink" title="1.FileOutputStream"></a>1.FileOutputStream</h5><p><strong>构造方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileOutputStream(String name)<span class="comment">//创建一个向具有指定名称的文件中写入数据的输出文件流。</span></span><br><span class="line">FileOutputStream(File file) <span class="comment">//创建一个向指定 File 对象表示的文件中写入数据的文件输出流。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：写入数据的目的地</span></span><br><span class="line"><span class="comment">     String name 目的地是一个文件的路径</span></span><br><span class="line"><span class="comment">     File file 目的地是一个文件</span></span><br><span class="line"><span class="comment">作用： 1.创建一个FileOutputStream对象</span></span><br><span class="line"><span class="comment">      2.会根据构造方法中传递的文件/文件路径，创建一个空的文件</span></span><br><span class="line"><span class="comment">      3.会把FileOutputStream对象指向创建好的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>字节输出流的使用步骤：</strong></p>
<ol>
<li>创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</li>
<li>调用FileOutputStream对象中的方法write，把数据写入文件中</li>
<li>释放资源（流使用会占用一定的内存，使用完毕要把内存清空，提高程序的效率）</li>
</ol>
<p><strong>write方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一次写多个字节，如果写的第一个字节是正数（0-127），那么显示的时候会查询ASCII表，如果写的第一个字节是负数，那么第一个字节会和第二个字节，两个字节一起组成一个中文显示，查询系统默认码表（GBK）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="comment">//将 b.length 个字节从指定 byte 数组写入此文件输出流中。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="comment">//将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="comment">//将指定字节写入此文件输出流。 </span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<p><strong>字节输出流的追加写和换行</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileOutputStream(String name, <span class="keyword">boolean</span> append) <span class="comment">//创建一个向具有指定 name 的文件中写入数据的输出文件流。</span></span><br><span class="line">FileOutputStream(File file, <span class="keyword">boolean</span> append) <span class="comment">//创建一个向指定 File 对象表示的文件中写入数据的文件输出流。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：String name，File file 写入数据的目的地</span></span><br><span class="line"><span class="comment">    boolean append：追加写开关</span></span><br><span class="line"><span class="comment">    true：创建对象不会覆盖源文件，继续在文件的末尾追加写数据</span></span><br><span class="line"><span class="comment">    false：创建一个新文件，覆盖原文件</span></span><br><span class="line"><span class="comment">写换行：换行符号</span></span><br><span class="line"><span class="comment">    windows：\r\n</span></span><br><span class="line"><span class="comment">    linux:/n</span></span><br><span class="line"><span class="comment">    mac:/r</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src\\a.txt&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        fileOutputStream.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fileOutputStream.write(<span class="string">&quot;你好&quot;</span>.getBytes());</span><br><span class="line">            fileOutputStream.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-字节输入流"><a href="#3-字节输入流" class="headerlink" title="3.字节输入流"></a>3.字节输入流</h4><h5 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h5><p><strong>作用：</strong>把硬盘中的数据读取到内存中使用</p>
<p><strong>注意：</strong>一个中文：GBK（2个字节），UTF-8（3个字节）</p>
<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream(File file) <span class="comment">//通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的 File 对象 file 指定。</span></span><br><span class="line">FileInputStream(String name)<span class="comment">//通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的路径名 name 指定。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：String name 文件的路径</span></span><br><span class="line"><span class="comment">     File file 文件</span></span><br><span class="line"><span class="comment">作用：1.会创建FileInputStream对象</span></span><br><span class="line"><span class="comment">     2.会把FileInputStream对象指定构造方法中要读取的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>字节输入流的使用步骤：</strong></p>
<blockquote>
<p>1.创建一个FileInputStream对象，构造方法中绑定要读取的数据源<br>2.调用FileInputStream对象中的方法read，读取文件<br>3.释放资源</p>
</blockquote>
<p><strong>read方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取一个字节，读到文件的末尾返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span><span class="comment">//从此输入流中读取一个数据字节。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="comment">//从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。 </span></span></span><br><span class="line"><span class="function"><span class="comment">/*参数 byte[] b的作用：起到缓冲作用，存储每次读取到的多个字节</span></span></span><br><span class="line"><span class="comment"><span class="function">       数组的长度一般定义为1024或者1024的整数倍</span></span></span><br><span class="line"><span class="comment"><span class="function">  方法的返回值int是什么？每次读取的有效字节个数</span></span></span><br><span class="line"><span class="comment"><span class="function">*/</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//固定写法</span></span><br><span class="line">        <span class="keyword">while</span>((len = fileInputStream.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src\\a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fileInputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>文件复制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;d:\\1.jpg&quot;</span>);</span><br><span class="line">        FileOutputStream fos  =<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\aaaaa\\2.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-字符流"><a href="#4-字符流" class="headerlink" title="4.字符流"></a>4.字符流</h4><h5 id="1-Reader"><a href="#1-Reader" class="headerlink" title="1.Reader"></a>1.Reader</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Reader：是抽象类，是字符输入流的超类</span><br></pre></td></tr></table></figure>

<p><strong>共性的成员方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="comment">//读取单个字符。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span> <span class="comment">//将字符读入数组。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="comment">//关闭该流并释放与之关联的所有资源。 </span></span></span><br></pre></td></tr></table></figure>

<h5 id="2-FileReader-文件字符输入流"><a href="#2-FileReader-文件字符输入流" class="headerlink" title="2.FileReader(文件字符输入流)"></a>2.FileReader(文件字符输入流)</h5><p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileReader(String fileName)  在给定从中读取数据的文件名的情况下创建一个新 FileReader。</span><br><span class="line">FileReader(File file)<span class="comment">//在给定从中读取数据的 File 的情况下创建一个新 FileReader。</span></span><br><span class="line"><span class="comment">//参数：读取的数据源 String fileName：文件的路径 File file 一个文件</span></span><br><span class="line"><span class="comment">//作用：1.会创建一个FileReader对象 2.会把FileReader对象指向要读取的文件</span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建一个FileReader对象，构造方法中绑定要读取的数据源</li>
<li>调用FileInputStream对象中的方法read，读取文件</li>
<li>释放资源</li>
</ol>
<h5 id="3-Writer"><a href="#3-Writer" class="headerlink" title="3.Writer"></a>3.Writer</h5><blockquote>
<p>Writer:是抽象类，是字符输出流的超类</p>
</blockquote>
<p><strong>共性的成员方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="comment">//关闭此流，但要先刷新它。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="comment">//刷新该流的缓冲。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span> <span class="comment">//写入字符数组。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="comment">//写入字符数组的某一部分。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span> <span class="comment">//写入单个字符。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span> <span class="comment">//写入字符串。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String str, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="comment">//写入字符串的某一部分。 </span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h5 id="4-FileWriter（文件字符输出流）"><a href="#4-FileWriter（文件字符输出流）" class="headerlink" title="4.FileWriter（文件字符输出流）"></a>4.FileWriter（文件字符输出流）</h5><p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileWriter(File file) <span class="comment">//根据给定的 File 对象构造一个 FileWriter 对象。</span></span><br><span class="line">FileWriter(String fileName) <span class="comment">//根据给定的文件名构造一个 FileWriter 对象。</span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建一个FileWriter对象，构造方法中绑定要写入数据的目的地</li>
<li>调用FileWriter对象中的方法write，把数据写入内存缓冲区（字符转换为字节的过程）</li>
<li>使用FileWriter中的方法flush，把内存缓冲区的数据，刷新到文件中</li>
<li>释放资源（会先把内存缓冲区的数据刷新到文件中）</li>
</ol>
<p><strong>flush和close方法的区别</strong></p>
<p>**flush:**刷新缓冲区，流对象可以继续使用<br><strong>close：</strong>先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了</p>
<p><strong>字符流的续写和换行</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileWriter(File file, <span class="keyword">boolean</span> append) <span class="comment">//根据给定的 File 对象构造一个 FileWriter 对象。</span></span><br><span class="line">FileWriter(String fileName, <span class="keyword">boolean</span> append) <span class="comment">//根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：String name，File file 写入数据的目的地</span></span><br><span class="line"><span class="comment">    boolean append：追加写开关</span></span><br><span class="line"><span class="comment">    true：创建对象不会覆盖源文件，继续在文件的末尾追加写数据</span></span><br><span class="line"><span class="comment">    false：创建一个新文件，覆盖原文件</span></span><br><span class="line"><span class="comment">写换行：换行符号</span></span><br><span class="line"><span class="comment">    windows：\r\n</span></span><br><span class="line"><span class="comment">    linux:/n</span></span><br><span class="line"><span class="comment">    mac:/r</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="5-Properties集合"><a href="#5-Properties集合" class="headerlink" title="5.Properties集合"></a>5.Properties集合</h4><blockquote>
<p>Properties集合是一个唯一和IO流相结合的集合，属性列表中每个键值对都是一个字符串，Properties集合是双列集合，key和value默认是字符串。<br>可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储。<br>可以使用Properties集合中的方法load，把硬盘中保存的文件（键值对），读取到集合中使用。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">setProperty</span><span class="params">(String key, String value)</span> <span class="comment">//调用 Hashtable 的方法 put。 </span></span></span><br><span class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key)</span><span class="comment">//用指定的键在此属性列表中搜索属性。 </span></span></span><br><span class="line"><span class="function">Set&lt;String&gt; <span class="title">stringPropertyNames</span><span class="params">()</span> <span class="comment">//返回此属性列表中的键集，其中该键及其对应值是字符串，如果在主属性列表中未找到同名的键，则还包括默认属性列表中不同的键。 </span></span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建Properties对象，添加数据</li>
<li>创建字节/字符输出流，对象，构造方法中绑定要输出的目的地</li>
<li>使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</li>
<li>释放资源</li>
</ol>
<p><strong>Properties集合中的store方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;2001&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;2002&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;2003&quot;</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        FileWriter fileWriter = <span class="keyword">new</span> FileWriter(<span class="string">&quot;src/com/company/propertiesdemo/a.txt&quot;</span>);</span><br><span class="line">        properties.store(fileWriter,<span class="string">&quot;save file&quot;</span>);</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Properties集合中的load方法</strong></p>
<p><strong>使用步骤</strong></p>
<ol>
<li>创建Properties对象</li>
<li>使用Properties集合对象中的方法load读取保存键值对的文件</li>
<li>遍历Properties集合</li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li>存储键值对的文件中，键与值的默认的连接符号可以使用=，空格（其他符号）</li>
<li>存储键值对的文件中，可以使用#进行注释，被注释的键值对不会再被读取</li>
<li>存储键值对的文件中，键与值默认都是字符串，不用再加上引号</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(<span class="keyword">new</span> FileReader(<span class="string">&quot;src/com/company/propertiesdemo/a.txt&quot;</span>));</span><br><span class="line">        Set&lt;String&gt; set = properties.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">            String value = properties.getProperty(key);</span><br><span class="line">            System.out.println(<span class="string">&quot;key:&quot;</span>+key+<span class="string">&quot;value:&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-缓冲流"><a href="#6-缓冲流" class="headerlink" title="6.缓冲流"></a>6.缓冲流</h4><h5 id="1-BufferedOutputStream-字节缓冲输出流"><a href="#1-BufferedOutputStream-字节缓冲输出流" class="headerlink" title="1.BufferedOutputStream(字节缓冲输出流)"></a>1.BufferedOutputStream(字节缓冲输出流)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedOutputStreamextends</span> <span class="title">FilterOutputStream</span></span></span><br><span class="line"><span class="class">//该类实现缓冲的输出流。通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。 </span></span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedOutputStream(OutputStream out) <span class="comment">//创建一个新的缓冲输出流，以将数据写入指定的底层输出流。 </span></span><br><span class="line">BufferedOutputStream(OutputStream out, <span class="keyword">int</span> size) <span class="comment">//创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*参数：OutputStream out：字节输出流 我们可以传递FileOutputStream，缓冲流会给FileOutputStream增加一个缓冲区，提高File 	*	  OutputStream对象效率，int size：指定缓冲流内部缓冲区的大小，把数据写入内部缓冲区中。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建FileOutputStream，构造方法中绑定要输出的目的地。</li>
<li>创建BufferedOutputStream，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</li>
<li>使用BufferedOutputStream对象中的write方法，把数据写入内部缓冲区中</li>
<li>使用BufferedOutputStream对象中的方法flush，把内部缓冲区中的数据，刷新到文件中</li>
<li>释放资源（会先调用flush方法刷新数据，第四步可以省略）</li>
</ol>
<h5 id="2-BufferedInputStream-字节缓冲输入流"><a href="#2-BufferedInputStream-字节缓冲输入流" class="headerlink" title="2.BufferedInputStream(字节缓冲输入流)"></a>2.BufferedInputStream(字节缓冲输入流)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedInputStreamextends</span> <span class="title">FilterInputStream</span></span></span><br><span class="line"><span class="class">//<span class="title">BufferedInputStream</span> 为另一个输入流添加一些功能，即缓冲输入以及支持 <span class="title">mark</span> 和 <span class="title">reset</span> 方法的能力。在创建 <span class="title">BufferedInputStream</span> 时，会创建一个内部缓冲区数组。在读取或跳过流中的字节时，可根据需要从包含的输入流再次填充该内部缓冲区，一次填充多个字节。<span class="title">mark</span> 操作记录输入流中的某个点，<span class="title">reset</span> 操作使得在从包含的输入流中获取新字节之前，再次读取自最后一次 <span class="title">mark</span> 操作后读取的所有字节。</span></span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedInputStream(InputStream in) <span class="comment">//创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。 </span></span><br><span class="line">BufferedInputStream(InputStream in, <span class="keyword">int</span> size) <span class="comment">//创建具有指定缓冲区大小的 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*参数：InputStream in：字节输入流</span></span><br><span class="line"><span class="comment">	我们可以传递FileInputStream，缓冲流会给FileInputStream增加一个缓冲区，提高FileInputStream对象效率</span></span><br><span class="line"><span class="comment">	int size：指定缓冲流内部缓冲区的大小，不指定默认</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建FileInputStream，构造方法中绑定要读取的数据源。</li>
<li>创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象效率</li>
<li>使用BufferedInputStream对象中的read方法，读取文件</li>
<li>释放资源（）</li>
</ol>
<h5 id="3-BufferedWriter-字符缓冲输出流"><a href="#3-BufferedWriter-字符缓冲输出流" class="headerlink" title="3.BufferedWriter(字符缓冲输出流)"></a>3.BufferedWriter(字符缓冲输出流)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriter</span> <span class="keyword">extends</span> <span class="title">Writer</span></span></span><br><span class="line"><span class="class">//将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。 </span></span><br><span class="line"><span class="class">//可以指定缓冲区的大小，或者接受默认的大小。在大多数情况下，默认值就足够大了。 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//该类提供了 <span class="title">newLine</span>() 方法，它使用平台自己的行分隔符概念，此概念由系统属性 <span class="title">line</span>.<span class="title">separator</span> 定义。并非所有平台都使用新行符 (&#x27;\<span class="title">n</span>&#x27;) 来终止各行。因此调用此方法来终止每个输出行要优于直接写入新行符。 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedWriter(Writer out) <span class="comment">//创建一个使用默认大小输出缓冲区的缓冲字符输出流。 </span></span><br><span class="line">BufferedWriter(Writer out, <span class="keyword">int</span> sz) <span class="comment">//创建一个使用给定大小输出缓冲区的新缓冲字符输出流。 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*参数：Writer out：字符输出流</span></span><br><span class="line"><span class="comment">	我们可以传递FileWriter，缓冲流会给FileWriter增加一个缓冲区，提高FileWriter对象效率</span></span><br><span class="line"><span class="comment">	int size：指定缓冲流内部缓冲区的大小，不指定默认</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>特有的成员方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newLine</span><span class="params">()</span> <span class="comment">//写入一个行分隔符。 会根据不同的系统，获取不同的分隔符</span></span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建字符缓冲输出流对象，构造方法中传递字符输出流</li>
<li>调用字符缓冲输出流中的方法write，把数据写入到内存缓冲区中</li>
<li>调用字符缓冲输出流中的方法flush，把内部缓冲区中的数据，刷新到文件中</li>
<li>释放资源</li>
</ol>
<h5 id="4-BufferedReader"><a href="#4-BufferedReader" class="headerlink" title="4.BufferedReader"></a>4.BufferedReader</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReader</span> <span class="keyword">extends</span> <span class="title">Reader</span></span></span><br><span class="line"><span class="class">//从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了。 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//通常，<span class="title">Reader</span> 所作的每个读取请求都会导致对底层字符或字节流进行相应的读取请求。因此，建议用 <span class="title">BufferedReader</span> 包装所有其 <span class="title">read</span>() 操作可能开销很高的 <span class="title">Reader</span>（如 <span class="title">FileReader</span> 和 <span class="title">InputStreamReader</span>）。</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader(Reader in) <span class="comment">//创建一个使用默认大小输入缓冲区的缓冲字符输入流。 </span></span><br><span class="line">BufferedReader(Reader in, <span class="keyword">int</span> sz) <span class="comment">//创建一个使用指定大小输入缓冲区的缓冲字符输入流。 </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*参数：Reader in：字符输入流</span></span><br><span class="line"><span class="comment">	我们可以传递FileReader，缓冲流会给FileReader增加一个缓冲区，提高FileReader对象效率</span></span><br><span class="line"><span class="comment">	int size：指定缓冲流内部缓冲区的大小，不指定默认</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>特有的成员方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">readLine</span><span class="params">()</span> <span class="comment">// 读取一个文本行。 </span></span></span><br><span class="line"><span class="function"><span class="comment">//读取一个文本行。通过下列字符之一即可认为某行已终止：换行 (&#x27;\n&#x27;)、回车 (&#x27;\r&#x27;) 或回车后直接跟着换行。 </span></span></span><br><span class="line"><span class="function"><span class="comment">//返回：包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null </span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建字符缓冲输入流对象，构造方法中传递字符输入流</li>
<li>调用字符缓冲输出流中的方法read/readline读取文本</li>
<li>释放资源</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;src/a.txt&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-转换流"><a href="#7-转换流" class="headerlink" title="7.转换流"></a>7.转换流</h4><h5 id="1-OutputStreamWriter"><a href="#1-OutputStreamWriter" class="headerlink" title="1.OutputStreamWriter"></a>1.OutputStreamWriter</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamWriter</span> <span class="keyword">extends</span> <span class="title">Writer</span></span></span><br><span class="line"><span class="class">//<span class="title">OutputStreamWriter</span> 是字符流通向字节流的桥梁：可使用指定的 <span class="title">charset</span> 将要写入流中的字符编码成字节。它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//每次调用 <span class="title">write</span>() 方法都会导致在给定字符（或字符集）上调用编码转换器。在写入底层输出流之前，得到的这些字节将在缓冲区中累积。可以指定此缓冲区的大小，不过，默认的缓冲区对多数用途来说已足够大。注意，传递给 <span class="title">write</span>() 方法的字符没有缓冲。 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStreamWriter(OutputStream out) <span class="comment">//创建使用默认字符编码的 OutputStreamWriter。</span></span><br><span class="line">OutputStreamWriter(OutputStream out, String charsetName) <span class="comment">//创建使用指定字符集的 OutputStreamWriter。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*参数：OutputStream out：字节输出流，可以用来写转换之后的字节到文件中</span></span><br><span class="line"><span class="comment">*	  String charsetName：指定的编码表名称，不区分大小写，可以是utf-8/UTF-8，gbk/GBK..,不指定默认utf-8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建OutputStreamWriter对象，构造方法中传递字节输出流和指定的编码表名称</li>
<li>使用OutputStreamWriter对象中的方法write，把字符转换为字节存储到缓冲区中（编码）</li>
<li>使用OutputStreamWriter对象中的方法flush，把内存缓冲区中的字节刷新到文件中（使用字节流写字节的过程）</li>
<li>释放资源</li>
</ol>
<h5 id="2-InputStreamReader"><a href="#2-InputStreamReader" class="headerlink" title="2.InputStreamReader"></a>2.InputStreamReader</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReader</span> <span class="keyword">extends</span> <span class="title">Reader</span></span></span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStreamReader(InputStream in) <span class="comment">//创建一个使用默认字符集的 InputStreamReader。</span></span><br><span class="line">InputStreamReader(InputStream in, String charsetName) <span class="comment">//创建使用指定字符集的 InputStreamReader。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*参数：InputStream in：字节输入流，用来读取文件中保存的字节</span></span><br><span class="line"><span class="comment">*	  String charsetName：指定的编码表名称，不区分大小写，可以是utf-8/UTF-8，gbk/GBK..,不指定默认utf-8</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建InputStreamReader对象，构造方法中传递字节输出流和指定的编码表名称</li>
<li>使用InputStreamReader对象中的方法read读取文件</li>
<li>释放资源</li>
</ol>
<h4 id="8-序列化和反序列化"><a href="#8-序列化和反序列化" class="headerlink" title="8.序列化和反序列化"></a>8.序列化和反序列化</h4><blockquote>
<p>序列化：序列化就是指把对象转换为字节序列的过程<br>反序列化：把字节序列恢复为对象的过程。</p>
</blockquote>
<p><strong>注意</strong></p>
<blockquote>
<p>序列化和反序列化的时候，会抛出NotSerializableException（没有序列化异常）<br>类通过实现 java.io.Serializable 接口以启用其序列化功能。<br>Serializable接口也叫标记型接口<br>    要进行序列化和反序列化的时候，就会检测类上是否有这个标记<br>    有：就会序列化和反序列化<br>    没有：就会抛出NotSerializableException</p>
</blockquote>
<h5 id="1-ObjectOutputStream"><a href="#1-ObjectOutputStream" class="headerlink" title="1.ObjectOutputStream"></a>1.ObjectOutputStream</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStream</span> <span class="keyword">extends</span> <span class="title">OutputStream</span> <span class="keyword">implements</span> <span class="title">ObjectOutput</span>, <span class="title">ObjectStreamConstants</span></span></span><br><span class="line"><span class="class">//<span class="title">ObjectOutputStream</span> 将 <span class="title">Java</span> 对象的基本数据类型和图形写入 <span class="title">OutputStream</span>。可以使用 <span class="title">ObjectInputStream</span> 读取（重构）对象。通过在流中使用文件可以实现对象的持久存储。如果流是网络套接字流，则可以在另一台主机上或另一个进程中重构对象。 </span></span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectOutputStream(OutputStream out) <span class="comment">//创建写入指定 OutputStream 的 ObjectOutputStream。</span></span><br></pre></td></tr></table></figure>

<p><strong>特有的成员方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object obj)</span> <span class="comment">//将指定的对象写入 ObjectOutputStream。 </span></span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建ObjectOutputStream对象，构造方法中传递字节输出流</li>
<li>使用ObjectOutputStream对象中的writeObject方法，把对象写到文件中</li>
<li>释放资源</li>
</ol>
<h5 id="2-ObjectInputStream"><a href="#2-ObjectInputStream" class="headerlink" title="2.ObjectInputStream"></a>2.ObjectInputStream</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">ObjectInput</span>, <span class="title">ObjectStreamConstants</span> //<span class="title">ObjectInputStream</span> 对以前使用 <span class="title">ObjectOutputStream</span> 写入的基本数据和对象进行反序列化。 </span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream(InputStream in) <span class="comment">//创建从指定 InputStream 读取的 ObjectInputStream。</span></span><br><span class="line"><span class="comment">//参数：InputStream in：字节输入流</span></span><br></pre></td></tr></table></figure>

<p><strong>特有的成员方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">readObject</span><span class="params">()</span> <span class="comment">//从 ObjectInputStream 读取对象。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span></span><br><span class="line"><span class="function"><span class="comment">//声明抛出了IOException,ClassNotFoundException</span></span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建ObjectInputStream对象，构造方法中传递字节输入流</li>
<li>使用ObjectInputStream对象中的方法readObject，读取保存对象的文件</li>
<li>释放资源</li>
<li>使用读取出来的对象（打印）</li>
</ol>
<p><strong>反序列化的前提</strong></p>
<ol>
<li>类必须实现Serializable</li>
<li>必须存在类对应的class文件</li>
</ol>
<h5 id="3-transient关键字"><a href="#3-transient关键字" class="headerlink" title="3.transient关键字"></a>3.transient关键字</h5><blockquote>
<p>被transient关键字修饰的成员变量，不能被序列化</p>
</blockquote>
<h4 id="9-PrintStream（打印流）"><a href="#9-PrintStream（打印流）" class="headerlink" title="9.PrintStream（打印流）"></a>9.PrintStream（打印流）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStream</span> <span class="keyword">extends</span> <span class="title">FilterOutputStream</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CloseablePrintStream</span> </span></span><br><span class="line"><span class="class">//为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式。</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

<p><strong>特点</strong></p>
<ol>
<li>只负责数据的输出，不负责数据的读取</li>
<li>与其他输出流不同，    PrintStream永远不会抛出IOException</li>
</ol>
<p><strong>特有的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> print（任意类型的值） </span><br><span class="line"><span class="keyword">void</span> println（任意类型的值并换行）</span><br></pre></td></tr></table></figure>

<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintStream(File file) <span class="comment">//创建具有指定文件且不带自动行刷新的新打印流。</span></span><br><span class="line">PrintStream(OutputStream out) <span class="comment">//创建新的打印流。 </span></span><br><span class="line">PrintStream(String fileName) <span class="comment">//创建具有指定文件名称且不带自动行刷新的新打印流。</span></span><br></pre></td></tr></table></figure>

<p><strong>继承自父类的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] buf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="comment">//将 len 字节从指定的初始偏移量为 off 的 byte 数组写入此流。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="comment">//将指定的字节写入此流。 </span></span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ol>
<li>如果使用继承自父类的write方法写数据，那么查看数据的时候会查询编码表 97-&gt;a</li>
<li>如果使用自己特有的方法print/println方法写数据，写的数据原样输出 97-&gt;97</li>
</ol>
<h3 id="十一-网络编程"><a href="#十一-网络编程" class="headerlink" title="十一.网络编程"></a>十一.网络编程</h3><h4 id="1-软件结构"><a href="#1-软件结构" class="headerlink" title="1.软件结构"></a>1.软件结构</h4><blockquote>
<p>C/S: C是英文单词“Client”的首字母，即客户端的意思，C/S就是“Client/Server”的缩写，即“客户端/服务器”模式。<br>B/S: B是英文单词“Browser”的首字母，即浏览器的意思；S是英文单词“Server”的首字母，即服务器的意思。B/S就是“Browser/Server”的缩写，即“浏览器/服务器”模式。</p>
</blockquote>
<h4 id="2-网络通信协议"><a href="#2-网络通信协议" class="headerlink" title="2.网络通信协议"></a>2.网络通信协议</h4><p><strong>概念</strong></p>
<blockquote>
<p>网络通信协议是一种网络通用语言，为连接不同操作系统和不同硬件体系结构的互联网络引提供通信支持，是一种网络通用语言。<br>网络通信协议由三个要素组成：<br>语义，解释控制信息每个部分的意义。它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应。<br>语法，用户数据与控制信息的结构与格式，以及数据出现的顺序。<br>时序，对事件发生顺序的详细说明。<br>可以形象地把这三个要素描述为：语义表示要做什么，语法表示要怎么做，时序表示做的顺序。</p>
</blockquote>
<h5 id="1-TCP-IP协议"><a href="#1-TCP-IP协议" class="headerlink" title="1.TCP/IP协议"></a>1.TCP/IP协议</h5><blockquote>
<p>  TCP/IP（Transmission Control Protocol/Internet Protocol,传输控制协议/网际协议） 协议具有很强的灵活性，支持任意规模的网络，几乎可连接所有服务器和工作站。在使用TCP/IP协议时需要进行复杂的设置，每个结点至少需要一个“IP地址”、一个“子网掩码”、一个“默认网关”、一个“主机名”，对于一些初学者来说使用不太方便。<br>  TCP/IP参考模型是首先由ARPANET所使用的网络体系结构，共分为四层：网络接口层（又称链路层）、网络层（又称互联层）、传输层和应用层，每一层都呼叫它的下一层所提供的网络来完成自己的需求。<br>  每一层对应的协议有：<br>1.网络接口层协议：Ethernet 802.3、Token Ring 802.5、X.25、Frame relay、HDLC、PPP ATM等。<br>2.网络层协议：IP（Internet Protocol，英特网协议）、ICMP（Internet Control Message Protocol，控制报文协议）、ARP（Address Resolution Protocol，地址转换协议）、RARP（Reverse ARP，反向地址转换协议）。<br>3.传输层协议： TCP（Transmission Control Protocol，传输控制协议）和UDP（User Datagram protocol，用户数据报协议）。<br>4.应用层协议：FTP（File Transfer Protocol，文件传输协议）、TELNET（用户远程登录服务协议）、DNS（Domain Name Service，是域名解析服务）、SMTP（Simple Mail Transfer Protocol，简单邮件传输协议）、NFS（Network File System，网络文件系统）、HTTP（Hypertext Transfer Protocol，超文本传输协议）。</p>
</blockquote>
<h5 id="2-协议的分类"><a href="#2-协议的分类" class="headerlink" title="2.协议的分类"></a>2.协议的分类</h5><p><strong>TCP</strong></p>
<blockquote>
<p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议</p>
</blockquote>
<p><strong>UTP</strong></p>
<blockquote>
<p>UDP 是User Datagram Protocol的简称， 中文名是用户数据报协议，是OSI（Open System Interconnection，开放式系统互联） 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务</p>
</blockquote>
<h4 id="3-网络编程三要素"><a href="#3-网络编程三要素" class="headerlink" title="3.网络编程三要素"></a>3.网络编程三要素</h4><h5 id="1-协议"><a href="#1-协议" class="headerlink" title="1.协议"></a>1.协议</h5><blockquote>
<p>计算机网络通信必须必须遵守的规则</p>
</blockquote>
<h5 id="2-IP地址"><a href="#2-IP地址" class="headerlink" title="2.IP地址"></a>2.IP地址</h5><blockquote>
<p>IP地址（Internet Protocol Address）是指互联网协议地址，又译为网际协议地址。<br>IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。</p>
</blockquote>
<h5 id="3-端口号"><a href="#3-端口号" class="headerlink" title="3.端口号"></a>3.端口号</h5><blockquote>
<p>所谓的端口，就好像是门牌号一样，客户端可以通过ip地址找到对应的服务器端，但是服务器端是有很多端口的，每个应用程序对应一个端口号，通过类似门牌号的端口号，客户端才能真正的访问到该服务器。为了对端口进行区分，将每个端口进行了编号，这就是端口号</p>
</blockquote>
<p><strong>注意</strong></p>
<ol>
<li>1024之前的端口号我们不能使用，已经被系统分配给已知的网络软件了</li>
<li>网络软件的端口号不能重复</li>
<li>端口号由两个字节组成，取值范围在0-65535之间</li>
</ol>
<p><strong>常用的端口号</strong></p>
<ol>
<li>80端口 网络端口 <a href="http://www.baidu.com/">www.baidu.com:80</a> 正确的网址  <a href="http://www.baidu.com:70/">www.baidu.com:70</a> 错误的网址</li>
<li>数据库  mysql：3306   Oracle：1512</li>
<li>Tomcat服务器：8080</li>
</ol>
<h4 id="4-TCP通信程序"><a href="#4-TCP通信程序" class="headerlink" title="4.TCP通信程序"></a>4.TCP通信程序</h4><h5 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h5><blockquote>
<p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端（Client）和服务端（Server）</p>
</blockquote>
<p><strong>通信的步骤</strong></p>
<p>服务器端先启动<br>服务器端不会主动请求客户端<br>必需使用客户端请求服务器端<br>客户端和服务器端就会建立一个逻辑连接<br>而这个连接包含一个对象<br>这个对象就是IO对象<br>客户端和服务器端就可以使用<br>IO对象进行通信<br>通信的数据不仅仅是字符<br>所以IO对象是字节流对象</p>
<p><strong>服务器必须明确两件事情</strong></p>
<ol>
<li>多个客户端同时和服务器进行交互，服务器必须明确和哪个客户端进行的交互，在服务器端有一个方法，叫accept客户端获取到请求的客户端对象</li>
<li>多个客户端同时和服务器端进行交互，就需要使用多个IO流对象<br>服务器是没有IO流的，服务器可以获取到请求的客户端对象Socket<br>使用每个客户端Socket中提供的IO流和客户端进行交互<br>服务器端使用客户端的字节输入流读取客户端发送的数据<br>服务器端使用客户端的字节输出流给客户端回写数据<br>简单记：服务器使用客户端的流和客户端交互</li>
</ol>
<h5 id="2-TCP通信的客户端"><a href="#2-TCP通信的客户端" class="headerlink" title="2.TCP通信的客户端"></a>2.TCP通信的客户端</h5><blockquote>
<p>TCP通信的客户端:向服务器发送连接请求，给服务器发送数据，读取服务器回写的数据</p>
</blockquote>
<p><strong>表示客户端的类</strong></p>
<blockquote>
<p>java.net.Socket:此类实现客户端套接字（也可以叫”套接字”）。套接字是两台机器间通信的端点<br>套接字包含了IP地址和端口号的网络单位</p>
</blockquote>
<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket(String host, <span class="keyword">int</span> port) <span class="comment">//创建一个流套接字并将其连接到指定主机上的指定端口号。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*参数：String host：服务器主机的名称/服务器的IP地址</span></span><br><span class="line"><span class="comment">*	  int port：服务器的端口号 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>成员方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">OutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="comment">//返回此套接字的输出流。 </span></span></span><br><span class="line"><span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="comment">//返回此套接字的输入流。 </span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="comment">//关闭此套接字。 </span></span></span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建客户端对象Socket，构造方法中绑定服务器的IP地址和端口号</li>
<li>使用Socket对象中的方法getOutputStream获取网络字节输出流OutputStream对象。</li>
<li>使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据。</li>
<li>使用Socket对象中的方法getInputStream获取网络字节输入流InputStream对象</li>
<li>使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据</li>
<li>释放资源（Socket）</li>
</ol>
<p><strong>注意</strong></p>
<ol>
<li>客户端和服务器进行交互，必须使用Socket中提供的网络流，不能使用自己创建的流对象</li>
<li>当我们创建客户端对象Socket的时候，就会去请求服务器和服务器经过三次握手建立连接通路。如果服务器没有启动，那么就会抛出异常<br>如果服务器已经启动，就可以进行交互了。</li>
</ol>
<h5 id="3-TCP通信的服务器端"><a href="#3-TCP通信的服务器端" class="headerlink" title="3.TCP通信的服务器端"></a>3.TCP通信的服务器端</h5><p><strong>TCP通信的服务器端：</strong>接收客户端的请求，读取客户端发送的数据，给客户端回写数据</p>
<p><strong>表示服务器端的类</strong></p>
<blockquote>
<p>java.net.ServerSocket<br>此类实现服务器套接字。服务器套接字等待请求通过网络传入。它基于该请求执行某些操作，然后可能向请求者返回结果。 </p>
<p>服务器套接字的实际工作由 SocketImpl 类的实例执行。应用程序可以更改创建套接字实现的套接字工厂来配置它自身，从而创建适合本地防火墙的套接字。</p>
</blockquote>
<p><strong>构造方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket(<span class="keyword">int</span> port) <span class="comment">//创建绑定到特定端口的服务器套接字。</span></span><br></pre></td></tr></table></figure>

<p><strong>成员方法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Socket accept() //	侦听并接受到此套接字的连接。 </span><br></pre></td></tr></table></figure>

<p><strong>使用步骤</strong></p>
<ol>
<li>创建服务器对象ServerSocket，构造方法中传递端口号</li>
<li>使用ServerSocket对象中的accept方法，获取到请求的客户端对象Socket</li>
<li>使用Socket对象中的方法getInputStream获取网络字节输入流InputStream</li>
<li>使用网络字节输入流InputStream对象中的方法read，读取客户端发送的数据 </li>
<li>使用Socket对象中的方法getOutputStream获取网络字节输出流OutputStream对象。</li>
<li>使用网络字节输出流OutputStream对象中的方法write，给客户端回写数据</li>
<li>释放资源（Socket，ServerSocket）</li>
</ol>
<p><strong>代码实现</strong></p>
<p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建客户端对象Socket，构造方法中绑定服务器的IP地址和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2.使用Socket对象中的方法getOutputStream获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据。</span></span><br><span class="line">        os.write(<span class="string">&quot;你好，服务器&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//4.使用Socket对象中的方法getInputStream获取网络字节输入流InputStream对象</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//5.使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//        int len = 0;</span></span><br><span class="line"><span class="comment">//        while((len = inputStream.read(bytes))!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(new String(bytes,0,len));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">int</span> len = inputStream.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">//6.释放资源（Socket）</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>服务器端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建服务器对象ServerSocket，构造方法中传递端口号</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2.使用ServerSocket对象中的accept方法，获取到请求的客户端对象Socket</span></span><br><span class="line">        Socket socket = serverSocket.accept();</span><br><span class="line">        <span class="comment">//3.使用Socket对象中的方法getInputStream获取网络字节输入流InputStream</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.使用网络字节输入流InputStream对象中的方法read，读取客户端发送的数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//        int len = 0;</span></span><br><span class="line"><span class="comment">//        while((len = inputStream.read(bytes))!=-1)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(new String(bytes,0,len));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">int</span> len = inputStream.read(bytes);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">//5.使用Socket对象中的方法getOutputStream获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//6.使用网络字节输出流OutputStream对象中的方法write，给客户端回写数据</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;你好，客户端&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//7.释放资源（Socket，ServerSocket）</span></span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-文件上传案例"><a href="#4-文件上传案例" class="headerlink" title="4.文件上传案例"></a>4.文件上传案例</h5><p><strong>客户端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个本地输入流对象FileInputStream，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\1.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建一个客户端对象Socket，构造方法中绑定服务器的IP地址和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//3.使用Socket对象中的方法getOutputStream获取网络字节输出流OutputStream对象。</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//4.使用本地字节输入流FileInputStream对象中的方法read，读取本地文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//5.使用网络字节输出流OutputStream对象中的方法write，把读取到的文件上传到服务器。</span></span><br><span class="line">            os.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结束标记</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//6.使用Socket对象中的方法getInputStream获取网络字节输入流InputStream对象</span></span><br><span class="line">        InputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">//7.使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据</span></span><br><span class="line">        <span class="keyword">while</span>((len = is.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//8.释放资源（Socket FileInputStream）</span></span><br><span class="line">        fis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>服务器端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传的服务器端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个服务器ServerSocket对象，和系统指定的端口号</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//2.使用ServerSocket对象中的accept方法，获取到请求的客户端Socket对象</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Socket socket = serverSocket.accept();</span><br><span class="line">                        <span class="comment">//3.使用Socket对象中的方法getInputStream，获取到网路字节输入流InputStream对象</span></span><br><span class="line">                        InputStream is = socket.getInputStream();</span><br><span class="line">                        <span class="comment">//4.判断d:\\upload文件夹是否存在，不存在则创建</span></span><br><span class="line">                        File file = <span class="keyword">new</span> File(<span class="string">&quot;d:\\upload&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">                            file.mkdir();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地</span></span><br><span class="line">                        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file+<span class="string">&quot;\\1.jpg&quot;</span>);</span><br><span class="line">                        <span class="comment">//6.使用网络字节输入流InputStream对象中的方法read，读取客户端上传的文件</span></span><br><span class="line">                        <span class="keyword">int</span> len =<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">while</span>((len = is.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="comment">//7.使用本地字节输出流FileOutputStream对象中的方法write，把读取到的文件保存到服务器的硬盘上</span></span><br><span class="line">                            fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//8.使用Socket对象中的方法getOutputStream，获取到网路字节输入流OutputStream对象</span></span><br><span class="line">                        OutputStream os = socket.getOutputStream();</span><br><span class="line">                        <span class="comment">//9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写上传成功</span></span><br><span class="line">                        os.write(<span class="string">&quot;上传成功&quot;</span>.getBytes());</span><br><span class="line">                        <span class="comment">//10.释放资源（FileOutputStream，Socket，ServerSocket）</span></span><br><span class="line">                        fos.close();</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-模拟BS服务器"><a href="#5-模拟BS服务器" class="headerlink" title="5.模拟BS服务器"></a>5.模拟BS服务器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建BS版TCP服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BSTCPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个服务器ServerSocket对象，和系统指定的端口号</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 浏览器解析服务器回写的html页面，页面中有图片，那么浏览器会单独的开启一个线程，读取服务器的文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//2.使用ServerSocket对象中的accept方法，获取到请求的浏览器Socket对象</span></span><br><span class="line">                        Socket socket = serverSocket.accept();</span><br><span class="line">                        <span class="comment">//3.使用Socket对象中的方法getInputStream，获取到网路字节输入流InputStream对象</span></span><br><span class="line">                        InputStream is = socket.getInputStream();</span><br><span class="line">                        <span class="comment">//4.把is网络字节输入流对象，转换为字符缓冲流</span></span><br><span class="line"><span class="comment">//                        int len =0;</span></span><br><span class="line"><span class="comment">//                        byte[] bytes = new byte[1024];</span></span><br><span class="line"><span class="comment">//                        while((len = is.read(bytes))!=-1)&#123;</span></span><br><span class="line"><span class="comment">//                            //7.使用本地字节输出流FileOutputStream对象中的方法write，把读取到的文件保存到服务器的硬盘上</span></span><br><span class="line"><span class="comment">//                            System.out.println(new String(bytes,0,len));</span></span><br><span class="line"><span class="comment">//                        &#125;</span></span><br><span class="line">                        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">                        <span class="comment">//把客户端请求的第一行读取出来</span></span><br><span class="line">                        String line = br.readLine();</span><br><span class="line">                        <span class="comment">//把读取的信息进行切割,只要中间部分</span></span><br><span class="line">                        String[] str = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                        <span class="comment">//把路径前面的/去掉，进行截取</span></span><br><span class="line">                        String htmlPath = str[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">                        <span class="comment">//创建一个本地字节输入流，构造方法中绑定要读取的html路径</span></span><br><span class="line">                        FileInputStream fis = <span class="keyword">new</span> FileInputStream(htmlPath);</span><br><span class="line">                        <span class="comment">//8.使用Socket对象中的方法getOutputStream，获取到网路字节输入流OutputStream对象</span></span><br><span class="line">                        OutputStream os = socket.getOutputStream();</span><br><span class="line">                        <span class="comment">//写入HTTP协议响应头，固定写法</span></span><br><span class="line">                        os.write(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.getBytes());</span><br><span class="line">                        os.write(<span class="string">&quot;Content-Type:text/html\r\n&quot;</span>.getBytes());</span><br><span class="line">                        os.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">                        <span class="comment">//一读一写复制文件，把服务器读取的文件回写到客户端</span></span><br><span class="line">                        <span class="keyword">int</span> len =<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="comment">//7.使用本地字节输出流FileOutputStream对象中的方法write，把读取到的文件保存到服务器的硬盘上</span></span><br><span class="line">                            os.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                        &#125;</span><br><span class="line">                        fis.close();</span><br><span class="line">                        socket.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//serverSocket.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十二-函数式接口"><a href="#十二-函数式接口" class="headerlink" title="十二.函数式接口"></a>十二.函数式接口</h3><p><strong>概念</strong></p>
<blockquote>
<p>有且仅有一个抽象方法的接口</p>
</blockquote>
<p><strong>格式</strong></p>
<blockquote>
<p>修饰符 interface 接口名称{<br>    public abstract 返回值类型 方法名称（可选参数信息）；<br>    //其他非抽象方法<br>}</p>
</blockquote>
<h4 id="1-FunctionInterface注解"><a href="#1-FunctionInterface注解" class="headerlink" title="1.FunctionInterface注解"></a>1.FunctionInterface注解</h4><p><strong>作用</strong></p>
<p>可以检测接口是否是一个函数式接口<br>是：编译成功<br>否：编译失败（接口中没有抽象方法或者抽象方法个数大于1）</p>
<h4 id="2-函数式编程"><a href="#2-函数式编程" class="headerlink" title="2.函数式编程"></a>2.函数式编程</h4><h5 id="1-lambda的延迟执行"><a href="#1-lambda的延迟执行" class="headerlink" title="1.lambda的延迟执行"></a>1.lambda的延迟执行</h5><blockquote>
<p>有些场景的代码执行后，结构不一定会被使用，从而造成性能浪费。而lambda表达式时延迟执行的，正好可以作为解决方案，提升性能</p>
</blockquote>
<h4 id="3-常用的函数式接口"><a href="#3-常用的函数式接口" class="headerlink" title="3.常用的函数式接口"></a>3.常用的函数式接口</h4><h5 id="1-Supplier"><a href="#1-Supplier" class="headerlink" title="1.Supplier"></a>1.Supplier</h5><blockquote>
<p>java.util.function Interface Supplier<T>接口仅包含一个无参的方法T get().用来获取一个泛型参数指定类型的对象数据。</p>
<p>Supplier<T>接口被称之为生产型接口，指定接口的泛型是什么类型，那么接口中get方法就会生产什么类型的数据</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用函数式接口Supplier，查找数组中的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(Supplier&lt;Integer&gt; sup)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">9</span>,<span class="number">30</span>,<span class="number">5</span>,<span class="number">60</span>,<span class="number">30</span>,<span class="number">100</span>,<span class="number">59</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> maxValue = getMax(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//定义变量，记录最大值</span></span><br><span class="line">            <span class="keyword">int</span> max=arr[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i&gt;max)&#123;</span><br><span class="line">                    max = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> max;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(maxValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-consumer"><a href="#2-consumer" class="headerlink" title="2.consumer"></a>2.consumer</h5><blockquote>
<p>java.util.function Interface Consumer<T><br>正好和Supplier接口相反，它不是生产一个数据，而是消费一个数据，其数据类型由泛型决定<br>Consumer接口中包含的抽象方法void accept（T t），意为消费一个指定泛型的数据，至于怎么消费，自定义</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Consumer接口反转输出字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String name, Consumer&lt;String&gt; con)</span></span>&#123;</span><br><span class="line">        con.accept(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(<span class="string">&quot;张三&quot;</span>,(name)-&gt;&#123;</span><br><span class="line">            <span class="comment">//把字符串进行反转输出</span></span><br><span class="line">            String reName = <span class="keyword">new</span> StringBuffer(name).reverse().toString();</span><br><span class="line">            System.out.println(reName);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Concusmer接口的默认方法andThen</strong></p>
<blockquote>
<p>default Consumer<T> andThen(Consumer&lt;? super T&gt; after)返回一个组合的Consumer ， Consumer执行该操作，后跟after操作。 如果执行任一操作会抛出异常，它将被转发到组合操作的调用者。 如果执行此操作抛出一个异常， after操作将不被执行。<br>需要两个Consumer接口，可以把两个Consumer接口组合到一起，在对数据进行消费</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDefaultFDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String str, Consumer&lt;String&gt; con1,Consumer&lt;String&gt; con2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用andThen方法，把两个Consumer接口连接到一起，再消费数据</span></span><br><span class="line">        con1.andThen(con2).accept(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method(<span class="string">&quot;Hello&quot;</span>,(str)-&gt;System.out.println(str.toLowerCase()),(str)-&gt;System.out.println(str.toUpperCase()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-Predicate"><a href="#3-Predicate" class="headerlink" title="3.Predicate"></a>3.Predicate</h5><blockquote>
<p>java.util.function Interface Predicate<T><br><strong>作用：</strong>对某种数据类型的数据进行判断，结果返回一个boolean值<br>接口中包含一个抽象方法：<br>boolean test(T t) ：用来对指定数据类型进行判断<br><strong>结果：</strong>符合条件，返回True<br>     不符合条件，返回False</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkedString</span><span class="params">(String str, Predicate&lt;String&gt; pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre.test(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = checkedString(<span class="string">&quot;abcdef&quot;</span>,(str)-&gt;&#123;</span><br><span class="line">            <span class="comment">//判断字符串的长度是否大于5</span></span><br><span class="line">            <span class="keyword">return</span> str.length()&gt;<span class="number">5</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1-Predicate接口中的默认方法and"><a href="#1-Predicate接口中的默认方法and" class="headerlink" title="1.Predicate接口中的默认方法and"></a>1.Predicate接口中的默认方法and</h6><blockquote>
<p>Predicate接口中的默认方法and：表并且关系，也可以用于连接两个判断条件</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Predicate方法中的默认方法and</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateAndDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkedString</span><span class="params">(String str, Predicate&lt;String&gt; pre1,Predicate&lt;String&gt; pre2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre1.and(pre2).test(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = checkedString(<span class="string">&quot;abcde&quot;</span>,(str)-&gt;str.length()&gt;<span class="number">5</span>,(str)-&gt;str.contains(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-Predicate接口中的默认方法or"><a href="#2-Predicate接口中的默认方法or" class="headerlink" title="2.Predicate接口中的默认方法or"></a>2.Predicate接口中的默认方法or</h6><blockquote>
<p>Predicate接口中的默认方法or:表或关系 和and方法用法一样</p>
</blockquote>
<h6 id="3-Predicate接口中的默认方法negate"><a href="#3-Predicate接口中的默认方法negate" class="headerlink" title="3.Predicate接口中的默认方法negate"></a>3.Predicate接口中的默认方法negate</h6><blockquote>
<p>Predicate接口中的默认方法negate:表取反</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateNegateDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkedString</span><span class="params">(String str, Predicate&lt;String&gt; pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre.negate().test(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b = checkedString(<span class="string">&quot;abcde&quot;</span>,(str)-&gt;str.length()&gt;<span class="number">5</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-Predicate综合案例"><a href="#4-Predicate综合案例" class="headerlink" title="4.Predicate综合案例"></a>4.Predicate综合案例</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断给定的数组中，名字长度大于等于4，且性别是女的人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicatePracticeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String str, Predicate&lt;String&gt; pre1,Predicate&lt;String&gt; pre2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre1.and(pre2).test(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strings = &#123;<span class="string">&quot;迪丽热巴，女&quot;</span>,<span class="string">&quot;古力娜扎，女&quot;</span>,<span class="string">&quot;马儿扎哈，男&quot;</span>,<span class="string">&quot;赵丽颖，女&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String message : strings) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> b = check(message,(str)-&gt;&#123;</span><br><span class="line">                String[] name = str.split(<span class="string">&quot;，&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> name[<span class="number">0</span>].length()&gt;=<span class="number">4</span>;</span><br><span class="line">            &#125;,(str)-&gt;&#123;</span><br><span class="line">                String[] sex = str.split(<span class="string">&quot;，&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> sex[<span class="number">1</span>].equals(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (b)&#123;</span><br><span class="line">                System.out.println(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-Function接口"><a href="#4-Function接口" class="headerlink" title="4.Function接口"></a>4.Function接口</h4><blockquote>
<p>java.util.function Interface Function&lt;T,R&gt;<br>用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件<br>最主要的抽象方法是：R apply(T t),根据类型T的参数获取类型R的结果</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串转换为int类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">test</span><span class="params">(String str, Function&lt;String,Integer&gt; fun)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun.apply(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = test(<span class="string">&quot;123&quot;</span>,(str)-&gt;Integer.parseInt(str));</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-Function接口中的默认方法andThen"><a href="#1-Function接口中的默认方法andThen" class="headerlink" title="1.Function接口中的默认方法andThen"></a>1.Function接口中的默认方法andThen</h5><blockquote>
<p>Function接口中的默认方法andThen：用来进行组合操作</p>
</blockquote>
<p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串“123”转换为Integer类型，再+10，再转换为字符串输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionAndThenDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, Function&lt;String,Integer&gt; fun1,Function&lt;Integer,String&gt; fun2)</span> </span>&#123;</span><br><span class="line">        String s = fun1.andThen(fun2).apply(str);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        change(<span class="string">&quot;123&quot;</span>,(str)-&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(str)+<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;,(str)-&gt;&#123;</span><br><span class="line">            String s = str.toString();</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十三-Stream流"><a href="#十三-Stream流" class="headerlink" title="十三.Stream流"></a>十三.Stream流</h3><p><strong>概念</strong></p>
<blockquote>
<p>public interface Stream<T> extends BaseStream&lt;T,Stream<T>&gt;<br>从jdk1.8开始，关注的是做什么，而不是怎么做<br>1.Stream是元素的集合，这点让Stream看起来用些类似Iterator；<br>2.可以支持顺序和并行的对原Stream进行汇聚的操作；<br>大家可以把Stream当成一个高级版本的Iterator。原始版本的Iterator，用户只能一个一个的遍历元素并对其执行某些操作；高级版本的Stream，用户只要给出需要对其包含的元素执行什么操作，比如“过滤掉长度大于10的字符串”、“获取每个字符串的首字母”等，具体这些操作如何应用到每个元素上，就给Stream就好了！</p>
</blockquote>
<p><strong>注意</strong></p>
<p>Stream流其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何元素（或其地址值）<br>Stream流是一个来自数据源的元素队列：</p>
<ol>
<li>元素是特定类型的对象，形成一个队列。java中的Stream并不会存储元素，而是按需计算。</li>
<li>数据源：流的来源可以是集合、数组等。</li>
</ol>
<h4 id="1-使用Stream流的方式遍历集合"><a href="#1-使用Stream流的方式遍历集合" class="headerlink" title="1.使用Stream流的方式遍历集合"></a>1.使用Stream流的方式遍历集合</h4><p><strong>案例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Stream流过滤名字长度为2且以张开头的名字，打印输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.stream().filter((name)-&gt;name.length()==<span class="number">2</span>)</span><br><span class="line">                .filter((name)-&gt;name.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                .forEach(name-&gt; System.out.println(name));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-两种获取Stream流的方式"><a href="#2-两种获取Stream流的方式" class="headerlink" title="2.两种获取Stream流的方式"></a>2.两种获取Stream流的方式</h4><ol>
<li>所有的Collection集合都可以通过stream默认方法获取流</li>
<li>Stream接口的静态方法of可以获取数组对应的流 static <T> Stream<T> of(T… values)</li>
</ol>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//把集合转换为Stream流</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; stream1 = set.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map需要将键与值转换为Collection集合</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        Stream&lt;String&gt; stream2 = keySet.stream();</span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        Stream&lt;String&gt; stream3 = values.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取键值对（键与值的映射关系 entrySet）</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String, String&gt;&gt; stream4 = entries.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把数组转换为Stream流</span></span><br><span class="line">        Stream&lt;Integer&gt; stream5 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//可变参数可以传递数组</span></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Stream&lt;Integer&gt; stream6 = Stream.of(arr);</span><br><span class="line">        String[] arr2 = &#123;<span class="string">&quot;123&quot;</span>,<span class="string">&quot;asda&quot;</span>,<span class="string">&quot;ccc&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream7 = Stream.of(arr2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h4><h5 id="1-fouEach-逐一处理"><a href="#1-fouEach-逐一处理" class="headerlink" title="1.fouEach(逐一处理)"></a>1.fouEach(逐一处理)</h5><blockquote>
<p>void forEach(Consumer&lt;? super T&gt; action)该方法接收一个Consumer接口，会将每一个流元素交给该函数处理<br>Consumer接口中包含的抽象方法void accept（T t）</p>
</blockquote>
<p><strong>简单记</strong></p>
<blockquote>
<p>forEach方法，用来遍历流中的数据<br>是一个终结方法，遍历之后就不能继续调用Stream流中的其他方法</p>
</blockquote>
<p><strong>特点</strong></p>
<blockquote>
<p>1.Stream流属于管道流，只能被消费一次<br>第一个Stream流调用完毕方法，数据就会流转到下一个Stream上，而这时第一个Stream流已经使用完毕，就会关闭，使用第一个Stream流就不能再调用方法了</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取一个Stream流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        <span class="comment">//使用Stream流中的方法forEach对Stream流中的数据进行遍历</span></span><br><span class="line">        stream.forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-filter-过滤"><a href="#2-filter-过滤" class="headerlink" title="2.filter(过滤)"></a>2.filter(过滤)</h5><blockquote>
<p>Stream<T> filter(Predicate&lt;? super T&gt; predicate)对Stream流中的元素进行过滤<br>Predicate中的抽象方法boolean test(T t) ：用来对指定数据类型进行判断</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        stream.filter(name -&gt; name.startsWith(<span class="string">&quot;张&quot;</span>)).forEach(name-&gt; System.out.println(name));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-map-映射"><a href="#3-map-映射" class="headerlink" title="3.map(映射)"></a>3.map(映射)</h5><blockquote>
<p><R> Stream<R> map(Function&lt;? super T,? extends R&gt; mapper)<br>该接口需要一个Function函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流<br>Function中的抽象方法：<br>R apply(T t)</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串转换为Integer类型输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; integerStream = stream.map((String s) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(s);</span><br><span class="line">        &#125;);</span><br><span class="line">        integerStream.forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-count-统计"><a href="#4-count-统计" class="headerlink" title="4.count(统计)"></a>4.count(统计)</h5><blockquote>
<p>long count()：用于统计Stream流中元素的个数<br>count方法是一个终结方法，返回值是一个long类型的整数<br>所有不能再继续调用Stream流中的其他方法了</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Stream流中元素的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line">        list.add(<span class="number">6</span>);</span><br><span class="line">        list.add(<span class="number">7</span>);</span><br><span class="line">        list.add(<span class="number">8</span>);</span><br><span class="line">        Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">        <span class="keyword">long</span> count = stream.count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-limit-截取"><a href="#5-limit-截取" class="headerlink" title="5.limit(截取)"></a>5.limit(截取)</h5><blockquote>
<p>Stream<T> limit(long maxSize) 可以对流进行截取，只取用前n个<br>参数是一个long型，如果集合长度大于参数则进行截取，否则不进行操作<br>limit方法是一个延迟方法，只是对流中的元素进行截取，返回的是一个新的流，所有可以继续调用Stream流中的其他方法 </p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对字符串数组进行截取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamLimit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(arr);</span><br><span class="line">        stream.limit(<span class="number">2</span>).forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-skip-跳过"><a href="#6-skip-跳过" class="headerlink" title="6.skip(跳过)"></a>6.skip(跳过)</h5><blockquote>
<p>Stream<T> skip(long n)用于跳过元素<br>如果流的当前长度大于n,则跳过前n个,否则将会得到一个长度为0的空流</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamSkip</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳过字符串数组中前两个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(arr);</span><br><span class="line">        stream.skip(<span class="number">2</span>).forEach(name -&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="7-concat"><a href="#7-concat" class="headerlink" title="7.concat"></a>7.concat</h5><blockquote>
<p>static <T> Stream<T> generate(Supplier<T> s):用于把流组合到一起</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamConcat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        Stream&lt;Integer&gt; stream2 = list.stream();</span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(arr);</span><br><span class="line">        Stream&lt;Serializable&gt; concat = Stream.concat(stream1, stream2);</span><br><span class="line">        concat.forEach(name-&gt; System.out.println(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十四-方法引用"><a href="#十四-方法引用" class="headerlink" title="十四.方法引用"></a>十四.方法引用</h3><h4 id="1-方法引用符"><a href="#1-方法引用符" class="headerlink" title="1.方法引用符"></a>1.方法引用符</h4><blockquote>
<p>双冒号::为引用运算符,而它所在的表达式被称为方法引用.如果Lambda要表达的函数方案已经存在于某个方法的实现中,那么则可以通过双冒号来引用该方法作为Lambda的代替者<br>注意:<br>Lambda中传递的参数一定是方法中的那个方法可以接收的类型,否则会抛出异常</p>
</blockquote>
<h4 id="2-通过对象名引用成员方法"><a href="#2-通过对象名引用成员方法" class="headerlink" title="2.通过对象名引用成员方法"></a>2.通过对象名引用成员方法</h4><p><strong>使用前提</strong></p>
<blockquote>
<p>对象名已经存在,成员方法也是已经存在,就可以使用对象名引用成员方法</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodRerObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCaseString</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(s.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoObjectReference</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(Printable p)</span></span>&#123;</span><br><span class="line">        p.print(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        printString((s)-&gt;&#123;</span></span><br><span class="line"><span class="comment">//            MethodRerObject methodRerObject = new MethodRerObject();</span></span><br><span class="line"><span class="comment">//            methodRerObject.printUpperCaseString(s);</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        MethodRerObject methodRerObject = <span class="keyword">new</span> MethodRerObject();</span><br><span class="line">        printString(methodRerObject::printUpperCaseString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-通过类名引用静态成员方法"><a href="#3-通过类名引用静态成员方法" class="headerlink" title="3.通过类名引用静态成员方法"></a>3.通过类名引用静态成员方法</h4><blockquote>
<p>类已经存在,静态成员方法也已经存在,就可以通过类名直接引用静态成员方法</p>
</blockquote>
<p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calcable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calcAbs</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodStaticObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> n,Calcable c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.calcAbs(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = method(-<span class="number">10</span>,(n)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(n);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="comment">//使用方法引用优化Lambda</span></span><br><span class="line">        <span class="keyword">int</span> num2 = method(-<span class="number">10</span>,Math::abs);</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十五-Junit"><a href="#十五-Junit" class="headerlink" title="十五.Junit"></a>十五.Junit</h3><h4 id="1-测试分类"><a href="#1-测试分类" class="headerlink" title="1.测试分类"></a>1.测试分类</h4><blockquote>
<p>**黑盒测试:**不需要写代码,给输入值,看程序是否能够输出期望的值.<br>**白盒测试:**需要写代码,关注程序具体的执行流程</p>
</blockquote>
<h4 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2.使用步骤"></a>2.使用步骤</h4><ol>
<li>定义一个测试类(测试用例)<br>建议:<pre><code>测试类名:被测试的类名Test  Test
包名:***.***.**.test 
</code></pre>
</li>
<li>定义测试的方法:可以独立运行<br>建议:<pre><code>方法名:test测试的方法名 testAdd()
返回值:void
参数列表:空参
</code></pre>
</li>
<li>给方法加@Test</li>
<li>导入junit依赖环境<br>判定结果<br>红色:失败<br>绿色:成功<br>一般会使用断言操作来处理结果<br>Assert.assertEquals(期望的结果,程序真实的结果)</li>
</ol>
<h4 id="3-before-amp-after"><a href="#3-before-amp-after" class="headerlink" title="3.@before&amp;@after"></a>3.@before&amp;@after</h4><p>**@before:**修饰的方法会在测试方法之前执行<br>**@after:**修饰的方法会在测试方法之后执行</p>
<h3 id="十六-反射"><a href="#十六-反射" class="headerlink" title="十六.反射"></a>十六.反射</h3><p><strong>概念</strong></p>
<blockquote>
<p>将类的各个组成部分封装为对象,这就是反射机制<br>反射:框架设计的灵魂<br>框架:半成品软件.可以在框架的基础上进行软件开发,简化代码</p>
</blockquote>
<p><strong>好处</strong></p>
<ol>
<li>可以在程序运行过程中,操作这些对象.</li>
<li>可以解耦,提高程序的可扩展性</li>
</ol>
<h4 id="获取Class对象的方式"><a href="#获取Class对象的方式" class="headerlink" title="获取Class对象的方式"></a>获取Class对象的方式</h4><ol>
<li>Class.forName(“全类名”):将字节码文件加载进内存,返回Class对象.//多用于配置文件,将类名定义在配置文件中.读取文件,加载类</li>
<li>类名.class:通过类名的属性class获取.//多用于参数的传递</li>
<li>对象.getClass():getClass()方法在Object类中定义.//多用于对象的获取字节码的方式<br>**结论:*<em>同一个字节码文件(</em>.class)在一次程序运行过程中,只会被加载一次,不论通过哪一种方式获取的Class对象都是同一个</li>
</ol>
<h4 id="Class对象的功能"><a href="#Class对象的功能" class="headerlink" title="Class对象的功能"></a>Class对象的功能</h4><h5 id="1-获取成员变量们"><a href="#1-获取成员变量们" class="headerlink" title="1.获取成员变量们"></a>1.获取成员变量们</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Field <span class="title">getField</span><span class="params">(String name)</span> <span class="comment">//返回一个 Field 对象，它反映此 Class 对象所表示的类或接口的指定公共成员字段。 </span></span></span><br><span class="line"><span class="function">Field[] <span class="title">getFields</span><span class="params">()</span> 返回一个包含某些 Field 对象的数组，这些对象反映此 Class 对象所表示的类或接口的所有可访问公共字段。 </span></span><br></pre></td></tr></table></figure>

<h5 id="2-获取构造方法们"><a href="#2-获取构造方法们" class="headerlink" title="2.获取构造方法们"></a>2.获取构造方法们</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span> <span class="comment">//返回一个 Constructor 对象，它反映此 Class 对象所表示的类的指定公共构造方法。 </span></span></span><br><span class="line"><span class="function">Constructor&lt;?&gt;[] <span class="title">getConstructors</span><span class="params">()</span> <span class="comment">//返回一个包含某些 Constructor 对象的数组，这些对象反映此 Class 对象所表示的类的所有公共构造方法。 </span></span></span><br><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span> <span class="comment">//返回一个 Constructor 对象，该对象反映此 Class 对象所表示的类或接口的指定构造方法。 </span></span></span><br><span class="line"><span class="function">Constructor&lt;?&gt;[] <span class="title">getDeclaredConstructors</span><span class="params">()</span> <span class="comment">//返回 Constructor 对象的一个数组，这些对象反映此 Class 对象表示的类声明的所有构造方法。 </span></span></span><br></pre></td></tr></table></figure>

<h5 id="3-获取成员方法们"><a href="#3-获取成员方法们" class="headerlink" title="3.获取成员方法们"></a>3.获取成员方法们</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span> <span class="comment">//返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。 </span></span></span><br><span class="line"><span class="function">Method[] <span class="title">getMethods</span><span class="params">()</span> <span class="comment">//返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。 </span></span></span><br><span class="line"><span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span> <span class="comment">//返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。 </span></span></span><br><span class="line"><span class="function">Method[] <span class="title">getDeclaredMethods</span><span class="params">()</span> <span class="comment">//返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。 </span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h5 id="4-获取类名"><a href="#4-获取类名" class="headerlink" title="4.获取类名"></a>4.获取类名</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span> <span class="comment">//以 String 的形式返回此 Class 对象所表示的实体（类、接口、数组类、基本类型或 void）名称。 </span></span></span><br></pre></td></tr></table></figure>

<h3 id="十七-注解"><a href="#十七-注解" class="headerlink" title="十七.注解"></a>十七.注解</h3><p><strong>定义</strong></p>
<blockquote>
<p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。<br>Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 。 当然它也支持自定义 Java 标注。</p>
</blockquote>
<p><strong>内置的注解</strong></p>
<blockquote>
<p>Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。</p>
</blockquote>
<p><strong>作用在代码的注解是</strong></p>
<blockquote>
<p>@Override - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。<br>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。<br>@SuppressWarnings - 指示编译器去忽略注解中声明的警告。</p>
</blockquote>
<p>作用在其他注解的注解(或者说 元注解)是:</p>
<blockquote>
<p>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。(RUNTIME&gt;CLASS&gt;SOURCE)<br>@Documented - 标记这些注解是否包含在用户文档中。<br>@Target - 标记这个注解应该是哪种 Java 成员。<br>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</p>
</blockquote>
<p>从 Java 7 开始，额外添加了 3 个注解:</p>
<blockquote>
<p>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。<br>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。<br>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</p>
</blockquote>
<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><blockquote>
<p>使用@interface自定义注解时,自动继承了java.lang.annotation.Annotation接口</p>
</blockquote>
<p><strong>分析</strong></p>
<ul>
<li>@interface用来声明一个注解,格式:public @interface 注解名{定义内容}</li>
<li>其中的每一个方法实际上是声明了一个配置参数</li>
<li>方法的名称就是参数的名称</li>
<li>返回值类型就是参数的类型(返回值类型只能是基本类型,Class,String,enum)</li>
<li>可以通过default来声明参数的默认值</li>
<li>如果只有一个参数成员,一般参数名为value</li>
<li>注解元素必须要有值,我们定义注解元素时,经常使用空字符串,0作为默认值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnnotation(age=18)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="meta">@MyAnnotation01(&quot;aa&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    String[] hobby() <span class="keyword">default</span> &#123;<span class="string">&quot;唱歌&quot;</span>,<span class="string">&quot;打游戏&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation01&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
